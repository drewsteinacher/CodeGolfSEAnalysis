(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    689648,      13769]
NotebookOptionsPosition[    680300,      13594]
NotebookOutlinePosition[    680643,      13609]
CellTagsIndexPosition[    680600,      13606]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Process metadata", "Section",ExpressionUUID->"f9dac247-3fb1-4fc5-b6f1-51b09b27dbd0"],

Cell["\<\
This process allows for some cleanup of the metadata gathered and re-exported \
into cleaner, easier to use EntityStores for exploration.\
\>", "Text",ExpressionUUID->"a9d83211-8bb6-4752-a0c5-728a105aeb1d"],

Cell[CellGroupData[{

Cell["Load Paclet", "Subsection",ExpressionUUID->"7ba87b9d-b993-4a81-9e57-f567ae0e9bf9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"PacletDirectoryAdd", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Get", "[", "\"\<CodeGolfSEAnalysis`\>\"", "]"}]}], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"965c2508-283f-476c-b245-4ab2575ea958"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Load prefetched EntityStores", "Subsection",
 CellChangeTimes->{
  3.780420135324442*^9},ExpressionUUID->"78330f9d-a183-47f0-964f-\
f30e0b8e7afb"],

Cell["These were generated in GatherMetadata.nb:", "Text",
 CellChangeTimes->{{3.780403136300001*^9, 
  3.7804031556519833`*^9}},ExpressionUUID->"4f734786-aa17-434e-85cd-\
7f573f61a387"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"codeGolfEntityStore", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<codegolf.stackexchange.com_WithMetadata_2019-10-18_16-08-14.mx\>\"", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EntityUnregister", "/@", 
   RowBox[{"codeGolfEntityStore", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EntityRegister", "[", "codeGolfEntityStore", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"codeGolfLanguageEntityStore", "=", 
   RowBox[{
   "Import", "[", 
    "\"\<CodeGolfProgrammingLanguage_2019-10-18_16-08-59.mx\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EntityUnregister", "/@", 
   RowBox[{"codeGolfLanguageEntityStore", "[", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"EntityRegister", "[", "codeGolfLanguageEntityStore", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.780403169150653*^9, 3.780403188851948*^9}, {
  3.780418195768467*^9, 3.7804182022398643`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"f54d74e0-2b98-464c-81fc-15fa44a7b55f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"StackExchange.Codegolf:User\"\>", 
   ",", "\<\"StackExchange.Codegolf:Badge\"\>", 
   ",", "\<\"StackExchange.Codegolf:Comment\"\>", 
   ",", "\<\"StackExchange.Codegolf:Post\"\>", 
   ",", "\<\"StackExchange:PostType\"\>", 
   ",", "\<\"StackExchange.Codegolf:Vote\"\>", 
   ",", "\<\"StackExchange:VoteType\"\>", 
   ",", "\<\"StackExchange.Codegolf:PostHistory\"\>", 
   ",", "\<\"StackExchange:PostHistoryType\"\>", 
   ",", "\<\"StackExchange:CloseReason\"\>", 
   ",", "\<\"StackExchange.Codegolf:Tag\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7804182174035892`*^9, 3.7804201541798677`*^9, 
  3.7806795076978827`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"d6e9fe2e-591b-4249-8699-ab0d6f43dcbc"],

Cell[BoxData[
 RowBox[{"{", "\<\"CodeGolfProgrammingLanguage\"\>", "}"}]], "Output",
 CellChangeTimes->{3.7804182174035892`*^9, 3.7804201541798677`*^9, 
  3.7806795078783736`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"b9528f96-3312-4a73-9726-1788bb3590a2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Merge/Clean up programming language EntityStore", "Subsection",
 CellChangeTimes->{{3.7804031971458035`*^9, 3.780403197546223*^9}, 
   3.780419343685383*^9},ExpressionUUID->"3537d03e-7af9-431e-964d-\
9f504cf395a1"],

Cell[CellGroupData[{

Cell["List of languages that can be merged", "Subsubsection",ExpressionUUID->"ba85e1ee-0623-4482-82a7-698399859f8b"],

Cell["\<\
I manually sifted through the top several hundred and searched for possible \
duplicates.
Some of these are arbitrary, some are limitations to the name processing code.\
\>", "Text",ExpressionUUID->"43ec8029-33c5-467b-b3ac-5e0f8a945f10"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"languageToAlternatives", "=", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{
      TemplateBox[{"\"JavaScript\"",RowBox[{"Entity", "[", 
          
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
            "\"JavaScript::g3427\""}], "]"}],
        "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"JavaScript::g3427\\\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"JavaScript ES\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"javascriptes\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"javascriptes\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Node.js\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"node.js\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"node.js\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"NodeJS\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"nodejs\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"nodejs\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Node\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"node\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"node\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"JS ES\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"jses\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"jses\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Javascript / ES\"",RowBox[{"Entity", "[", 
            RowBox[{
             "\"CodeGolfProgrammingLanguage\"", ",", "\"javascript/es\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"javascript/es\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"JS\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"js\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"js\\\"]\"",
          "\"CodeGolfProgrammingLanguage\""},
         "Entity"]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
          "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Dyalog APL\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"dyalogapl\""}],
             "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"dyalogapl\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"APL(Dyalog\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"apl(dyalog\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"apl(dyalog\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Dyalog APL Extended\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"dyalogaplextended\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"dyalogaplextended\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"APL(NARS\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"apl(nars\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"apl(nars\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"APL\[ScriptCapitalJ]WIN\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"apl\[ScriptJ]win\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"apl\[ScriptJ]win\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"APL NARS\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"aplnars\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"aplnars\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"APL\[ScriptCapitalJ] score\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"apl\[ScriptJ]score\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"apl\[ScriptJ]score\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"APL(Dyalog Classic\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"apl(dyalogclassic\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"apl(dyalogclassic\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"APL\[ScriptCapitalJ] Mauris\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"apl\[ScriptJ]mauris\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"apl\[ScriptJ]mauris\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"APL\[ScriptCapitalJ] size\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"apl\[ScriptJ]size\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"apl\[ScriptJ]size\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"PowerShell\"",RowBox[{"Entity", "[", 
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"powershell\""}], 
          "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"powershell\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Windows PowerShell\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"WindowsPowerShell::886h5\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"WindowsPowerShell::886h5\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"PowerShell Core\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"powershellcore\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"powershellcore\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"PowerShell\[ScriptCapitalJ] score\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"powershell\[ScriptJ]score\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"powershell\
\[ScriptJ]score\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Powershell\[ScriptCapitalJ] \[LessEqual]\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"powershell\[ScriptJ]\[LessEqual]\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"powershell\
\[ScriptJ]\[LessEqual]\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"PowerShell for Windows\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"powershellforwindows\""}], "]"}],
          
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"powershellforwindows\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"Wolfram Language\"",RowBox[{"Entity", "[", 
          
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
            "\"WolframLanguage\""}], "]"}],
        "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"WolframLanguage\\\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Wolfram Mathematica\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"wolframmathematica\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"wolframmathematica\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Mathematica\[ScriptCapitalJ] score\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"mathematica\[ScriptJ]score\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"mathematica\
\[ScriptJ]score\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Mathematica \[ScriptCapitalJ] Wolfram\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"mathematica\[ScriptJ]wolfram\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"mathematica\
\[ScriptJ]wolfram\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Wolfram Methematica\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"wolframmethematica\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"wolframmethematica\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Wolfram \[TildeFullEqual]\"",RowBox[{"Entity", "[", 
            RowBox[{
             "\"CodeGolfProgrammingLanguage\"", ",", 
              "\"wolfram\[TildeFullEqual]\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"wolfram\
\[TildeFullEqual]\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Mathematica Simplified\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"mathematicasimplified\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"mathematicasimplified\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Mathematica\[ScriptCapitalJ] @Martin Ender\"",
          RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"mathematica\[ScriptJ]@martinender\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"mathematica\
\[ScriptJ]@martinender\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Mathematica on Windows\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"mathematicaonwindows\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"mathematicaonwindows\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Mathematica\[ScriptCapitalJ] n=\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"mathematica\[ScriptJ]n=\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"mathematica\
\[ScriptJ]n=\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Mathematica\[ScriptCapitalJ] size\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"mathematica\[ScriptJ]size\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"mathematica\
\[ScriptJ]size\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Mathematica\[ScriptCapitalJ] L=\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"mathematica\[ScriptJ]l=\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"mathematica\
\[ScriptJ]l=\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"C#\"",RowBox[{"Entity", "[", 
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::5zm8v\""}], 
          "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"C::5zm8v\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"CSharp\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"csharp\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"csharp\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"C\[ScriptCapitalJ]Sharp\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"c\[ScriptJ]sharp\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"c\[ScriptJ]sharp\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"C#\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::5zm8v\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"C::5zm8v\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"C# .NET\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"c#.net\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"c#.net\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"C# in LINQPAD\"",RowBox[{"Entity", "[", 
            RowBox[{
             "\"CodeGolfProgrammingLanguage\"", ",", "\"c#inlinqpad\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"c#inlinqpad\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"C# \[ScriptCapitalJ] Linq\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"c#\[ScriptJ]linq\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"c#\[ScriptJ]linq\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"C# \[ScriptCapitalJ] LINQPad\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"c#\[ScriptJ]linqpad\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"c#\[ScriptJ]linqpad\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"C# WPF\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"c#wpf\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"c#wpf\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"C# LINQ\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"c#linq\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"c#linq\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"F#\"",RowBox[{"Entity", "[", 
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"F::549k5\""}], 
          "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"F::549k5\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       TemplateBox[{"\"FSharp\"",RowBox[{"Entity", "[", 
           RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"fsharp\""}], 
           "]"}],
         "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"fsharp\\\"]\"",
         "\"CodeGolfProgrammingLanguage\""},
        "Entity"], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"><>\"",RowBox[{"Entity", "[", 
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"><>\""}], "]"}],
        "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"><>\\\"]\"",
        "\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       TemplateBox[{"\"><> Fish\"",RowBox[{"Entity", "[", 
           RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"><>fish\""}], 
           "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"><>fish\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
        "Entity"], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"C\"",RowBox[{"Entity", "[", 
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::p5vhv\""}], 
          "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"C::p5vhv\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"ANSI C\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"ANSIC::8zh69\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"ANSIC::8zh69\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"C Preprocessor\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"cpreprocessor\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"cpreprocessor\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"PHP\"",RowBox[{"Entity", "[", 
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"PHP::x8873\""}], 
          "]"}],
        "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"PHP::x8873\\\"]\"",
        "\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       TemplateBox[{"\"PHP>=\"",RowBox[{"Entity", "[", 
           RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"php>=\""}], 
           "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"php>=\\\"]\"","\"CodeGolfProgrammingLanguage\""},
        "Entity"], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{
       "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
          
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
            "\"Brainfuck::8mj43\""}], "]"}],
        "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"Brainfuck::8mj43\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Brainf***\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"brainf***\""}],
             "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"brainf***\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Brainf*ck\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"brainf*ck\""}],
             "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"brainf*ck\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Self-modifying Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",
          RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"self-modifyingbrainfu\[FreakedSmiley]\[FreakedSmiley]\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"self-modifyingbrainfu\[FreakedSmiley]\[FreakedSmiley]\\\"]\"",
          "\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Extended BrainFu\[FreakedSmiley]\[FreakedSmiley]\"",
          RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"extendedbrainfu\[FreakedSmiley]\[FreakedSmiley]\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"extendedbrainfu\
\[FreakedSmiley]\[FreakedSmiley]\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Brainf**k\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"brainf**k\""}],
             "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"brainf**k\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"BF\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"bf\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"bf\\\"]\"",
          "\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"SMBF\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"smbf\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"smbf\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Self-modifying Brainf***\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"self-modifyingbrainf***\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"self-modifyingbrainf***\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Self-modifying Brainf*ck\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"self-modifyingbrainf*ck\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"self-modifyingbrainf*ck\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
            RowBox[{
             "\"CodeGolfProgrammingLanguage\"", ",", 
              "\"brainfu\[FreakedSmiley]\[FreakedSmiley]\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"brainfu\
\[FreakedSmiley]\[FreakedSmiley]\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Random Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",
          RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"randombrainfu\[FreakedSmiley]\[FreakedSmiley]\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"randombrainfu\
\[FreakedSmiley]\[FreakedSmiley]\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"Windows batch\"",RowBox[{"Entity", "[", 
          
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
            "\"windowsbatch\""}], "]"}],
        "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"windowsbatch\\\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Batch File\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"batchfile\""}],
             "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"batchfile\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Windows Command\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"windowscommand\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"windowscommand\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Windows Batch File\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"windowsbatchfile\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"windowsbatchfile\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Windows Command Prompt\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"windowscommandprompt\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"windowscommandprompt\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Batch\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"batch\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"batch\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"cmd.exe\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"cmd.exe\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"cmd.exe\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Windows CMD\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"windowscmd\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"windowscmd\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Windows command shell\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"windowscommandshell\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"windowscommandshell\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"Go\"",RowBox[{"Entity", "[", 
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Go::3m7v3\""}], 
          "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Go::3m7v3\\\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       TemplateBox[{"\"Golang\"",RowBox[{"Entity", "[", 
           RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"golang\""}], 
           "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"golang\\\"]\"","\"CodeGolfProgrammingLanguage\""},
        "Entity"], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"Lua\"",RowBox[{"Entity", "[", 
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Lua::9nnwp\""}], 
          "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"Lua::9nnwp\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       TemplateBox[{"\"lua for windows\"",RowBox[{"Entity", "[", 
           
           RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
             "\"luaforwindows\""}], "]"}],
         "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"luaforwindows\\\"]\"","\"CodeGolfProgrammingLanguage\""},
        "Entity"], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
        "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
        "\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"x86 Machine\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"x86machine\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86machine\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"x86 assembly language\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"X86AssemblyLanguage::8wgc4\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"X86AssemblyLanguage::8wgc4\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"x86_\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86_\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86_\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"x86 Assembler\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"x86assembler\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86assembler\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"x86 opcode\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86opcode\""}],
             "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86opcode\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"x86 32-bit machine\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"x8632-bitmachine\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x8632-bitmachine\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"x86 machine code on DOS\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"x86machinecodeondos\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86machinecodeondos\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"x86 .COM\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86.com\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86.com\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"x86 asm\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86asm\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86asm\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"CPU x86\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"cpux86\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"cpux86\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"/32-bit x86 assembly\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"/32-bitx86assembly\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"/32-bitx86assembly\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"MachineCode on x86_\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"machinecodeonx86_\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"machinecodeonx86_\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"x86 and x\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86andx\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86andx\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"x86 opcode(.COM\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"x86opcode(.com\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86opcode(.com\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"x86 16 bit real mode Assembly\"",RowBox[{"Entity", "[", 
            RowBox[{
             "\"CodeGolfProgrammingLanguage\"", ",", 
              "\"x8616bitrealmodeassembly\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x8616bitrealmodeassembly\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"x86 TASM\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86tasm\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86tasm\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"x86 machine code on MS\[ScriptCapitalJ]DOS\"",
          RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"x86machinecodeonms\[ScriptJ]dos\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86machinecodeonms\[ScriptJ]dos\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"little\[ScriptCapitalJ]endian x86 machine\"",
          RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"little\[ScriptJ]endianx86machine\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"little\[ScriptJ]endianx86machine\\\"]\"",
          "\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"x86 MS\[ScriptCapitalJ]DOS .COM file\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"x86ms\[ScriptJ]dos.comfile\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86ms\[ScriptJ]dos.comfile\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"x86 machine\[ScriptCapitalJ]code\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"x86machine\[ScriptJ]code\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86machine\
\[ScriptJ]code\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"Shakespeare\"",RowBox[{"Entity", "[", 
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"shakespeare\""}],
           "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"shakespeare\\\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       TemplateBox[{"\"Shakespeare Programming\"",RowBox[{"Entity", "[", 
           
           RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
             "\"shakespeareprogramming\""}], "]"}],
         "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"shakespeareprogramming\\\"]\"","\"CodeGolfProgrammingLanguage\""},
        "Entity"], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"MATLAB/Octave\"",RowBox[{"Entity", "[", 
          
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
            "\"matlab/octave\""}], "]"}],
        "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"matlab/octave\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Octave\"",RowBox[{"Entity", "[", 
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"octave\""}], 
            "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"octave\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Matlab \[ScriptCapitalJ] Octave\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"matlab\[ScriptJ]octave\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"matlab\[ScriptJ]octave\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"MATLAB/Octave\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"matlab/octave\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"matlab/octave\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Octave \[ScriptCapitalJ] MATLAB\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"octave\[ScriptJ]matlab\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"octave\[ScriptJ]matlab\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{
         "\"Octave\[ScriptCapitalJ] score\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"octave\[ScriptJ]score\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"octave\[ScriptJ]score\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"MATLAB\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"MATLAB::82q2f\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"MATLAB::82q2f\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      TemplateBox[{"\"Lisp\"",RowBox[{"Entity", "[", 
          RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Lisp::tnvy6\""}],
           "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Lisp::tnvy6\\\"]\"","\"CodeGolfProgrammingLanguage\""},
       "Entity"], "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Common Lisp\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"CommonLisp::6p4h5\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"CommonLisp::6p4h5\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"], ",", 
        TemplateBox[{"\"Emacs Lisp\"",RowBox[{"Entity", "[", 
            
            RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", 
              "\"EmacsLisp::5m82g\""}], "]"}],
          "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"EmacsLisp::5m82g\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
         "Entity"]}], "}"}]}]}], "\[IndentingNewLine]", 
    "\[RightAssociation]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"languageToPreferredLanguage", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"languageToAlternatives", "//", 
        RowBox[{"KeyValueMap", "[", 
         RowBox[{
          RowBox[{"Thread", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{"#2", ",", "#1"}], "]"}], "]"}], "&"}], "]"}]}], "//", 
       "Flatten"}], "//", "DeleteDuplicates"}], "//", 
     RowBox[{"Select", "[", 
      RowBox[{"Apply", "[", "UnsameQ", "]"}], "]"}]}], "//", 
    "Association"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7804182393597803`*^9, 3.7804182556876464`*^9}, {
  3.7804183475768123`*^9, 3.7804184094777465`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"1242d08c-b7db-46d4-a5bc-571ab75b2a47"],

Cell[CellGroupData[{

Cell[BoxData["languageToPreferredLanguage"], "Input",
 CellChangeTimes->{{3.7804197624022593`*^9, 3.780419765464491*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"062921e8-e3bf-45dd-81cf-15f8498385ea"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    TemplateBox[{"\"JavaScript ES\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"javascriptes\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"javascriptes\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"JavaScript\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"JavaScript::g3427\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"JavaScript::g3427\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Node.js\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"node.js\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"node.js\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"JavaScript\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"JavaScript::g3427\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"JavaScript::g3427\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"NodeJS\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"nodejs\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"nodejs\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"JavaScript\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"JavaScript::g3427\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"JavaScript::g3427\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Node\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"node\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"node\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"JavaScript\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"JavaScript::g3427\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"JavaScript::g3427\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"JS ES\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"jses\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"jses\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"JavaScript\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"JavaScript::g3427\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"JavaScript::g3427\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Javascript / ES\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"javascript/es\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"javascript/es\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"JavaScript\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"JavaScript::g3427\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"JavaScript::g3427\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"JS\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"js\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"js\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"JavaScript\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"JavaScript::g3427\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"JavaScript::g3427\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Dyalog APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"dyalogapl\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"dyalogapl\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"APL(Dyalog\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"apl(dyalog\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"apl(dyalog\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Dyalog APL Extended\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"dyalogaplextended\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"dyalogaplextended\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"APL(NARS\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"apl(nars\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"apl(nars\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"APL\[ScriptCapitalJ]WIN\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"apl\[ScriptJ]win\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"apl\[ScriptJ]win\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"APL NARS\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"aplnars\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"aplnars\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"APL\[ScriptCapitalJ] score\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"apl\[ScriptJ]score\""}], 
        "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"apl\[ScriptJ]score\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"APL(Dyalog Classic\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"apl(dyalogclassic\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"apl(dyalogclassic\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"APL\[ScriptCapitalJ] Mauris\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"apl\[ScriptJ]mauris\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"apl\[ScriptJ]mauris\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"APL\[ScriptCapitalJ] size\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"apl\[ScriptJ]size\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"apl\[ScriptJ]size\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Windows PowerShell\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"WindowsPowerShell::886h5\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"WindowsPowerShell::886h5\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"PowerShell\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"powershell\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"powershell\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"PowerShell Core\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"powershellcore\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"powershellcore\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"PowerShell\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"powershell\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"powershell\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"PowerShell\[ScriptCapitalJ] score\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"powershell\[ScriptJ]score\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"powershell\[ScriptJ]score\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"PowerShell\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"powershell\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"powershell\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"Powershell\[ScriptCapitalJ] \[LessEqual]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"powershell\[ScriptJ]\[LessEqual]\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"powershell\[ScriptJ]\
\[LessEqual]\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"PowerShell\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"powershell\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"powershell\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"PowerShell for Windows\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"powershellforwindows\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"powershellforwindows\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"PowerShell\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"powershell\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"powershell\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Wolfram Mathematica\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"wolframmathematica\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"wolframmathematica\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Wolfram Language\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"WolframLanguage\""}], 
        "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"WolframLanguage\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"Mathematica\[ScriptCapitalJ] score\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"mathematica\[ScriptJ]score\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"mathematica\[ScriptJ]score\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Wolfram Language\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"WolframLanguage\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"WolframLanguage\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"Mathematica \[ScriptCapitalJ] Wolfram\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"mathematica\[ScriptJ]wolfram\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"mathematica\[ScriptJ]wolfram\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Wolfram Language\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"WolframLanguage\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"WolframLanguage\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Wolfram Methematica\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"wolframmethematica\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"wolframmethematica\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Wolfram Language\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"WolframLanguage\""}], 
        "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"WolframLanguage\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Wolfram \[TildeFullEqual]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"wolfram\[TildeFullEqual]\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"wolfram\
\[TildeFullEqual]\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Wolfram Language\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"WolframLanguage\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"WolframLanguage\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Mathematica Simplified\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"mathematicasimplified\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"mathematicasimplified\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Wolfram Language\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"WolframLanguage\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"WolframLanguage\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"Mathematica\[ScriptCapitalJ] @Martin Ender\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"mathematica\[ScriptJ]@martinender\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"mathematica\[ScriptJ]@martinender\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Wolfram Language\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"WolframLanguage\""}], 
        "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"WolframLanguage\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Mathematica on Windows\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"mathematicaonwindows\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"mathematicaonwindows\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Wolfram Language\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"WolframLanguage\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"WolframLanguage\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Mathematica\[ScriptCapitalJ] n=\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"mathematica\[ScriptJ]n=\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"mathematica\[ScriptJ]n=\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Wolfram Language\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"WolframLanguage\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"WolframLanguage\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"Mathematica\[ScriptCapitalJ] size\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"mathematica\[ScriptJ]size\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"mathematica\[ScriptJ]size\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Wolfram Language\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"WolframLanguage\""}], 
        "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"WolframLanguage\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Mathematica\[ScriptCapitalJ] L=\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"mathematica\[ScriptJ]l=\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"mathematica\[ScriptJ]l=\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Wolfram Language\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"WolframLanguage\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"WolframLanguage\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"CSharp\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"csharp\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"csharp\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"C#\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::5zm8v\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"C::5zm8v\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"C\[ScriptCapitalJ]Sharp\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"c\[ScriptJ]sharp\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"c\[ScriptJ]sharp\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"C#\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::5zm8v\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"C::5zm8v\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"C# .NET\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"c#.net\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"c#.net\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"C#\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::5zm8v\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"C::5zm8v\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"C# in LINQPAD\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"c#inlinqpad\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"c#inlinqpad\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"C#\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::5zm8v\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"C::5zm8v\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"C# \[ScriptCapitalJ] Linq\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"c#\[ScriptJ]linq\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"c#\[ScriptJ]linq\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"C#\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::5zm8v\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"C::5zm8v\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"C# \[ScriptCapitalJ] LINQPad\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"c#\[ScriptJ]linqpad\""}], 
        "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"c#\[ScriptJ]linqpad\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"C#\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::5zm8v\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"C::5zm8v\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"C# WPF\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"c#wpf\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"c#wpf\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"C#\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::5zm8v\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"C::5zm8v\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"C# LINQ\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"c#linq\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"c#linq\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"C#\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::5zm8v\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"C::5zm8v\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"FSharp\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"fsharp\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"fsharp\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"F#\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"F::549k5\""}], 
        "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"F::549k5\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"><> Fish\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"><>fish\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"><>fish\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"><>\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"><>\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"><>\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"ANSI C\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"ANSIC::8zh69\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"ANSIC::8zh69\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"C\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::p5vhv\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"C::p5vhv\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"C Preprocessor\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"cpreprocessor\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"cpreprocessor\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"C\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::p5vhv\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"C::p5vhv\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"PHP>=\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"php>=\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"php>=\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"PHP\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"PHP::x8873\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"PHP::x8873\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Brainf***\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"brainf***\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"brainf***\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
     "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Brainfuck::8mj43\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Brainfuck::8mj43\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Brainf*ck\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"brainf*ck\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"brainf*ck\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
     "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Brainfuck::8mj43\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Brainfuck::8mj43\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"Self-modifying Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",
      RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"self-modifyingbrainfu\[FreakedSmiley]\[FreakedSmiley]\""}], 
        "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"self-modifyingbrainfu\[FreakedSmiley]\[FreakedSmiley]\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
     "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Brainfuck::8mj43\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Brainfuck::8mj43\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"Extended BrainFu\[FreakedSmiley]\[FreakedSmiley]\"",
      RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"extendedbrainfu\[FreakedSmiley]\[FreakedSmiley]\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"extendedbrainfu\
\[FreakedSmiley]\[FreakedSmiley]\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
     "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Brainfuck::8mj43\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Brainfuck::8mj43\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Brainf**k\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"brainf**k\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"brainf**k\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
     "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Brainfuck::8mj43\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Brainfuck::8mj43\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"BF\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"bf\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"bf\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
     "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Brainfuck::8mj43\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Brainfuck::8mj43\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"SMBF\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"smbf\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"smbf\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
     "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Brainfuck::8mj43\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Brainfuck::8mj43\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Self-modifying Brainf***\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"self-modifyingbrainf***\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"self-modifyingbrainf***\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
     "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Brainfuck::8mj43\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Brainfuck::8mj43\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Self-modifying Brainf*ck\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"self-modifyingbrainf*ck\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"self-modifyingbrainf*ck\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
     "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Brainfuck::8mj43\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Brainfuck::8mj43\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"brainfu\[FreakedSmiley]\[FreakedSmiley]\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"brainfu\
\[FreakedSmiley]\[FreakedSmiley]\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
     "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Brainfuck::8mj43\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Brainfuck::8mj43\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"Random Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",
      RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"randombrainfu\[FreakedSmiley]\[FreakedSmiley]\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"randombrainfu\
\[FreakedSmiley]\[FreakedSmiley]\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{
     "\"Brainfu\[FreakedSmiley]\[FreakedSmiley]\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Brainfuck::8mj43\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Brainfuck::8mj43\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Batch File\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"batchfile\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"batchfile\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Windows batch\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"windowsbatch\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"windowsbatch\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Windows Command\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"windowscommand\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"windowscommand\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Windows batch\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"windowsbatch\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"windowsbatch\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Windows Batch File\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"windowsbatchfile\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"windowsbatchfile\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Windows batch\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"windowsbatch\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"windowsbatch\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Windows Command Prompt\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"windowscommandprompt\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"windowscommandprompt\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Windows batch\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"windowsbatch\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"windowsbatch\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Batch\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"batch\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"batch\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Windows batch\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"windowsbatch\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"windowsbatch\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"cmd.exe\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"cmd.exe\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"cmd.exe\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Windows batch\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"windowsbatch\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"windowsbatch\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Windows CMD\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"windowscmd\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"windowscmd\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Windows batch\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"windowsbatch\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"windowsbatch\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Windows command shell\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"windowscommandshell\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"windowscommandshell\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Windows batch\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"windowsbatch\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"windowsbatch\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Golang\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"golang\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"golang\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Go\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Go::3m7v3\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Go::3m7v3\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"lua for windows\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"luaforwindows\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"luaforwindows\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Lua\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Lua::9nnwp\""}], 
        "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"Lua::9nnwp\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 Machine\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86machine\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86machine\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 assembly language\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"X86AssemblyLanguage::8wgc4\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"X86AssemblyLanguage::8wgc4\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86_\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86_\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86_\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 Assembler\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86assembler\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86assembler\
\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 opcode\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86opcode\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86opcode\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 32-bit machine\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"x8632-bitmachine\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x8632-bitmachine\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 machine code on DOS\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"x86machinecodeondos\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86machinecodeondos\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 .COM\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86.com\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86.com\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 asm\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86asm\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86asm\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"CPU x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"cpux86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"cpux86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"/32-bit x86 assembly\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"/32-bitx86assembly\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"/32-bitx86assembly\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"MachineCode on x86_\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"machinecodeonx86_\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"machinecodeonx86_\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 and x\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86andx\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86andx\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 opcode(.COM\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"x86opcode(.com\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86opcode(.com\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 16 bit real mode Assembly\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"x8616bitrealmodeassembly\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x8616bitrealmodeassembly\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 TASM\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86tasm\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86tasm\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"x86 machine code on MS\[ScriptCapitalJ]DOS\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"x86machinecodeonms\[ScriptJ]dos\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86machinecodeonms\
\[ScriptJ]dos\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"little\[ScriptCapitalJ]endian x86 machine\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"little\[ScriptJ]endianx86machine\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"little\[ScriptJ]endianx86machine\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{
     "\"x86 MS\[ScriptCapitalJ]DOS .COM file\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"x86ms\[ScriptJ]dos.comfile\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86ms\[ScriptJ]dos.comfile\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"x86 machine\[ScriptCapitalJ]code\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"x86machine\[ScriptJ]code\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"x86machine\[ScriptJ]code\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"x86\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"x86\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"x86\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Shakespeare Programming\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"shakespeareprogramming\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"shakespeareprogramming\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Shakespeare\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"shakespeare\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"shakespeare\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Octave\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"octave\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"octave\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"MATLAB/Octave\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"matlab/octave\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"matlab/octave\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Matlab \[ScriptCapitalJ] Octave\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"matlab\[ScriptJ]octave\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"matlab\[ScriptJ]octave\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"MATLAB/Octave\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"matlab/octave\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"matlab/octave\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Octave \[ScriptCapitalJ] MATLAB\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"octave\[ScriptJ]matlab\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"octave\[ScriptJ]matlab\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"MATLAB/Octave\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"matlab/octave\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"matlab/octave\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Octave\[ScriptCapitalJ] score\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", 
          "\"octave\[ScriptJ]score\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"octave\[ScriptJ]score\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"MATLAB/Octave\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"matlab/octave\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"matlab/octave\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"MATLAB\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"MATLAB::82q2f\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"MATLAB::82q2f\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"MATLAB/Octave\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"matlab/octave\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"matlab/octave\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Common Lisp\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"CommonLisp::6p4h5\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"CommonLisp::6p4h5\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Lisp\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Lisp::tnvy6\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Lisp::tnvy6\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}], ",", 
   RowBox[{
    TemplateBox[{"\"Emacs Lisp\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"EmacsLisp::5m82g\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"EmacsLisp::5m82g\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", 
    TemplateBox[{"\"Lisp\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Lisp::tnvy6\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Lisp::tnvy6\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.7804197625802975`*^9, 3.7804197695993176`*^9}, 
   3.780679508693391*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"d22dab83-f2d8-4b6e-9113-6f283a345038"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Merge language entities in the Metadata", "Subsubsection",
 CellChangeTimes->{{3.780248275719717*^9, 3.780248286483534*^9}, {
  3.78024858930717*^9, 3.7802485985388308`*^9}, {3.780248872313241*^9, 
  3.7802488743306065`*^9}},ExpressionUUID->"ee00bd41-3dc4-4d36-9b02-\
e9154b7abc8e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"postToMetadata", "=", 
   RowBox[{"EntityValue", "[", 
    RowBox[{
    "\"\<StackExchange.Codegolf:Post\>\"", ",", "\"\<CodeGolfMetadata\>\"", 
     ",", "\"\<EntityAssociation\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"postToMetadata", "//", "Length"}]}], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"56418ab5-0e6b-4d24-b3d9-1c40f8cc6655"],

Cell[BoxData["154104"], "Output",
 CellChangeTimes->{3.7804184523169403`*^9, 3.780420176289714*^9, 
  3.7806795110066814`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"42fcfa48-1482-47dd-a934-b6455923bbb0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"postToFixedMetadata", "=", 
   RowBox[{
    RowBox[{"Replace", "[", 
     RowBox[{
      RowBox[{"a_Association", "/;", 
       RowBox[{"KeyMemberQ", "[", 
        RowBox[{"a", ",", "\"\<Language\>\""}], "]"}]}], "\[RuleDelayed]", 
      RowBox[{"Append", "[", 
       RowBox[{"a", ",", 
        RowBox[{"\"\<Language\>\"", "\[Rule]", 
         RowBox[{"Lookup", "[", 
          RowBox[{"languageToPreferredLanguage", ",", 
           RowBox[{"a", "[", "\"\<Language\>\"", "]"}], ",", 
           RowBox[{"a", "[", "\"\<Language\>\"", "]"}]}], "]"}]}]}], "]"}]}], 
     "]"}], "/@", "postToMetadata"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.780248326841894*^9, 3.780248473395338*^9}, {
   3.780248553503134*^9, 3.78024855621898*^9}, 3.7802488046202707`*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"7d3eecdb-cee4-4d9f-9c8f-f49626e787df"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"KeyValueMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"#1", "[", "\"\<CodeGolfMetadata\>\"", "]"}], "=."}], ";", 
        RowBox[{
         RowBox[{"#1", "[", "\"\<CodeGolfMetadata\>\"", "]"}], "=", "#2"}], 
        ";"}], ")"}], "&"}], ",", "postToFixedMetadata"}], "]"}], ";"}], "//",
   "AbsoluteTiming"}]], "Input",
 CellChangeTimes->{{3.780248667188198*^9, 3.780248690068199*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"32393edc-3924-4664-ab91-6efd063cd2de"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"52.835326`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.780248753453969*^9, 3.780248867326597*^9, 
  3.780346249099764*^9, 3.7803484970247774`*^9, 3.7804184304716234`*^9, 
  3.7804185175341177`*^9, 3.7804202355844946`*^9, 3.780679564763256*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"59282fc5-c18f-49dc-a8e5-a0fd25807a69"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"postToMetadata2", "=", 
   RowBox[{"EntityValue", "[", 
    RowBox[{
    "\"\<StackExchange.Codegolf:Post\>\"", ",", "\"\<CodeGolfMetadata\>\"", 
     ",", "\"\<EntityAssociation\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"postToMetadata2", "//", "Length"}]}], "Input",
 CellChangeTimes->{{3.7804184738758764`*^9, 3.780418475212055*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"e814a426-7d91-4e3f-b524-d12aa90aadff"],

Cell[BoxData["154104"], "Output",
 CellChangeTimes->{3.780248592888687*^9, 3.780248774057683*^9, 
  3.7802488700152826`*^9, 3.7803462514522285`*^9, 3.7803484994072876`*^9, 
  3.7804185204135375`*^9, 3.780420237775154*^9, 3.780679567113429*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"6416bbc9-4211-4249-9d00-e730731062d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{"postToMetadata2", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", "\"\<Language\>\"", "]"}], "===", 
     TemplateBox[{"\"JavaScript ES\"",RowBox[{"Entity", "[", 
         RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"javascriptes\""}],
          "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"javascriptes\\\"]\"","\"CodeGolfProgrammingLanguage\""},
      "Entity"]}], "&"}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.780248612907102*^9, 3.7802486525688357`*^9}, 
   3.7804184791588144`*^9},
 CellLabel->"In[20]:=",ExpressionUUID->"2fe32195-ff42-4fff-9c78-18c75e2305a2"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.7802486534351597`*^9, {3.7802487644372373`*^9, 3.780248774458583*^9}, 
   3.780248870624134*^9, 3.7803462517993193`*^9, 3.780348499805216*^9, 
   3.780418523801776*^9, 3.7804202380781364`*^9, 3.780679567493451*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"508f47aa-b67f-454b-9476-ed088cced77f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Merge and update language entities in the language EntityStore\
\>", "Subsubsection",
 CellChangeTimes->{{3.780248275719717*^9, 3.780248286483534*^9}, {
   3.78024858930717*^9, 3.7802485985388308`*^9}, {3.780248872313241*^9, 
   3.7802488743306065`*^9}, {3.7802489224414697`*^9, 3.780248929103176*^9}, {
   3.7803462122602243`*^9, 3.780346213436079*^9}, 
   3.7803468636683826`*^9},ExpressionUUID->"1e953cd3-c414-458f-be57-\
7ff03aeb8604"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"languageToURLCounts", "=", 
   RowBox[{
    RowBox[{"GroupBy", "[", 
     RowBox[{
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"Lookup", "[", 
         RowBox[{
          RowBox[{"Values", "[", "postToMetadata2", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Language\>\"", ",", "\"\<TitleURLs\>\""}], "}"}]}], 
         "]"}], ",", 
        RowBox[{"FreeQ", "[", "_Missing", "]"}]}], "]"}], ",", 
      RowBox[{"First", "\[Rule]", "Last"}], ",", 
      RowBox[{"Flatten", "/*", "Counts", "/*", "ReverseSort"}]}], "]"}], "//", 
    RowBox[{"ReverseSortBy", "[", "Total", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"languageToURLCounts", "//", "Length"}]}], "Input",
 CellChangeTimes->{{3.7803468355123515`*^9, 3.780346984091083*^9}, {
   3.780347025151227*^9, 3.780347049837903*^9}, {3.7803471296621485`*^9, 
   3.7803471332975025`*^9}, 3.7804185413515005`*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"b5eda370-7159-4704-8dcb-44ff8403aaa8"],

Cell[BoxData["2472"], "Output",
 CellChangeTimes->{{3.7803468409508085`*^9, 3.7803468589264526`*^9}, {
   3.780346912804286*^9, 3.7803469344896135`*^9}, {3.7803469683298883`*^9, 
   3.780346985766716*^9}, 3.780347051415803*^9, 3.780347134132677*^9, 
   3.780348500350371*^9, 3.780418545465787*^9, 3.780420251464353*^9, 
   3.780679567973223*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"333ba753-f811-4ac6-9f9e-f320c7fdf13e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "/@", 
  RowBox[{"languageToURLCounts", "[", 
   RowBox[{"[", 
    RowBox[{";;", "12"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7803469761723166`*^9, 3.7803469909718604`*^9}, {
  3.7803471359865637`*^9, 3.780347139640381*^9}, {3.780347378580229*^9, 
  3.7803473792264996`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"d9230d35-20e8-4692-b31c-d0859d2ff22c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    TemplateBox[{"\"Python\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Python::4g426\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Python::4g426\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "5115"}], ",", 
   RowBox[{
    TemplateBox[{"\"Jelly\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"jelly\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"jelly\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "5026"}], ",", 
   RowBox[{
    TemplateBox[{"\"05AB1E\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"05ab1e\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"05ab1e\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "3463"}], ",", 
   RowBox[{
    TemplateBox[{"\"Perl\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Perl::2vj49\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Perl::2vj49\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "2601"}], ",", 
   RowBox[{
    TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "1885"}], ",", 
   RowBox[{
    TemplateBox[{"\"MATL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"matl\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"matl\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "1544"}], ",", 
   RowBox[{
    TemplateBox[{"\"Haskell\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Haskell::rb945\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Haskell::rb945\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "1476"}], ",", 
   RowBox[{
    TemplateBox[{"\"Japt\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"japt\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"japt\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "1426"}], ",", 
   RowBox[{
    TemplateBox[{"\"Retina\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"retina\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"retina\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "1417"}], ",", 
   RowBox[{
    TemplateBox[{"\"R\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"R::2syzp\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"R::2syzp\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "1182"}], ",", 
   RowBox[{
    TemplateBox[{"\"C\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::p5vhv\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"C::p5vhv\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "1121"}], ",", 
   RowBox[{
    TemplateBox[{"\"Ruby\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Ruby::f23v5\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Ruby::f23v5\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "1093"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.780346991313942*^9, 3.7803470529545393`*^9, {3.780347136692317*^9, 
   3.780347140073408*^9}, 3.7803473797423043`*^9, 3.780348500705079*^9, 
   3.7804185479054003`*^9, 3.7804202529921055`*^9, 3.7806795682634726`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"2a93e2cc-94eb-4c93-8ccf-3a5aba0afcdb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Keys", "/*", "First"}], "/@", 
  RowBox[{"languageToURLCounts", "[", 
   RowBox[{"[", 
    RowBox[{";;", "12"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.78034738891636*^9, 3.7803473978852863`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"988a3e5b-f228-4f08-bee9-cca40ff8a80d"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    TemplateBox[{"\"Python\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Python::4g426\""}],
         "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Python::4g426\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "\<\"https://docs.python.org/2/\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Jelly\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"jelly\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"jelly\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], 
    "\[Rule]", "\<\"https://github.com/DennisMitchell/jelly\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"05AB1E\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"05ab1e\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"05ab1e\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "\<\"https://github.com/Adriandmen/05AB1E\"\>"}], 
   ",", 
   RowBox[{
    TemplateBox[{"\"Perl\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Perl::2vj49\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Perl::2vj49\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "\<\"https://www.perl.org/\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"APL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"APL::nh588\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"APL::nh588\\\
\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "\<\"https://www.dyalog.com/\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"MATL\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"matl\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"matl\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "\<\"https://github.com/lmendo/MATL\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Haskell\"",RowBox[{"Entity", "[", 
        RowBox[{
         "\"CodeGolfProgrammingLanguage\"", ",", "\"Haskell::rb945\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Haskell::rb945\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "\<\"https://www.haskell.org/\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Japt\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"japt\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"japt\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "\<\"https://github.com/ETHproductions/japt\"\>"}],
    ",", 
   RowBox[{
    TemplateBox[{"\"Retina\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"retina\""}], "]"}],
      "\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"retina\\\"]\"",
      "\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "\<\"https://github.com/m-ender/retina\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"R\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"R::2syzp\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"R::2syzp\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "\<\"https://www.r-project.org/\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"C\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"C::p5vhv\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"C::p5vhv\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "\<\"https://gcc.gnu.org/\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Ruby\"",RowBox[{"Entity", "[", 
        RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Ruby::f23v5\""}], 
        "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Ruby::f23v5\\\"]\"","\"CodeGolfProgrammingLanguage\""},
     "Entity"], "\[Rule]", "\<\"https://www.ruby-lang.org/\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7803473990920825`*^9, 3.780348500962494*^9, 
  3.780418562429166*^9, 3.78042025483615*^9, 3.7806795684834332`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"a29fbb90-106e-48e8-9fa1-78057626bd8e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EntityValue", "[", 
  RowBox[{"\"\<CodeGolfProgrammingLanguage\>\"", ",", "\"\<EntityCount\>\""}],
   "]"}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"476c7fdf-df59-443a-b3df-8192cfbcc501"],

Cell[BoxData["9637"], "Output",
 CellChangeTimes->{3.7804202590104604`*^9, 3.7806795686934743`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"2f933903-a03e-43be-842b-e1dafbaea147"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "mergeCodeGolfLanguages", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mergeCodeGolfLanguages", "[", 
    RowBox[{"original_Entity", ",", "survivor_Entity"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MissingQ", "[", 
         RowBox[{"EntityValue", "@", 
          RowBox[{"Entity", "[", 
           RowBox[{"\"\<ProgrammingLanguage\>\"", ",", 
            RowBox[{"CanonicalName", "[", "survivor", "]"}]}], "]"}]}], "]"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"survivor", "[", "\"\<Labels\>\"", "]"}], "=", 
          RowBox[{"Join", "@@", 
           RowBox[{"EntityValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"original", ",", "survivor"}], "}"}], ",", 
             "\"\<Labels\>\""}], "]"}]}]}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"survivor", "[", "\"\<URLCounts\>\"", "]"}], "=", 
       RowBox[{"ReverseSortBy", "[", 
        RowBox[{
         RowBox[{"Merge", "[", 
          RowBox[{
           RowBox[{"Lookup", "[", 
            RowBox[{"languageToURLCounts", ",", 
             RowBox[{"{", 
              RowBox[{"original", ",", "survivor"}], "}"}], ",", 
             RowBox[{"<|", "|>"}]}], "]"}], ",", "Total"}], "]"}], ",", 
         "Total"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"original", "=."}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"KeyValueMap", "[", 
    RowBox[{"mergeCodeGolfLanguages", ",", "languageToPreferredLanguage"}], 
    "]"}], ";"}], "//", "AbsoluteTiming"}]}], "Input",
 CellChangeTimes->{{3.7803466330822544`*^9, 3.780346774822504*^9}, {
  3.7803471676878686`*^9, 3.7803471814443665`*^9}, {3.7803472184538083`*^9, 
  3.780347253232072*^9}, {3.780347314820403*^9, 3.780347340650259*^9}, {
  3.780347415231696*^9, 3.780347420682704*^9}, {3.7803484627255287`*^9, 
  3.780348489975871*^9}, {3.7804199047531266`*^9, 3.780419938353059*^9}, {
  3.7804200542776794`*^9, 3.7804201094572477`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"a9e79d04-4e30-44d3-a5a1-1bcae0a0b137"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.2080015`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.780346635122985*^9, 3.7803466447443*^9}, {
   3.780346734164546*^9, 3.7803467441958427`*^9}, 3.7803467810941377`*^9, 
   3.780347253714777*^9, 3.7803473411689825`*^9, 3.780348507318014*^9, 
   3.780418576421406*^9, 3.7804202761019325`*^9, 3.780679569063531*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"d56deaea-e890-4627-954b-b0b6544572ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EntityValue", "[", 
  RowBox[{"\"\<CodeGolfProgrammingLanguage\>\"", ",", "\"\<EntityCount\>\""}],
   "]"}]], "Input",
 CellChangeTimes->{{3.7803473535894074`*^9, 3.7803473548695107`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"ad724144-6041-4161-b4e4-52b371a94a0d"],

Cell[BoxData["9542"], "Output",
 CellChangeTimes->{3.780347355309443*^9, 3.780348510577631*^9, 
  3.780418586694951*^9, 3.7804202778084803`*^9, 3.7806795692836804`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"a7c2d198-4f2b-44d4-8bb3-892eb98979d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Entity", "[", 
  RowBox[{
  "\"\<CodeGolfProgrammingLanguage\>\"", ",", " ", 
   "\"\<JavaScript::g3427\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7804202972585273`*^9, 3.7804203118748646`*^9}},
 FormatType->"InputForm",
 CellLabel->"In[30]:=",ExpressionUUID->"71a99009-ea1a-4075-a433-20166f302d6b"],

Cell[BoxData[
 TemplateBox[{"\"JavaScript\"",RowBox[{"Entity", "[", 
     RowBox[{
      "\"CodeGolfProgrammingLanguage\"", ",", "\"JavaScript::g3427\""}], 
     "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"JavaScript::g3427\\\"]\"","\"CodeGolfProgrammingLanguage\""},
  "Entity"]], "Output",
 CellChangeTimes->{3.7804203131045876`*^9, 3.7806795694533777`*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"629837c0-0df0-4c90-9a73-b8534a95a90a"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Add Additional Properties", "Subsection",ExpressionUUID->"0dc24130-a1e6-4210-a6a6-d88659c8d6df"],

Cell[CellGroupData[{

Cell["Submission Programming Language", "Subsubsection",
 CellChangeTimes->{{3.7802492829060183`*^9, 
  3.780249287205313*^9}},ExpressionUUID->"a23ad657-2800-4c84-b6d5-\
ec4a74779e43"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EntityProperty", "[", 
     RowBox[{
     "\"\<StackExchange.Codegolf:Post\>\"", ",", 
      "\"\<SubmissionProgrammingLanguage\>\""}], "]"}], "[", "\"\<Label\>\"", 
    "]"}], "=", "\"\<submission programming language\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EntityProperty", "[", 
     RowBox[{
     "\"\<StackExchange.Codegolf:Post\>\"", ",", 
      "\"\<SubmissionProgrammingLanguage\>\""}], "]"}], "[", 
    "\"\<DefaultFunction\>\"", "]"}], "=", 
   RowBox[{"EntityFramework`BatchApplied", "[", "\[IndentingNewLine]", 
    RowBox[{"Function", "[", 
     RowBox[{"entities", ",", 
      RowBox[{"Lookup", "[", 
       RowBox[{
        RowBox[{"EntityValue", "[", 
         RowBox[{"entities", ",", "\"\<CodeGolfMetadata\>\""}], "]"}], ",", 
        "\"\<Language\>\"", ",", 
        RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], "]"}]}], 
     "]"}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  TemplateBox[{TemplateBox[{
      TemplateBox[{1}, "Spacer1"], 
      "\"A: [gnibbler] Golfscript - 26 chars\\n~:x,{:b;x,{b?x=b*}%+}*$-1>\
\[Ellipsis]\"", 
      TemplateBox[{
        TagBox[
         TooltipBox[
          StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
          "\"Open\"", LabelStyle -> "TextStyling"], 
         Annotation[#, "Open", "Tooltip"]& ], 
        "https://codegolf.stackexchange.com/q/581"}, "HyperlinkURL"]}, 
     "RowWithSeparator"],RowBox[{"Entity", "[", 
      RowBox[{"\"StackExchange.Codegolf:Post\"", ",", "\"581\""}], "]"}],
    "\"Entity[\\\"StackExchange.Codegolf:Post\\\", \\\"581\\\"]\"",
    "\"codegolf:Post\""},
   "Entity"], "[", "\"\<SubmissionProgrammingLanguage\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.7802489868351245`*^9, 3.780249224791775*^9}, 
   3.7802492556822577`*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"51e3e244-441c-4640-9140-4123a279b194"],

Cell[BoxData[
 TemplateBox[{"\"GolfScript\"",RowBox[{"Entity", "[", 
     RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"golfscript\""}], 
     "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \\\"golfscript\\\"]\
\"","\"CodeGolfProgrammingLanguage\""},
  "Entity"]], "Output",
 CellChangeTimes->{3.780249225622736*^9, 3.7802492563910317`*^9, 
  3.7803462709754095`*^9, 3.780348522761753*^9, 3.7804186213627605`*^9, 
  3.7804203273811455`*^9, 3.780679577903427*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"45e86c92-b6c5-46c6-8726-946ea1c79e38"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Submission Reported Size", "Subsubsection",
 CellChangeTimes->{{3.7802492829060183`*^9, 3.780249287205313*^9}, {
  3.780312582732461*^9, 
  3.7803125901166897`*^9}},ExpressionUUID->"81640c8c-e6e7-426d-907e-\
237044e45111"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EntityProperty", "[", 
     RowBox[{
     "\"\<StackExchange.Codegolf:Post\>\"", ",", 
      "\"\<SubmissionReportedSize\>\""}], "]"}], "[", "\"\<Label\>\"", "]"}], 
   "=", "\"\<submission reported size\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EntityProperty", "[", 
     RowBox[{
     "\"\<StackExchange.Codegolf:Post\>\"", ",", 
      "\"\<SubmissionReportedSize\>\""}], "]"}], "[", 
    "\"\<DefaultFunction\>\"", "]"}], "=", 
   RowBox[{"EntityFramework`BatchApplied", "[", "\[IndentingNewLine]", 
    RowBox[{"Function", "[", 
     RowBox[{"entities", ",", 
      RowBox[{"Lookup", "[", 
       RowBox[{
        RowBox[{"EntityValue", "[", 
         RowBox[{"entities", ",", "\"\<CodeGolfMetadata\>\""}], "]"}], ",", 
        "\"\<ReportedSize\>\"", ",", 
        RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], "]"}]}], 
     "]"}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  TemplateBox[{TemplateBox[{
      TemplateBox[{1}, "Spacer1"], 
      "\"A: [gnibbler] Golfscript - 26 chars\\n~:x,{:b;x,{b?x=b*}%+}*$-1>\
\[Ellipsis]\"", 
      TemplateBox[{
        TagBox[
         TooltipBox[
          StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
          "\"Open\"", LabelStyle -> "TextStyling"], 
         Annotation[#, "Open", "Tooltip"]& ], 
        "https://codegolf.stackexchange.com/q/581"}, "HyperlinkURL"]}, 
     "RowWithSeparator"],RowBox[{"Entity", "[", 
      RowBox[{"\"StackExchange.Codegolf:Post\"", ",", "\"581\""}], "]"}],
    "\"Entity[\\\"StackExchange.Codegolf:Post\\\", \\\"581\\\"]\"",
    "\"codegolf:Post\""},
   "Entity"], "[", "\"\<SubmissionReportedSize\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.7802489868351245`*^9, 3.780249224791775*^9}, 
   3.7802492556822577`*^9, {3.780312594175373*^9, 3.7803126044847355`*^9}, {
   3.780312635389355*^9, 3.7803126374609776`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"6c3ef785-dc34-4adb-9fa5-7c19955afcdb"],

Cell[BoxData[
 TemplateBox[{"26",RowBox[{
     FrameBox[
      StyleBox[
      "\"characters\"", ShowStringCharacters -> False, StripOnInput -> False],
       FrameMargins -> 1, FrameStyle -> GrayLevel[0.85], BaselinePosition -> 
      Baseline, RoundingRadius -> 3, StripOnInput -> False]}],"characters",
   RowBox[{"IndependentUnit", "[", "\"characters\"", "]"}]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.780249225622736*^9, 3.7802492563910317`*^9, 
  3.7803126048907976`*^9, 3.7803126437866497`*^9, 3.7803462860365915`*^9, 
  3.780348530142125*^9, 3.7804186343775167`*^9, 3.7804203301682196`*^9, 
  3.7806795798232603`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"0d8f4de1-4a0e-430f-9423-9c4c40da750a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Submission Code Snippets", "Subsubsection",
 CellChangeTimes->{{3.7802492829060183`*^9, 
  3.780249300725176*^9}},ExpressionUUID->"5dd6a9fd-95b0-4a94-a880-\
2942e54672f0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EntityProperty", "[", 
     RowBox[{
     "\"\<StackExchange.Codegolf:Post\>\"", ",", 
      "\"\<SubmissionCodeSnippets\>\""}], "]"}], "[", "\"\<Label\>\"", "]"}], 
   "=", "\"\<submission code snippets\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EntityProperty", "[", 
     RowBox[{
     "\"\<StackExchange.Codegolf:Post\>\"", ",", 
      "\"\<SubmissionCodeSnippets\>\""}], "]"}], "[", 
    "\"\<DefaultFunction\>\"", "]"}], "=", 
   RowBox[{"EntityFramework`BatchApplied", "[", "\[IndentingNewLine]", 
    RowBox[{"Function", "[", 
     RowBox[{"entities", ",", 
      RowBox[{"Lookup", "[", 
       RowBox[{
        RowBox[{"EntityValue", "[", 
         RowBox[{"entities", ",", "\"\<CodeGolfMetadata\>\""}], "]"}], ",", 
        "\"\<CodeSnippets\>\"", ",", 
        RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], "]"}]}], 
     "]"}], "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  TemplateBox[{TemplateBox[{
      TemplateBox[{1}, "Spacer1"], 
      "\"A: [gnibbler] Golfscript - 26 chars\\n~:x,{:b;x,{b?x=b*}%+}*$-1>\
\[Ellipsis]\"", 
      TemplateBox[{
        TagBox[
         TooltipBox[
          StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
          "\"Open\"", LabelStyle -> "TextStyling"], 
         Annotation[#, "Open", "Tooltip"]& ], 
        "https://codegolf.stackexchange.com/q/581"}, "HyperlinkURL"]}, 
     "RowWithSeparator"],RowBox[{"Entity", "[", 
      RowBox[{"\"StackExchange.Codegolf:Post\"", ",", "\"581\""}], "]"}],
    "\"Entity[\\\"StackExchange.Codegolf:Post\\\", \\\"581\\\"]\"",
    "\"codegolf:Post\""},
   "Entity"], "[", "\"\<SubmissionCodeSnippets\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.7802489868351245`*^9, 3.780249224791775*^9}, 
   3.7802492556822577`*^9, {3.7802493116048374`*^9, 3.7802493305750895`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"9117ec35-14e5-40ba-9419-c30ad640be7b"],

Cell[BoxData[
 RowBox[{"{", "\<\"~:x,{:b;x,{b?x=b*}%+}*$-1>\\n\"\>", "}"}]], "Output",
 CellChangeTimes->{3.780249331174962*^9, 3.780346288193142*^9, 
  3.7803485321450663`*^9, 3.780418644142023*^9, 3.7804203315314617`*^9, 
  3.780679581253644*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"abe69461-032f-46ea-96ea-d6abbf342c7b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Historical Code Golf Metadata", "Subsubsection",
 CellChangeTimes->{{3.780420338125559*^9, 3.7804203405151396`*^9}, {
  3.7804209131382065`*^9, 
  3.7804209171624384`*^9}},ExpressionUUID->"09945c8b-7b90-4410-b469-\
22815507baff"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"EntityProperty", "[", 
    RowBox[{
    "\"\<StackExchange.Codegolf:Post\>\"", ",", 
     "\"\<HistoricalCodeGolfMetadata\>\""}], "]"}], "=."}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EntityProperty", "[", 
     RowBox[{
     "\"\<StackExchange.Codegolf:Post\>\"", ",", 
      "\"\<HistoricalCodeGolfMetadata\>\""}], "]"}], "[", "\"\<Label\>\"", 
    "]"}], "=", "\"\<historical code golf metadata\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EntityProperty", "[", 
     RowBox[{
     "\"\<StackExchange.Codegolf:Post\>\"", ",", 
      "\"\<HistoricalCodeGolfMetadata\>\""}], "]"}], "[", 
    "\"\<DefaultFunction\>\"", "]"}], "=", 
   RowBox[{"EntityFramework`BatchApplied", "[", 
    RowBox[{"GetHistoricalCodeGolfMetadata", ",", 
     RowBox[{"BatchSize", "\[Rule]", "1000"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"EntityValue", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         "\"A: [DavidC] Mathematica 105\\nl=Length;Cases[Range@9867312,n\
\[SpaceIndicator] /;(\[Ellipsis]\"", 
         TemplateBox[{
           TagBox[
            TooltipBox[
             StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
             "\"Open\"", LabelStyle -> "TextStyling"], 
            Annotation[#, "Open", "Tooltip"]& ], 
           "https://codegolf.stackexchange.com/q/59017"}, "HyperlinkURL"]}, 
        "RowWithSeparator"],RowBox[{"Entity", "[", 
         RowBox[{"\"StackExchange.Codegolf:Post\"", ",", "\"59017\""}], "]"}],
       "\"Entity[\\\"StackExchange.Codegolf:Post\\\", \\\"59017\\\"]\"",
       "\"codegolf:Post\""},
      "Entity"], ",", 
     TemplateBox[{TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         "\"A: [Arnaud Le Blanc] PHP - 54 48 characters\\n\\nTest:\\n$ php \
196.php\"", 
         TemplateBox[{
           TagBox[
            TooltipBox[
             StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
             "\"Open\"", LabelStyle -> "TextStyling"], 
            Annotation[#, "Open", "Tooltip"]& ], 
           "https://codegolf.stackexchange.com/q/603"}, "HyperlinkURL"]}, 
        "RowWithSeparator"],RowBox[{"Entity", "[", 
         RowBox[{"\"StackExchange.Codegolf:Post\"", ",", "\"603\""}], "]"}],
       "\"Entity[\\\"StackExchange.Codegolf:Post\\\", \\\"603\\\"]\"",
       "\"codegolf:Post\""},
      "Entity"], ",", 
     TemplateBox[{TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         "\"A: [KeithS] C# - 103 99 chars\\npublic int P(int i)\\n{\\n    var \
r\[Ellipsis]\"", 
         TemplateBox[{
           TagBox[
            TooltipBox[
             StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
             "\"Open\"", LabelStyle -> "TextStyling"], 
            Annotation[#, "Open", "Tooltip"]& ], 
           "https://codegolf.stackexchange.com/q/5085"}, "HyperlinkURL"]}, 
        "RowWithSeparator"],RowBox[{"Entity", "[", 
         RowBox[{"\"StackExchange.Codegolf:Post\"", ",", "\"5085\""}], "]"}],
       "\"Entity[\\\"StackExchange.Codegolf:Post\\\", \\\"5085\\\"]\"",
       "\"codegolf:Post\""},
      "Entity"], ",", 
     TemplateBox[{TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         "\"A: [gnibbler] Golfscript - 26 chars\\n~:x,{:b;x,{b?x=b*}%+}*$-1>\
\[Ellipsis]\"", 
         TemplateBox[{
           TagBox[
            TooltipBox[
             StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
             "\"Open\"", LabelStyle -> "TextStyling"], 
            Annotation[#, "Open", "Tooltip"]& ], 
           "https://codegolf.stackexchange.com/q/581"}, "HyperlinkURL"]}, 
        "RowWithSeparator"],RowBox[{"Entity", "[", 
         RowBox[{"\"StackExchange.Codegolf:Post\"", ",", "\"581\""}], "]"}],
       "\"Entity[\\\"StackExchange.Codegolf:Post\\\", \\\"581\\\"]\"",
       "\"codegolf:Post\""},
      "Entity"]}], "}"}], ",", "\"\<HistoricalCodeGolfMetadata\>\""}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.7804206745569277`*^9, 3.7804206751196785`*^9}, 
   3.7804208497656913`*^9, {3.7804209223670363`*^9, 3.780420952853995*^9}, {
   3.7806608870717382`*^9, 3.780660916441496*^9}, {3.7806639444309297`*^9, 
   3.780663953841527*^9}, 3.780664022232313*^9, {3.7806640900635314`*^9, 
   3.780664090313534*^9}, {3.780665988911377*^9, 3.7806659937254066`*^9}, {
   3.7806660454356594`*^9, 3.780666045555801*^9}, {3.780666185859067*^9, 
   3.7806662013681087`*^9}, {3.7806662691734715`*^9, 3.780666273706836*^9}, 
   3.780666410721734*^9, {3.7806674196425486`*^9, 3.7806674210023813`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"58d9f0a0-d879-41ed-bbb8-1cffd53178b7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["EventSeries",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{}, 
                
                GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                 0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                 2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {2.,
                  0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                 1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                 1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                 2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
               1, Axes -> {False, False}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
               Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, GridLinesStyle -> Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, 
               Method -> {
                "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                 Scaled[0.1]}, 
               PlotRange -> {{1., 5.}, {0.8225923764690866, 
                2.2418867917949643`}}, PlotRangeClipping -> True, 
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
               Ticks -> {Automatic, Automatic}], 
              GridBox[{{
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"11:08:45.000\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"11:22:38.000\"", "SummaryItem"]}]}, 
                   "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["3", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{}, 
                
                GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                 0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                 2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {2.,
                  0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                 1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                 1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                 2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
               1, Axes -> {False, False}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
               Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, GridLinesStyle -> Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, 
               Method -> {
                "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                 Scaled[0.1]}, 
               PlotRange -> {{1., 5.}, {0.8225923764690866, 
                2.2418867917949643`}}, PlotRangeClipping -> True, 
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
               Ticks -> {Automatic, Automatic}], 
              GridBox[{{
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"11:08:45.000\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"11:22:38.000\"", "SummaryItem"]}]}, 
                   "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["3", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["False", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Output dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Minimum increment: \"", "SummaryItemAnnotation"],
                    "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["353", "86400"], ",", "\"Day\""}], "}"}], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    TemporalData[EventSeries, {{{
        Association[
        "Title" -> {"Mathematica 105"}, "Code" -> {}, "Format" -> "Markdown", 
         "Date" -> DateObject[{2015, 9, 29, 15, 8, 45}, "Instant", 
           "Gregorian", "UTC"], "Text" -> 
         "#Mathematica 105\n\n\n\n    l = Length; Cases[Range@9867312,n_ \
/;(FreeQ[i=IntegerDigits@n, 0]&&l@i== l@Union@i&&And \
@@(Divisible[n,#]&/@i))]", "TitleString" -> "Mathematica 105", 
         "SimplifiedTitleString" -> 
         "Mathematica \[ScriptCapitalD]\[ScriptCapitalD]\[ScriptCapitalD]", 
         "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
         Missing["NotAvailable"], "TitleCodeSnippets" -> 
         Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
         "ReportedSize" -> Quantity[105, "Bytes"], "Language" -> 
         Entity["CodeGolfProgrammingLanguage", "WolframLanguage"], 
         "CodeSnippets" -> {}], 
        Association[
        "Title" -> {"Mathematica 105"}, 
         "Code" -> {
          "\nl = Length; Cases[Range@9867312,n_ /;(FreeQ[i=IntegerDigits@n, \
0]&&l@i== l@Union@i&&And @@(Divisible[n,#]&/@i))]", "\nLength[%]"}, "Format" -> 
         "Markdown", "Date" -> 
         DateObject[{2015, 9, 29, 15, 16, 45}, "Instant", "Gregorian", "UTC"],
          "Text" -> 
         "#Mathematica 105\n\n\n\n    l = Length; Cases[Range@9867312,n_ \
/;(FreeQ[i=IntegerDigits@n, 0]&&l@i== l@Union@i&&And @@(Divisible[n,#]&/@i))]\
\n\n\n\n\n\n>{1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 24, 36, 48, 124, 126, 128, \
132, 135, 162, 168, 175, 184, 216, 248, 264, 312, 315, 324, 384, 396, 412, \
432, 612, 624, 648, 672, 728, 735, 784, 816, 824, 864, 936, 1236, 1248, 1296, \
1326, 1362, 1368, 1395, 1632, 1692, 1764, 1824, 1926, 1935, 1962, 2136, 2184, \
2196, 2316, 2364, 2436, 2916, 3126, 3162, 3168, 3195, 3216, 3264, 3276, 3492, \
3612, 3624, 3648, 3816, 3864, 3915, 3924, 4128, 4172, 4236, 4368, 4392, 4632, \
4872, 4896, 4932, 4968, 6132, 6192, 6312, 6324, 6384, 6432, 6912, 6984, 8136, \
8496, 8736, 9126, 9135, 9162, 9216, 9315, 9324, 9432, 9612, 9648, 9864, \
12384, 12648, 12768, 12864, 13248, 13824, 13896, 13968, 14328, 14728, 14832, \
16248, 16824, 17248, 18264, 18432, 18624, 18936, 19368, 21384, 21648, 21784, \
21864, 23184, 24168, 24816, 26184, 27384, 28416, 29736, 31248, 31824, 31896, \
31968, 32184, 34128, 36792, 37128, 37296, 37926, 38472, 39168, 39816, 41328, \
41832, 42168, 42816, 43128, 43176, 46128, 46872, 48216, 48312, 61248, 61824, \
62184, 64128, 68712, 72184, 73164, 73248, 73416, 73962, 78624, 79128, 79632, \
81264, 81432, 81624, 81936, 82416, 84216, 84312, 84672, 87192, 89136, 89712, \
91368, 91476, 91728, 92736, 93168, 93816, 98136, 123648, 123864, 123984, \
124368, 126384, 129384, 132648, 132864, 132984, 134928, 136248, 136824, \
138264, 138624, 139248, 139824, 142368, 143928, 146328, 146832, 148392, \
148632, 149328, 149832, 162384, 163248, 163824, 164328, 164832, 167328, \
167832, 168432, 172368, 183264, 183624, 184392, 184632, 186432, 189432, \
192384, 193248, 193824, 194328, 194832, 198432, 213648, 213864, 213984, \
214368, 216384, 218736, 219384, 231648, 231864, 231984, 234168, 234816, \
236184, 238416, 239184, 241368, 243168, 243768, 243816, 247968, 248136, \
248976, 261384, 263184, 273168, 281736, 283416, 284136, 291384, 293184, \
297864, 312648, 312864, 312984, 314928, 316248, 316824, 318264, 318624, \
319248, 319824, 321648, 321864, 321984, 324168, 324816, 326184, 328416, \
329184, 341928, 342168, 342816, 346128, 348192, 348216, 348912, 349128, \
361248, 361824, 361872, 362184, 364128, 364728, 367248, 376824, 381264, \
381624, 382416, 384192, 384216, 384912, 391248, 391824, 392184, 394128, \
412368, 413928, 416328, 416832, 418392, 418632, 419328, 419832, 421368, \
423168, 423816, 427896, 428136, 428736, 431928, 432168, 432768, 432816, \
436128, 438192, 438216, 438912, 439128, 461328, 461832, 463128, 468312, \
469728, 478296, 478632, 481392, 481632, 482136, 483192, 483216, 483672, \
483912, 486312, 489312, 491328, 491832, 493128, 498312, 612384, 613248, \
613824, 613872, 614328, 614832, 618432, 621384, 623184, 623784, 627984, \
631248, 631824, 632184, 634128, 634872, 641328, 641832, 643128, 648312, \
671328, 671832, 681432, 684312, 689472, 732648, 732816, 742896, 746928, \
762384, 768432, 783216, 789264, 796824, 813264, 813624, 814392, 814632, \
816432, 819432, 823416, 824136, 824376, 831264, 831624, 832416, 834192, \
834216, 834912, 836472, 841392, 841632, 842136, 843192, 843216, 843912, \
846312, 849312, 861432, 864312, 873264, 891432, 894312, 897624, 912384, \
913248, 913824, 914328, 914832, 918432, 921384, 923184, 927864, 931248, \
931824, 932184, 934128, 941328, 941832, 943128, 948312, 976248, 978264, \
981432, 984312, 1289736, 1293768, 1369872, 1372896, 1376928, 1382976, \
1679328, 1679832, 1687392, 1738296, 1823976, 1863792, 1876392, 1923768, \
1936872, 1982736, 2137968, 2138976, 2189376, 2317896, 2789136, 2793168, \
2819376, 2831976, 2931768, 2937816, 2978136, 2983176, 3186792, 3187296, \
3196872, 3271968, 3297168, 3298176, 3619728, 3678192, 3712968, 3768912, \
3796128, 3816792, 3817296, 3867192, 3869712, 3927168, 3928176, 6139728, \
6379128, 6387192, 6389712, 6391728, 6719328, 6719832, 6731928, 6893712, \
6913872, 6971328, 6971832, 7168392, 7198632, 7231896, 7291368, 7329168, \
7361928, 7392168, 7398216, 7613928, 7639128, 7829136, 7836192, 7839216, \
7861392, 7863912, 7891632, 7892136, 7916328, 7916832, 7921368, 8123976, \
8163792, 8176392, 8219736, 8312976, 8367912, 8617392, 8731296, 8796312, \
8912736, 8973216, 9163728, 9176328, 9176832, 9182376, 9231768, 9237816, \
9278136, 9283176, 9617328, 9617832, 9678312, 9718632, 9723168, 9781632, \
9782136, 9812376, 9867312}\n\n\n\n    Length[%]\n\n\n\n>548", "TitleString" -> 
         "Mathematica 105", "SimplifiedTitleString" -> 
         "Mathematica \[ScriptCapitalD]\[ScriptCapitalD]\[ScriptCapitalD]", 
         "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
         Missing["NotAvailable"], "TitleCodeSnippets" -> 
         Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
         "ReportedSize" -> Quantity[105, "Bytes"], "Language" -> 
         Entity["CodeGolfProgrammingLanguage", "WolframLanguage"], 
         "CodeSnippets" -> {
          
          "\nl = Length; Cases[Range@9867312,n_ /;(FreeQ[i=IntegerDigits@n, \
0]&&l@i== l@Union@i&&And @@(Divisible[n,#]&/@i))]", "\nLength[%]"}], 
        Association[
        "Title" -> {"Mathematica 105"}, 
         "Code" -> {
          "\nl=Length;Cases[Range@9867312,n_ \
/;(FreeQ[i=IntegerDigits@n,0]&&l@i== l@Union@i&&And@@(Divisible[n,#]&/@i))]", 
           "\nLength[%]"}, "Format" -> "Markdown", "Date" -> 
         DateObject[{2015, 9, 29, 15, 22, 38}, "Instant", "Gregorian", "UTC"],
          "Text" -> 
         "#Mathematica 105\n\n\n\n    l=Length;Cases[Range@9867312,n_ \
/;(FreeQ[i=IntegerDigits@n,0]&&l@i== l@Union@i&&And@@(Divisible[n,#]&/@i))]\n\
\n\n\n - `IntegerDigits` breaks up `n` into a list of its digits, `i`.\n\n - \
`FreeQ[i,0]` checks whether there are no zeros in the list.\n\n - \
`Length[i]==Length[Union[i]]` checks that there are no repeated digits.\n\n - \
`And@@(Divisible[n,#]&/@i)` checks that each digit is a divisor of `n`.\n\n\n\
\n\n\n\n\n>{1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 24, 36, 48, 124, 126, 128, \
132, 135, 162, 168, 175, 184, 216, 248, 264, 312, 315, 324, 384, 396, 412, \
432, 612, 624, 648, 672, 728, 735, 784, 816, 824, 864, 936, 1236, 1248, 1296, \
1326, 1362, 1368, 1395, 1632, 1692, 1764, 1824, 1926, 1935, 1962, 2136, 2184, \
2196, 2316, 2364, 2436, 2916, 3126, 3162, 3168, 3195, 3216, 3264, 3276, 3492, \
3612, 3624, 3648, 3816, 3864, 3915, 3924, 4128, 4172, 4236, 4368, 4392, 4632, \
4872, 4896, 4932, 4968, 6132, 6192, 6312, 6324, 6384, 6432, 6912, 6984, 8136, \
8496, 8736, 9126, 9135, 9162, 9216, 9315, 9324, 9432, 9612, 9648, 9864, \
12384, 12648, 12768, 12864, 13248, 13824, 13896, 13968, 14328, 14728, 14832, \
16248, 16824, 17248, 18264, 18432, 18624, 18936, 19368, 21384, 21648, 21784, \
21864, 23184, 24168, 24816, 26184, 27384, 28416, 29736, 31248, 31824, 31896, \
31968, 32184, 34128, 36792, 37128, 37296, 37926, 38472, 39168, 39816, 41328, \
41832, 42168, 42816, 43128, 43176, 46128, 46872, 48216, 48312, 61248, 61824, \
62184, 64128, 68712, 72184, 73164, 73248, 73416, 73962, 78624, 79128, 79632, \
81264, 81432, 81624, 81936, 82416, 84216, 84312, 84672, 87192, 89136, 89712, \
91368, 91476, 91728, 92736, 93168, 93816, 98136, 123648, 123864, 123984, \
124368, 126384, 129384, 132648, 132864, 132984, 134928, 136248, 136824, \
138264, 138624, 139248, 139824, 142368, 143928, 146328, 146832, 148392, \
148632, 149328, 149832, 162384, 163248, 163824, 164328, 164832, 167328, \
167832, 168432, 172368, 183264, 183624, 184392, 184632, 186432, 189432, \
192384, 193248, 193824, 194328, 194832, 198432, 213648, 213864, 213984, \
214368, 216384, 218736, 219384, 231648, 231864, 231984, 234168, 234816, \
236184, 238416, 239184, 241368, 243168, 243768, 243816, 247968, 248136, \
248976, 261384, 263184, 273168, 281736, 283416, 284136, 291384, 293184, \
297864, 312648, 312864, 312984, 314928, 316248, 316824, 318264, 318624, \
319248, 319824, 321648, 321864, 321984, 324168, 324816, 326184, 328416, \
329184, 341928, 342168, 342816, 346128, 348192, 348216, 348912, 349128, \
361248, 361824, 361872, 362184, 364128, 364728, 367248, 376824, 381264, \
381624, 382416, 384192, 384216, 384912, 391248, 391824, 392184, 394128, \
412368, 413928, 416328, 416832, 418392, 418632, 419328, 419832, 421368, \
423168, 423816, 427896, 428136, 428736, 431928, 432168, 432768, 432816, \
436128, 438192, 438216, 438912, 439128, 461328, 461832, 463128, 468312, \
469728, 478296, 478632, 481392, 481632, 482136, 483192, 483216, 483672, \
483912, 486312, 489312, 491328, 491832, 493128, 498312, 612384, 613248, \
613824, 613872, 614328, 614832, 618432, 621384, 623184, 623784, 627984, \
631248, 631824, 632184, 634128, 634872, 641328, 641832, 643128, 648312, \
671328, 671832, 681432, 684312, 689472, 732648, 732816, 742896, 746928, \
762384, 768432, 783216, 789264, 796824, 813264, 813624, 814392, 814632, \
816432, 819432, 823416, 824136, 824376, 831264, 831624, 832416, 834192, \
834216, 834912, 836472, 841392, 841632, 842136, 843192, 843216, 843912, \
846312, 849312, 861432, 864312, 873264, 891432, 894312, 897624, 912384, \
913248, 913824, 914328, 914832, 918432, 921384, 923184, 927864, 931248, \
931824, 932184, 934128, 941328, 941832, 943128, 948312, 976248, 978264, \
981432, 984312, 1289736, 1293768, 1369872, 1372896, 1376928, 1382976, \
1679328, 1679832, 1687392, 1738296, 1823976, 1863792, 1876392, 1923768, \
1936872, 1982736, 2137968, 2138976, 2189376, 2317896, 2789136, 2793168, \
2819376, 2831976, 2931768, 2937816, 2978136, 2983176, 3186792, 3187296, \
3196872, 3271968, 3297168, 3298176, 3619728, 3678192, 3712968, 3768912, \
3796128, 3816792, 3817296, 3867192, 3869712, 3927168, 3928176, 6139728, \
6379128, 6387192, 6389712, 6391728, 6719328, 6719832, 6731928, 6893712, \
6913872, 6971328, 6971832, 7168392, 7198632, 7231896, 7291368, 7329168, \
7361928, 7392168, 7398216, 7613928, 7639128, 7829136, 7836192, 7839216, \
7861392, 7863912, 7891632, 7892136, 7916328, 7916832, 7921368, 8123976, \
8163792, 8176392, 8219736, 8312976, 8367912, 8617392, 8731296, 8796312, \
8912736, 8973216, 9163728, 9176328, 9176832, 9182376, 9231768, 9237816, \
9278136, 9283176, 9617328, 9617832, 9678312, 9718632, 9723168, 9781632, \
9782136, 9812376, 9867312}\n\n\n\n    Length[%]\n\n\n\n>548", "TitleString" -> 
         "Mathematica 105", "SimplifiedTitleString" -> 
         "Mathematica \[ScriptCapitalD]\[ScriptCapitalD]\[ScriptCapitalD]", 
         "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
         Missing["NotAvailable"], "TitleCodeSnippets" -> 
         Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
         "ReportedSize" -> Quantity[105, "Bytes"], "Language" -> 
         Entity["CodeGolfProgrammingLanguage", "WolframLanguage"], 
         "CodeSnippets" -> {
          "\nl=Length;Cases[Range@9867312,n_ \
/;(FreeQ[i=IntegerDigits@n,0]&&l@i== l@Union@i&&And@@(Divisible[n,#]&/@i))]", 
           "\nLength[%]"}]}}, {{{3652513725, 3652514205, 3652514558}}}, 1, {
      "Discrete", 1}, {"Discrete", 1}, 1, {
      ValueDimensions -> 1, DateFunction -> Automatic, ResamplingMethod -> 
       None}}, True, 12.],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["EventSeries",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{}, 
                
                GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                 0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                 2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {2.,
                  0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                 1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                 1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                 2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
               1, Axes -> {False, False}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
               Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, GridLinesStyle -> Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, 
               Method -> {
                "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                 Scaled[0.1]}, 
               PlotRange -> {{1., 5.}, {0.8225923764690866, 
                2.2418867917949643`}}, PlotRangeClipping -> True, 
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
               Ticks -> {Automatic, Automatic}], 
              GridBox[{{
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"11:36:51.000\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"11:56:54.000\"", "SummaryItem"]}]}, 
                   "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{}, 
                
                GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                 0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                 2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {2.,
                  0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                 1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                 1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                 2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
               1, Axes -> {False, False}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
               Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, GridLinesStyle -> Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, 
               Method -> {
                "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                 Scaled[0.1]}, 
               PlotRange -> {{1., 5.}, {0.8225923764690866, 
                2.2418867917949643`}}, PlotRangeClipping -> True, 
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
               Ticks -> {Automatic, Automatic}], 
              GridBox[{{
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"11:36:51.000\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"11:56:54.000\"", "SummaryItem"]}]}, 
                   "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["True", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Output dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Minimum increment: \"", "SummaryItemAnnotation"],
                    "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"20.05`", ",", "\"Minute\""}], "}"}], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    TemporalData[EventSeries, {{{
        Association[
        "Title" -> {"PHP - 54 characters"}, 
         "Code" -> {
          "\n<?for($s=trim(`cat`);$s!=$r=strrev($s);$s+=$r);echo$s;", 
           "\n$ php 196.php <<< 5280"}, "Format" -> "Markdown", "Date" -> 
         DateObject[{2011, 2, 6, 15, 36, 51}, "Instant", "Gregorian", "UTC"], 
         "Text" -> 
         "# PHP - 54 characters\n\n\n\n    \
<?for($s=trim(`cat`);$s!=$r=strrev($s);$s+=$r);echo$s;\n\n\n\nTest:\n\n\n\n   \
 $ php 196.php <<< 5280\n\n    23232", "TitleString" -> "PHP - 54 characters",
          "SimplifiedTitleString" -> 
         "PHP \[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], 
         "SizeHistory" -> Missing["NotAvailable"], "TitleCodeSnippets" -> 
         Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
         "ReportedSize" -> Quantity[54, 
           IndependentUnit["characters"]], "Language" -> 
         Entity["CodeGolfProgrammingLanguage", "PHP::x8873"], 
         "CodeSnippets" -> {
          "\n<?for($s=trim(`cat`);$s!=$r=strrev($s);$s+=$r);echo$s;", 
           "\n$ php 196.php <<< 5280"}], 
        Association[
        "Title" -> {"PHP -  48 characters"}, 
         "Code" -> {
          "\n<?for($s=`cat`;$s!=$r=strrev($s);$s+=$r);echo$s;", 
           "\n$ php 196.php <<< 5280"}, "Format" -> "Markdown", "Date" -> 
         DateObject[{2011, 2, 6, 15, 56, 54}, "Instant", "Gregorian", "UTC"], 
         "Text" -> 
         "# PHP - <s>54</s> 48 characters\n\n\n\n    \
<?for($s=`cat`;$s!=$r=strrev($s);$s+=$r);echo$s;\n\n\n\nTest:\n\n\n\n    $ \
php 196.php <<< 5280\n\n    23232", "TitleString" -> "PHP - 48 characters", 
         "SimplifiedTitleString" -> 
         "PHP \[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], 
         "SizeHistory" -> Missing["NotAvailable"], "TitleCodeSnippets" -> 
         Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
         "ReportedSize" -> Quantity[48, 
           IndependentUnit["characters"]], "Language" -> 
         Entity["CodeGolfProgrammingLanguage", "PHP::x8873"], 
         "CodeSnippets" -> {
          "\n<?for($s=`cat`;$s!=$r=strrev($s);$s+=$r);echo$s;", 
           "\n$ php 196.php <<< 5280"}]}}, {
       TemporalData`DateSpecification[{2011, 2, 6, 11, 36, 51.}, {
        2011, 2, 6, 11, 56, 54.}, {20.05, "Minute"}]}, 1, {"Discrete", 1}, {
      "Discrete", 1}, 1, {
      ValueDimensions -> 1, DateFunction -> Automatic, ResamplingMethod -> 
       None}}, True, 12.],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["EventSeries",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{}, 
                
                GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                 0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                 2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {2.,
                  0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                 1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                 1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                 2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
               1, Axes -> {False, False}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
               Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, GridLinesStyle -> Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, 
               Method -> {
                "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                 Scaled[0.1]}, 
               PlotRange -> {{1., 5.}, {0.8225923764690866, 
                2.2418867917949643`}}, PlotRangeClipping -> True, 
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
               Ticks -> {Automatic, Automatic}], 
              GridBox[{{
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"08 Mar 2012 13:09:59\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"08 Mar 2012 14:32:19\"", "SummaryItem"]}]}, 
                   "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{}, 
                
                GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                 0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                 2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {2.,
                  0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                 1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                 1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                 2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
               1, Axes -> {False, False}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
               Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, GridLinesStyle -> Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, 
               Method -> {
                "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                 Scaled[0.1]}, 
               PlotRange -> {{1., 5.}, {0.8225923764690866, 
                2.2418867917949643`}}, PlotRangeClipping -> True, 
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
               Ticks -> {Automatic, Automatic}], 
              GridBox[{{
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"08 Mar 2012 13:09:59\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"08 Mar 2012 14:32:19\"", "SummaryItem"]}]}, 
                   "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["True", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Output dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Minimum increment: \"", "SummaryItemAnnotation"],
                    "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{"1.3722222222222222`", ",", "\"Hour\""}], "}"}], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    TemporalData[EventSeries, {{{
        Association[
        "Title" -> {"C# - 103 chars"}, 
         "Code" -> {
          "\npublic int Pal(int i)\n{\n    var r = int.Parse(new \
string(i.ToString().Reverse().ToArray())));\n    return r == i ? i : Pal(i + \
r);        \n}"}, "Format" -> "Markdown", "Date" -> 
         DateObject[{2012, 3, 8, 17, 9, 59}, "Instant", "Gregorian", "UTC"], 
         "Text" -> 
         "C# - 103 chars\n\n---\n\n\n\n    public int Pal(int i)\n\n    {\n\n \
       var r = int.Parse(new string(i.ToString().Reverse().ToArray())));\n\n  \
      return r == i ? i : Pal(i + r);        \n\n    }\n\n\n\nC# never does \
very well in golf. Elegant, but verbose.\n\n", "TitleString" -> 
         "C# - 103 chars", "SimplifiedTitleString" -> 
         "C# \[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD]\
\[ScriptCapitalD] \[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], 
         "SizeHistory" -> Missing["NotAvailable"], "TitleCodeSnippets" -> 
         Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
         "ReportedSize" -> Quantity[103, 
           IndependentUnit["characters"]], "Language" -> 
         Entity["CodeGolfProgrammingLanguage", "C::5zm8v"], 
         "CodeSnippets" -> {
          "\npublic int Pal(int i)\n{\n    var r = int.Parse(new \
string(i.ToString().Reverse().ToArray())));\n    return r == i ? i : Pal(i + \
r);        \n}"}], 
        Association[
        "Title" -> {"C# -  99 chars"}, 
         "Code" -> {
          "\npublic int P(int i)\n{\n    var r = int.Parse(new \
string(i.ToString().Reverse().ToArray())));\n    return r == i ? i : P(i + \
r);        \n}"}, "Format" -> "Markdown", "Date" -> 
         DateObject[{2012, 3, 8, 18, 32, 19}, "Instant", "Gregorian", "UTC"], 
         "Text" -> 
         "C# - <strike>103</strike> 99 chars\n\n---\n\n\n\n    public int \
P(int i)\n\n    {\n\n        var r = int.Parse(new \
string(i.ToString().Reverse().ToArray())));\n\n        return r == i ? i : \
P(i + r);        \n\n    }\n\n\n\nC# never does very well in golf. Elegant, \
but verbose.\n\n", "TitleString" -> "C# - 99 chars", "SimplifiedTitleString" -> 
         "C# \[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
         Missing["NotAvailable"], "TitleCodeSnippets" -> 
         Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
         "ReportedSize" -> Quantity[99, 
           IndependentUnit["characters"]], "Language" -> 
         Entity["CodeGolfProgrammingLanguage", "C::5zm8v"], 
         "CodeSnippets" -> {
          "\npublic int P(int i)\n{\n    var r = int.Parse(new \
string(i.ToString().Reverse().ToArray())));\n    return r == i ? i : P(i + \
r);        \n}"}]}}, {
       TemporalData`DateSpecification[{2012, 3, 8, 13, 9, 59.}, {
        2012, 3, 8, 14, 32, 19.}, {1.3722222222222222`, "Hour"}]}, 1, {
      "Discrete", 1}, {"Discrete", 1}, 1, {
      ValueDimensions -> 1, DateFunction -> Automatic, ResamplingMethod -> 
       None}}, True, 12.],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["EventSeries",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{}, 
                
                GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                 0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                 2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {2.,
                  0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                 1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                 1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                 2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
               1, Axes -> {False, False}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
               Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, GridLinesStyle -> Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, 
               Method -> {
                "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                 Scaled[0.1]}, 
               PlotRange -> {{1., 5.}, {0.8225923764690866, 
                2.2418867917949643`}}, PlotRangeClipping -> True, 
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
               Ticks -> {Automatic, Automatic}], 
              GridBox[{{
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"05 Feb 2011 19:55:24\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"05 Feb 2011 21:39:55\"", "SummaryItem"]}]}, 
                   "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["3", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{}, 
                
                GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                 0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                 2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {2.,
                  0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                 1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                 1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                 2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
               1, Axes -> {False, False}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
               Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
               Frame -> {{True, True}, {True, True}}, 
               FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
               Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
               GridLines -> {None, None}, GridLinesStyle -> Directive[
                 GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                 Dynamic[
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])]}, 
               Method -> {
                "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                   Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                 Scaled[0.1]}, 
               PlotRange -> {{1., 5.}, {0.8225923764690866, 
                2.2418867917949643`}}, PlotRangeClipping -> True, 
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
               Ticks -> {Automatic, Automatic}], 
              GridBox[{{
                 TagBox[
                  TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"05 Feb 2011 19:55:24\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"05 Feb 2011 21:39:55\"", "SummaryItem"]}]}, 
                   "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["3", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["False", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Output dimension: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["None", "SummaryItem"]}], 
                 RowBox[{
                   TagBox["\"Minimum increment: \"", "SummaryItemAnnotation"],
                    "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["107", "28800"], ",", "\"Day\""}], "}"}], 
                    "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    TemporalData[EventSeries, {{{
        Association[
        "Title" -> {"Golfscript - 26 chars"}, "Code" -> {}, "Format" -> 
         "Markdown", "Date" -> 
         DateObject[{2011, 2, 5, 23, 55, 24}, "Instant", "Gregorian", "UTC"], 
         "Text" -> 
         "Golfscript - 26 chars\n\n--\n\n\n\n    ~:x,{:b;x,{b?x=b*}%+}*$-1>", 
         "TitleString" -> "Golfscript - 26 chars", "SimplifiedTitleString" -> 
         "Golfscript \[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
         Missing["NotAvailable"], "TitleCodeSnippets" -> 
         Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
         "ReportedSize" -> Quantity[26, 
           IndependentUnit["characters"]], "Language" -> 
         Entity["CodeGolfProgrammingLanguage", "golfscript"], 
         "CodeSnippets" -> {}], 
        Association[
        "Title" -> {"Golfscript - 26 chars"}, 
         "Code" -> {
          "\n~:x,{:b;x,{b?x=b*}%+}*$-1>", 
           "\nx=input()\nacc = []\nfor b in range(x):\n    for _ in range(x):\
\n        acc.append((_**b==x)*b) # most of these are zeros\nprint max(acc)"},
          "Format" -> "Markdown", "Date" -> 
         DateObject[{2011, 2, 6, 0, 0, 45}, "Instant", "Gregorian", "UTC"], 
         "Text" -> 
         "Golfscript - 26 chars\n\n--\n\n\n\n    ~:x,{:b;x,{b?x=b*}%+}*$-1>\n\
\n\n\nRough translation to Python\n\n\n\n    x=input()\n\n    acc = []\n\n    \
for b in range(x):\n\n        for _ in range(x):\n\n            \
acc.append((_**b==x)*b) # most of these are zeros\n\n    print max(acc)\n\n\n\
\nSo it loops more way times that necessary, but that often happens with \
golfed answers\n\n\n\n", "TitleString" -> "Golfscript - 26 chars", 
         "SimplifiedTitleString" -> 
         "Golfscript \[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
         Missing["NotAvailable"], "TitleCodeSnippets" -> 
         Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
         "ReportedSize" -> Quantity[26, 
           IndependentUnit["characters"]], "Language" -> 
         Entity["CodeGolfProgrammingLanguage", "golfscript"], 
         "CodeSnippets" -> {
          "\n~:x,{:b;x,{b?x=b*}%+}*$-1>", 
           "\nx=input()\nacc = []\nfor b in range(x):\n    for _ in range(x):\
\n        acc.append((_**b==x)*b) # most of these are zeros\nprint \
max(acc)"}], 
        Association[
        "Title" -> {"Golfscript - 26 chars"}, 
         "Code" -> {
          "\n~:x,{:b;x,{b?x=b*}%+}*$-1>", 
           "\nx=input()\nacc = []\nfor b in range(x):\n    for _ in range(x):\
\n        acc.append((_**b==x)*b) # most of these are zeros\nprint max(acc)"},
          "Format" -> "Markdown", "Date" -> 
         DateObject[{2011, 2, 6, 1, 39, 55}, "Instant", "Gregorian", "UTC"], 
         "Text" -> 
         "Golfscript - 26 chars\n\n--\n\n\n\n    ~:x,{:b;x,{b?x=b*}%+}*$-1>\n\
\n\n\nRough translation to Python\n\n\n\n    x=input()\n\n    acc = []\n\n    \
for b in range(x):\n\n        for _ in range(x):\n\n            \
acc.append((_**b==x)*b) # most of these are zeros\n\n    print max(acc)\n\n\n\
\nSo it loops way more times that necessary, but that often happens with \
golfed answers\n\n\n\n", "TitleString" -> "Golfscript - 26 chars", 
         "SimplifiedTitleString" -> 
         "Golfscript \[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
         Missing["NotAvailable"], "TitleCodeSnippets" -> 
         Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
         "ReportedSize" -> Quantity[26, 
           IndependentUnit["characters"]], "Language" -> 
         Entity["CodeGolfProgrammingLanguage", "golfscript"], 
         "CodeSnippets" -> {
          "\n~:x,{:b;x,{b?x=b*}%+}*$-1>", 
           "\nx=input()\nacc = []\nfor b in range(x):\n    for _ in range(x):\
\n        acc.append((_**b==x)*b) # most of these are zeros\nprint \
max(acc)"}]}}, {{{3505924524, 3505924845, 3505930795}}}, 1, {"Discrete", 1}, {
      "Discrete", 1}, 1, {
      ValueDimensions -> 1, DateFunction -> Automatic, ResamplingMethod -> 
       None}}, True, 12.],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.780664043142666*^9, 3.780664112788856*^9, 
  3.7806660234107547`*^9, 3.7806660955673018`*^9, 3.780666259737357*^9, 
  3.780666340256195*^9, 3.780666473886392*^9, 3.780667456532503*^9, 
  3.7806796071660585`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"126b2957-659d-4b9b-a554-3b8ef3cb1efd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example: Visualize Submission Size History for a thread", \
"Subsubsubsection",
 CellChangeTimes->{{3.7806674955828457`*^9, 3.780667505053087*^9}, {
  3.780679243764063*^9, 
  3.780679245114134*^9}},ExpressionUUID->"5ae20674-db17-442f-bb0e-\
18599a1fe4c5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"parentPost", "=", 
   TemplateBox[{TemplateBox[{
       TemplateBox[{1}, "Spacer1"], 
       "\"Q: [Calvin's Hobbies] Draw a Random ASCII Art Quilt\"", 
       TemplateBox[{
         TagBox[
          TooltipBox[
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "\"Open\"", LabelStyle -> "TextStyling"], 
          Annotation[#, "Open", "Tooltip"]& ], 
         "https://codegolf.stackexchange.com/q/48937"}, "HyperlinkURL"]}, 
      "RowWithSeparator"],RowBox[{"Entity", "[", 
       RowBox[{"\"StackExchange.Codegolf:Post\"", ",", "\"48937\""}], "]"}],
     "\"Entity[\\\"StackExchange.Codegolf:Post\\\", \\\"48937\\\"]\"",
     "\"codegolf:Post\""},
    "Entity"]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"submissions", "=", 
   RowBox[{"EntityList", "@", 
    RowBox[{"EntityClass", "[", 
     RowBox[{"\"\<StackExchange.Codegolf:Post\>\"", ",", 
      RowBox[{"\"\<ParentPost\>\"", "\[Rule]", "parentPost"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"submissions", "//", "Length"}]}], "Input",
 CellChangeTimes->{{3.780252995560711*^9, 3.7802530496738267`*^9}, 
   3.7802546082480536`*^9, {3.7802547439502115`*^9, 3.7802547556316814`*^9}, {
   3.7806675318227186`*^9, 3.780667536062745*^9}, {3.7806715922380476`*^9, 
   3.780671601282672*^9}},
 CellLabel->
  "In[717]:=",ExpressionUUID->"acbcda13-4221-4e23-8515-56f0bdccf2f8"],

Cell[BoxData["13"], "Output",
 CellChangeTimes->{{3.7802530407777696`*^9, 3.780253052223544*^9}, {
   3.780254753246685*^9, 3.780254759188634*^9}, 3.7803118553330574`*^9, 
   3.780346385390951*^9, 3.7804188711424866`*^9, {3.780667510162737*^9, 
   3.780667538972869*^9}, 3.780671604351409*^9},
 CellLabel->
  "Out[719]=",ExpressionUUID->"b956d589-206d-4579-bb9f-cddff58ea3c1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"submissionToHistoricalCodeGolfMetadata", "=", 
    RowBox[{"EntityValue", "[", 
     RowBox[{
     "submissions", ",", "\"\<HistoricalCodeGolfMetadata\>\"", ",", 
      "\"\<EntityAssociation\>\""}], "]"}]}], ";"}], "//", 
  "AbsoluteTiming"}]], "Input",
 CellChangeTimes->{{3.7802530542348447`*^9, 3.7802531210741625`*^9}, 
   3.7802542096216335`*^9, {3.780667550552783*^9, 3.7806675639328628`*^9}, {
   3.7806677735981646`*^9, 3.780667774503189*^9}, {3.7806714982721853`*^9, 
   3.7806714985720677`*^9}},ExpressionUUID->"b2e413a5-201e-4cfb-a0ef-\
a39fc145eab1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"74.5631945`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.78025330225464*^9, 3.780253382290433*^9, 
  3.7802536897524204`*^9, 3.7802539141206827`*^9, 3.780254495277792*^9, 
  3.780254914628414*^9, 3.7803120109046316`*^9, 3.780346539562116*^9, 
  3.7804190382673655`*^9, 3.780667646897998*^9, 3.7806678581050406`*^9, 
  3.7806679595712414`*^9, 3.780668358148583*^9, 3.7806712894508*^9},
 CellLabel->
  "Out[706]=",ExpressionUUID->"7b92162a-103b-4986-a910-3280155e76aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"submissionToHistoricalCodeGolfMetadata", "[", 
  RowBox[{"[", 
   RowBox[{";;", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7806675773356285`*^9, 3.7806675795925627`*^9}},
 CellLabel->
  "In[710]:=",ExpressionUUID->"dc8e192b-f5de-444c-b922-0fc4f2466b48"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    TemplateBox[{TemplateBox[{
        TemplateBox[{1}, "Spacer1"], 
        "\"A: [Logic Knight] Python 2, 300 bytes\\nThis program uses join, \
lambda\[Ellipsis]\"", 
        TemplateBox[{
          TagBox[
           TooltipBox[
            StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
            "\"Open\"", LabelStyle -> "TextStyling"], 
           Annotation[#, "Open", "Tooltip"]& ], 
          "https://codegolf.stackexchange.com/q/48941"}, "HyperlinkURL"]}, 
       "RowWithSeparator"],RowBox[{"Entity", "[", 
        RowBox[{"\"StackExchange.Codegolf:Post\"", ",", "\"48941\""}], "]"}],
      "\"Entity[\\\"StackExchange.Codegolf:Post\\\", \\\"48941\\\"]\"",
      "\"codegolf:Post\""},
     "Entity"], "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["EventSeries",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{{}, 
                 
                 GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                  0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                  2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {
                  2., 0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                  1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                  1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                  2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
                1, Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
                Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, 
                Method -> {
                 "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                  Scaled[0.1]}, 
                PlotRange -> {{1., 5.}, {0.8225923764690866, 
                 2.2418867917949643`}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"17 Apr 2015 03:49\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"17 Apr 2015 03:49\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{{}, 
                 
                 GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                  0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                  2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {
                  2., 0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                  1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                  1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                  2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
                1, Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
                Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, 
                Method -> {
                 "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                  Scaled[0.1]}, 
                PlotRange -> {{1., 5.}, {0.8225923764690866, 
                 2.2418867917949643`}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"17 Apr 2015 03:49\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"17 Apr 2015 03:49\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["True", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Output dimension: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}], 
                  RowBox[{
                    TagBox[
                    "\"Minimum increment: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"1", ",", "\"Day\""}], "}"}], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TemporalData[EventSeries, {{{
         Association[
         "Title" -> {"Python 2, 300 bytes"}, 
          "Code" -> {
           "\nfrom random import*\nf=lambda \
a,b,t:t.replace(a,'*').replace(b,a).replace('*',b)\nk=lambda \
a:''.join(sample(a*12,12))\nc='-'*24\ne=k('<>')\nh=e+f('<','>',e[::-1])\n\
j=[d+f('/','\\\\',d[::-1])for d in[k('\\\\/')for i in'quilt']]\n\
g=['='*24,c,j[0],h,j[1],c]+j[2:]\nprint'\\n'.join(g+[f('/','\\\\',d)for d in \
g[::-1]])", "\nfrom random import *", 
            "\ninnerline = '-' * 24\nline4h = pick('<>')\nline4 = line4h + \
change('<', '>', line4h[::-1])\ndiag = [d + change('/', '\\\\', d[::-1]) for \
d in [pick('\\\\/') for i in 'quilt']]", 
            "\n========================\n------------------------\n\
\\\\\\\\/\\////\\\\//\\\\\\\\/\\////\n<><<>>>><><><><><<<<>><>\n/\\\\\\\\////\
\\\\\\///\\\\\\\\////\\\n------------------------\n\
\\\\\\\\//\\///\\\\//\\\\\\/\\\\////\n//\\//\\\\\\\\/\\/\\/\\////\\\\/\\\\\n\
\\/\\\\\\\\/\\//\\/\\/\\\\/\\////\\/\n/\\////\\/\\\\/\\/\\//\\/\\\\\\\\/\\\n\
\\\\/\\\\////\\/\\/\\/\\\\\\\\//\\//\n////\\\\/\\\\\\//\\\\///\\//\\\\\\\\\n\
------------------------\n\\////\\\\\\\\///\\\\\\////\\\\\\\\/\n\
<><<>>>><><><><><<<<>><>\n////\\/\\\\\\\\//\\\\////\\/\\\\\\\\\n\
------------------------"}, "Format" -> "Markdown", "Date" -> 
          DateObject[{2015, 4, 17, 7, 49, 49}, "Instant", "Gregorian", "UTC"],
           "Text" -> 
          "# Python 2, 300 bytes\n\n\n\nThis program uses `join, lambda, \
replace, sample, import` and other verbose functions, so it will not be \
winning any golf awards.\n\n\n\n<!-- language-all: lang-python -->\n\n\n\n    \
from random import*\n\n    f=lambda \
a,b,t:t.replace(a,'*').replace(b,a).replace('*',b)\n\n    k=lambda \
a:''.join(sample(a*12,12))\n\n    c='-'*24\n\n    e=k('<>')\n\n    \
h=e+f('<','>',e[::-1])\n\n    j=[d+f('/','\\\\',d[::-1])for d \
in[k('\\\\/')for i in'quilt']]\n\n    g=['='*24,c,j[0],h,j[1],c]+j[2:]\n\n    \
print'\\n'.join(g+[f('/','\\\\',d)for d in g[::-1]])\n\n\n\nThe code before \
the auto-golfer got hold of it:\n\n\n\n    from random import *\n\n\n\n    \
change = lambda a,b,t: t.replace(a,'*').replace(b,a).replace('*',b)\n\n    \
pick = lambda a: ''.join(sample(a*12, 12))\n\n\n\n    innerline = '-' * 24\n\n\
    line4h = pick('<>')\n\n    line4 = line4h + change('<', '>', \
line4h[::-1])\n\n    diag = [d + change('/', '\\\\', d[::-1]) for d in \
[pick('\\\\/') for i in 'quilt']]\n\n\n\n    quilt = ['='*24, innerline, \
diag[0], line4, diag[1], innerline] + diag[2:]\n\n    print '\\n'.join(quilt \
+ [change('/', '\\\\', d) for d in quilt[::-1]])\n\n\n\nA sample output:\n\n\n\
\n    ========================\n\n    ------------------------\n\n    \
\\\\\\\\/\\////\\\\//\\\\\\\\/\\////\n\n    <><<>>>><><><><><<<<>><>\n\n    /\
\\\\\\\\////\\\\\\///\\\\\\\\////\\\n\n    ------------------------\n\n    \\\
\\\\\\//\\///\\\\//\\\\\\/\\\\////\n\n    \
//\\//\\\\\\\\/\\/\\/\\////\\\\/\\\\\n\n    \\/\\\\\\\\/\\//\\/\\/\\\\/\\////\
\\/\n\n    /\\////\\/\\\\/\\/\\//\\/\\\\\\\\/\\\n\n    \\\\/\\\\////\\/\\/\\/\
\\\\\\\\//\\//\n\n    ////\\\\/\\\\\\//\\\\///\\//\\\\\\\\\n\n    \
------------------------\n\n    \\////\\\\\\\\///\\\\\\////\\\\\\\\/\n\n    \
<><<>>>><><><><><<<<>><>\n\n    ////\\/\\\\\\\\//\\\\////\\/\\\\\\\\\n\n    \
------------------------\n\n    ========================", "TitleString" -> 
          "Python 2, 300 bytes", "SimplifiedTitleString" -> 
          "Python \[ScriptCapitalD]\[ScriptCapitalS] \[ScriptCapitalD]\
\[ScriptCapitalD]\[ScriptCapitalD] \[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]", "TitleURLs" -> 
          Missing["NotAvailable"], "SizeHistory" -> Missing["NotAvailable"], 
          "TitleCodeSnippets" -> Missing["NotAvailable"], "Images" -> 
          Missing["NotAvailable"], "ReportedSize" -> Quantity[300, "Bytes"], 
          "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "Python::4g426"], 
          "CodeSnippets" -> {
           "\nfrom random import*\nf=lambda \
a,b,t:t.replace(a,'*').replace(b,a).replace('*',b)\nk=lambda \
a:''.join(sample(a*12,12))\nc='-'*24\ne=k('<>')\nh=e+f('<','>',e[::-1])\n\
j=[d+f('/','\\\\',d[::-1])for d in[k('\\\\/')for i in'quilt']]\n\
g=['='*24,c,j[0],h,j[1],c]+j[2:]\nprint'\\n'.join(g+[f('/','\\\\',d)for d in \
g[::-1]])", "\nfrom random import *", 
            "\ninnerline = '-' * 24\nline4h = pick('<>')\nline4 = line4h + \
change('<', '>', line4h[::-1])\ndiag = [d + change('/', '\\\\', d[::-1]) for \
d in [pick('\\\\/') for i in 'quilt']]", 
            "\n========================\n------------------------\n\
\\\\\\\\/\\////\\\\//\\\\\\\\/\\////\n<><<>>>><><><><><<<<>><>\n/\\\\\\\\////\
\\\\\\///\\\\\\\\////\\\n------------------------\n\
\\\\\\\\//\\///\\\\//\\\\\\/\\\\////\n//\\//\\\\\\\\/\\/\\/\\////\\\\/\\\\\n\
\\/\\\\\\\\/\\//\\/\\/\\\\/\\////\\/\n/\\////\\/\\\\/\\/\\//\\/\\\\\\\\/\\\n\
\\\\/\\\\////\\/\\/\\/\\\\\\\\//\\//\n////\\\\/\\\\\\//\\\\///\\//\\\\\\\\\n\
------------------------\n\\////\\\\\\\\///\\\\\\////\\\\\\\\/\n\
<><<>>>><><><><><<<<>><>\n////\\/\\\\\\\\//\\\\////\\/\\\\\\\\\n\
------------------------"}]}}, {
        TemporalData`DateSpecification[{2015, 4, 17, 3, 49, 49.}, {
         2015, 4, 17, 3, 49, 49.}, {1, "Day"}]}, 1, {"Discrete", 1}, {
       "Discrete", 1}, 1, {
       ValueDimensions -> 1, DateFunction -> Automatic, ResamplingMethod -> 
        None}}, True, 12.],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{
    TemplateBox[{TemplateBox[{
        TemplateBox[{1}, "Spacer1"], 
        "\"A: [Martin Ender] CJam, 61 60 58 55 54 52 51 bytes\\nShortened a \
bit\[Ellipsis]\"", 
        TemplateBox[{
          TagBox[
           TooltipBox[
            StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
            "\"Open\"", LabelStyle -> "TextStyling"], 
           Annotation[#, "Open", "Tooltip"]& ], 
          "https://codegolf.stackexchange.com/q/48943"}, "HyperlinkURL"]}, 
       "RowWithSeparator"],RowBox[{"Entity", "[", 
        RowBox[{"\"StackExchange.Codegolf:Post\"", ",", "\"48943\""}], "]"}],
      "\"Entity[\\\"StackExchange.Codegolf:Post\\\", \\\"48943\\\"]\"",
      "\"codegolf:Post\""},
     "Entity"], "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["EventSeries",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{{}, 
                 
                 GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                  0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                  2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {
                  2., 0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                  1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                  1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                  2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
                1, Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
                Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, 
                Method -> {
                 "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                  Scaled[0.1]}, 
                PlotRange -> {{1., 5.}, {0.8225923764690866, 
                 2.2418867917949643`}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"17 Apr 2015\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"18 Apr 2015\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["10", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{{}, 
                 
                 GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                  0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                  2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {
                  2., 0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                  1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                  1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                  2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
                1, Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
                Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, 
                Method -> {
                 "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                  Scaled[0.1]}, 
                PlotRange -> {{1., 5.}, {0.8225923764690866, 
                 2.2418867917949643`}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"17 Apr 2015\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"18 Apr 2015\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["10", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Output dimension: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}], 
                  RowBox[{
                    TagBox[
                    "\"Minimum increment: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["73", "17280"], ",", "\"Day\""}], "}"}], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TemporalData[EventSeries, {{{
         Association[
         "Title" -> {"CJam, 61 bytes"}, 
          "Code" -> {
           "\n'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<_W%\"\\<>/\"_W%er+}%N*N1$W%\"<>\
\"_W%er"}, "Format" -> "Markdown", "Date" -> 
          DateObject[{2015, 4, 17, 9, 59, 47}, "Instant", "Gregorian", "UTC"],
           "Text" -> 
          "# CJam, 61 bytes\n\n\n\n    '='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<_W%\"\
\\<>/\"_W%er+}%N*N1$W%\"<>\"_W%er\n\n\n\n[Test it here.][1]\n\n\n\nI'll add \
an explanation when I'm done golfing.\n\n\n\n[1]: \
http://cjam.aditsu.net/#code='%3D'-%22%5C%2F%22%22%3C%3E%221%24'-1%24__%5D%\
7BC*mrC%3C_W%25%22%5C%3C%3E%2F%22_W%25er%2B%7D%25N*N1%24W%25%22%3C%3E%22_W%\
25er", "TitleString" -> "CJam, 61 bytes", "SimplifiedTitleString" -> 
          "CJam\[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
          Missing["NotAvailable"], "TitleCodeSnippets" -> 
          Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
          "ReportedSize" -> Quantity[61, "Bytes"], "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "cjam"], 
          "CodeSnippets" -> {
           "\n'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<_W%\"\\<>/\"_W%er+}%N*N1$W%\"<>\
\"_W%er"}], 
         Association[
         "Title" -> {"CJam,  60 bytes"}, 
          "Code" -> {
           "\n'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%N*F\"<>\
\"FerN\\"}, "Format" -> "Markdown", "Date" -> 
          DateObject[{2015, 4, 17, 10, 5, 52}, "Instant", "Gregorian", "UTC"],
           "Text" -> 
          "# CJam, <s>61</s> 60 bytes\n\n\n\n    \
'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%N*F\"<>\"FerN\\\n\n\n\
\n[Test it here.][1]\n\n\n\nI'll add an explanation when I'm done golfing.\n\n\
\n\n[1]: http://cjam.aditsu.net/#code='%3D'-%22%5C%2F%22%22%3C%3E%221%24'-1%\
24__%5D%7BC*mrC%3C%7B_W%25%7D%3AF~%22%5C%3C%3E%2F%22Fer%2B%7D%25N*F%22%3C%3E%\
22FerN%5C", "TitleString" -> "CJam, 60 bytes", "SimplifiedTitleString" -> 
          "CJam\[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
          Missing["NotAvailable"], "TitleCodeSnippets" -> 
          Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
          "ReportedSize" -> Quantity[60, "Bytes"], "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "cjam"], 
          "CodeSnippets" -> {
           "\n'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%N*F\"<>\
\"FerN\\"}], 
         Association[
         "Title" -> {"CJam,  60 bytes"}, 
          "Code" -> {
           "\n'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%N*F\"<>\
\"FerN\\", "\n'='-\"\\/\"\"<>\"1$'-1$__]", 
            "\n{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n{                        }% \
\"Map this block onto each base string.\";\n C*                         \
\"Repeat it 12 times.\";\n   mr                       \"Shuffle it. This \
doesn't do anything on - and =.\";\n     C<                     \"Truncate it \
to 12 characters.\";\n       {_W%}:F              \"This defines a function F \
which duplicates and reverses\n                             the top of the \
stack. We'll need that a few times.\";\n              ~             \
\"Evaluate F to mirror the half-line.\";\n               \"\\<>/\"Fer    \
\"Swap \\ and / as well as < and >.\";\n                        +   \"Add the \
two half-lines to a full line.\";", 
            "\nN*F\"<>\"FerN\\\nN*           \"Join the lines with newline \
characters to create a single string.\";\n  F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n              the \
order of the lines as well as each line itself. This already takes\n          \
    care of correctly mirroring \\ and /, but gets < and > wrong.\";\n   \"<>\
\"Fer   \"Swap < and > again (only in the second half).\";\n          N\\ \
\"Push a newline and move it between the two halves of the quilt.\";"}, 
          "Format" -> "Markdown", "Date" -> 
          DateObject[{2015, 4, 17, 10, 22, 43}, "Instant", "Gregorian", 
            "UTC"], "Text" -> 
          "# CJam, <s>61</s> 60 bytes\n\n\n\n    \
'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%N*F\"<>\"FerN\\\n\n\n\
\n[Test it here.][1]\n\n\n\n## Explanation\n\n\n\nAs usual with these \
symmetric ASCII art challenges, I'm generating one quadrant and then expand \
it to the full thing by two appropriate mirroring operations.\n\n\n\n    '='-\
\"\\/\"\"<>\"1$'-1$__]\n\n\n\nThis creates an array with all the \"base \
strings\" for each line. Since characters can be used as strings in many \
places, I'm only pushing a single character for the `---` and `===` lines. \
The `1$` copies the stack element just below the top one, which is `\"\\/\"` \
in both cases, and `_` copies the top stack element, which is again \
`\"\\/\"`.\n\n\n\nNext, we expand each of those base strings to a random \
half-line and then mirror it:\n\n\n\n    {C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n\n   \
 {                        }% \"Map this block onto each base string.\";\n\n   \
  C*                         \"Repeat it 12 times.\";\n\n       mr            \
           \"Shuffle it. This doesn't do anything on - and =.\";\n\n         \
C<                     \"Truncate it to 12 characters.\";\n\n           \
{_W%}:F              \"This defines a function F which duplicates and \
reverses\n\n                                 the top of the stack. We'll need \
that a few times.\";\n\n                  ~             \"Evaluate F to \
mirror the half-line.\";\n\n                   \"\\<>/\"Fer    \"Swap \\ and \
/ as well as < and >.\";\n\n                            +   \"Add the two \
half-lines to a full line.\";\n\n\n\nFinally we build the full quilt:\n\n\n\n \
   N*F\"<>\"FerN\\\n\n    N*           \"Join the lines with newline \
characters to create a single string.\";\n\n      F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n\n                  \
the order of the lines as well as each line itself. This already takes\n\n    \
              care of correctly mirroring \\ and /, but gets < and > \
wrong.\";\n\n       \"<>\"Fer   \"Swap < and > again (only in the second \
half).\";\n\n              N\\ \"Push a newline and move it between the two \
halves of the quilt.\";\n\n\n\n[1]: \
http://cjam.aditsu.net/#code='%3D'-%22%5C%2F%22%22%3C%3E%221%24'-1%24__%5D%\
7BC*mrC%3C%7B_W%25%7D%3AF~%22%5C%3C%3E%2F%22Fer%2B%7D%25N*F%22%3C%3E%22FerN%\
5C", "TitleString" -> "CJam, 60 bytes", "SimplifiedTitleString" -> 
          "CJam\[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
          Missing["NotAvailable"], "TitleCodeSnippets" -> 
          Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
          "ReportedSize" -> Quantity[60, "Bytes"], "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "cjam"], 
          "CodeSnippets" -> {
           "\n'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%N*F\"<>\
\"FerN\\", "\n'='-\"\\/\"\"<>\"1$'-1$__]", 
            "\n{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n{                        }% \
\"Map this block onto each base string.\";\n C*                         \
\"Repeat it 12 times.\";\n   mr                       \"Shuffle it. This \
doesn't do anything on - and =.\";\n     C<                     \"Truncate it \
to 12 characters.\";\n       {_W%}:F              \"This defines a function F \
which duplicates and reverses\n                             the top of the \
stack. We'll need that a few times.\";\n              ~             \
\"Evaluate F to mirror the half-line.\";\n               \"\\<>/\"Fer    \
\"Swap \\ and / as well as < and >.\";\n                        +   \"Add the \
two half-lines to a full line.\";", 
            "\nN*F\"<>\"FerN\\\nN*           \"Join the lines with newline \
characters to create a single string.\";\n  F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n              the \
order of the lines as well as each line itself. This already takes\n          \
    care of correctly mirroring \\ and /, but gets < and > wrong.\";\n   \"<>\
\"Fer   \"Swap < and > again (only in the second half).\";\n          N\\ \
\"Push a newline and move it between the two halves of the quilt.\";"}], 
         Association[
         "Title" -> {"CJam,   58 bytes"}, 
          "Code" -> {
           "\n\"=-/</-///\"{C*_\"\\<>/\":S{_W%}:F~er+mrC<FSFer+}%N*F\"<>\"\
FerN\\", "\n'='-\"\\/\"\"<>\"1$'-1$__]", 
            "\n{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n{                        }% \
\"Map this block onto each base string.\";\n C*                         \
\"Repeat it 12 times.\";\n   mr                       \"Shuffle it. This \
doesn't do anything on - and =.\";\n     C<                     \"Truncate it \
to 12 characters.\";\n       {_W%}:F              \"This defines a function F \
which duplicates and reverses\n                             the top of the \
stack. We'll need that a few times.\";\n              ~             \
\"Evaluate F to mirror the half-line.\";\n               \"\\<>/\"Fer    \
\"Swap \\ and / as well as < and >.\";\n                        +   \"Add the \
two half-lines to a full line.\";", 
            "\nN*F\"<>\"FerN\\\nN*           \"Join the lines with newline \
characters to create a single string.\";\n  F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n              the \
order of the lines as well as each line itself. This already takes\n          \
    care of correctly mirroring \\ and /, but gets < and > wrong.\";\n   \"<>\
\"Fer   \"Swap < and > again (only in the second half).\";\n          N\\ \
\"Push a newline and move it between the two halves of the quilt.\";"}, 
          "Format" -> "Markdown", "Date" -> 
          DateObject[{2015, 4, 17, 19, 48, 52}, "Instant", "Gregorian", 
            "UTC"], "Text" -> 
          "# CJam, <s>61</s> <s>60</s> 58 bytes\n\n\n\nShortened a bit with \
some help from Sp3000.\n\n\n\n    \
\"=-/</-///\"{C*_\"\\<>/\":S{_W%}:F~er+mrC<FSFer+}%N*F\"<>\"FerN\\\n\n\n\n\
[Test it here.][1]\n\n\n\n## Explanation\n\n\n\n*(Slightly outdated \
explanation. Will update later.)*\n\n\n\nAs usual with these symmetric ASCII \
art challenges, I'm generating one quadrant and then expand it to the full \
thing by two appropriate mirroring operations.\n\n\n\n    \
'='-\"\\/\"\"<>\"1$'-1$__]\n\n\n\nThis creates an array with all the \"base \
strings\" for each line. Since characters can be used as strings in many \
places, I'm only pushing a single character for the `---` and `===` lines. \
The `1$` copies the stack element just below the top one, which is `\"\\/\"` \
in both cases, and `_` copies the top stack element, which is again \
`\"\\/\"`.\n\n\n\nNext, we expand each of those base strings to a random \
half-line and then mirror it:\n\n\n\n    {C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n\n   \
 {                        }% \"Map this block onto each base string.\";\n\n   \
  C*                         \"Repeat it 12 times.\";\n\n       mr            \
           \"Shuffle it. This doesn't do anything on - and =.\";\n\n         \
C<                     \"Truncate it to 12 characters.\";\n\n           \
{_W%}:F              \"This defines a function F which duplicates and \
reverses\n\n                                 the top of the stack. We'll need \
that a few times.\";\n\n                  ~             \"Evaluate F to \
mirror the half-line.\";\n\n                   \"\\<>/\"Fer    \"Swap \\ and \
/ as well as < and >.\";\n\n                            +   \"Add the two \
half-lines to a full line.\";\n\n\n\nFinally we build the full quilt:\n\n\n\n \
   N*F\"<>\"FerN\\\n\n    N*           \"Join the lines with newline \
characters to create a single string.\";\n\n      F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n\n                  \
the order of the lines as well as each line itself. This already takes\n\n    \
              care of correctly mirroring \\ and /, but gets < and > \
wrong.\";\n\n       \"<>\"Fer   \"Swap < and > again (only in the second \
half).\";\n\n              N\\ \"Push a newline and move it between the two \
halves of the quilt.\";\n\n\n\n[1]: \
http://cjam.aditsu.net/#code=%22%3D-%2F%3C%2F-%2F%2F%2F%22%7BC*_%22%5C%3C%3E%\
2F%22%3AS%7B_W%25%7D%3AF~er%2BmrC%3CFSFer%2B%7D%25N*F%22%3C%3E%22FerN%5C", 
          "TitleString" -> "CJam, 58 bytes", "SimplifiedTitleString" -> 
          "CJam\[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
          Missing["NotAvailable"], "TitleCodeSnippets" -> 
          Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
          "ReportedSize" -> Quantity[58, "Bytes"], "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "cjam"], 
          "CodeSnippets" -> {
           "\n\"=-/</-///\"{C*_\"\\<>/\":S{_W%}:F~er+mrC<FSFer+}%N*F\"<>\"\
FerN\\", "\n'='-\"\\/\"\"<>\"1$'-1$__]", 
            "\n{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n{                        }% \
\"Map this block onto each base string.\";\n C*                         \
\"Repeat it 12 times.\";\n   mr                       \"Shuffle it. This \
doesn't do anything on - and =.\";\n     C<                     \"Truncate it \
to 12 characters.\";\n       {_W%}:F              \"This defines a function F \
which duplicates and reverses\n                             the top of the \
stack. We'll need that a few times.\";\n              ~             \
\"Evaluate F to mirror the half-line.\";\n               \"\\<>/\"Fer    \
\"Swap \\ and / as well as < and >.\";\n                        +   \"Add the \
two half-lines to a full line.\";", 
            "\nN*F\"<>\"FerN\\\nN*           \"Join the lines with newline \
characters to create a single string.\";\n  F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n              the \
order of the lines as well as each line itself. This already takes\n          \
    care of correctly mirroring \\ and /, but gets < and > wrong.\";\n   \"<>\
\"Fer   \"Swap < and > again (only in the second half).\";\n          N\\ \
\"Push a newline and move it between the two halves of the quilt.\";"}], 
         Association[
         "Title" -> {"CJam,    55 bytes"}, 
          "Code" -> {
           "\n\"=-/</-///\"{C*\"<\\/>\":S{1$W%\\_W%er}:F~+mrC<SF+}%N*S3%FN\\",
             "\n'='-\"\\/\"\"<>\"1$'-1$__]", 
            "\n{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n{                        }% \
\"Map this block onto each base string.\";\n C*                         \
\"Repeat it 12 times.\";\n   mr                       \"Shuffle it. This \
doesn't do anything on - and =.\";\n     C<                     \"Truncate it \
to 12 characters.\";\n       {_W%}:F              \"This defines a function F \
which duplicates and reverses\n                             the top of the \
stack. We'll need that a few times.\";\n              ~             \
\"Evaluate F to mirror the half-line.\";\n               \"\\<>/\"Fer    \
\"Swap \\ and / as well as < and >.\";\n                        +   \"Add the \
two half-lines to a full line.\";", 
            "\nN*F\"<>\"FerN\\\nN*           \"Join the lines with newline \
characters to create a single string.\";\n  F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n              the \
order of the lines as well as each line itself. This already takes\n          \
    care of correctly mirroring \\ and /, but gets < and > wrong.\";\n   \"<>\
\"Fer   \"Swap < and > again (only in the second half).\";\n          N\\ \
\"Push a newline and move it between the two halves of the quilt.\";"}, 
          "Format" -> "Markdown", "Date" -> 
          DateObject[{2015, 4, 17, 20, 3, 26}, "Instant", "Gregorian", "UTC"],
           "Text" -> 
          "# CJam, <s>61</s> <s>60</s> <s>58</s> 55 bytes\n\n\n\nShortened a \
bit with some help from Sp3000.\n\n\n\n    \
\"=-/</-///\"{C*\"<\\/>\":S{1$W%\\_W%er}:F~+mrC<SF+}%N*S3%FN\\\n\n\n\n[Test \
it here.][1]\n\n\n\n## Explanation\n\n\n\n*(Slightly outdated explanation. \
Will update later.)*\n\n\n\nAs usual with these symmetric ASCII art \
challenges, I'm generating one quadrant and then expand it to the full thing \
by two appropriate mirroring operations.\n\n\n\n    \
'='-\"\\/\"\"<>\"1$'-1$__]\n\n\n\nThis creates an array with all the \"base \
strings\" for each line. Since characters can be used as strings in many \
places, I'm only pushing a single character for the `---` and `===` lines. \
The `1$` copies the stack element just below the top one, which is `\"\\/\"` \
in both cases, and `_` copies the top stack element, which is again \
`\"\\/\"`.\n\n\n\nNext, we expand each of those base strings to a random \
half-line and then mirror it:\n\n\n\n    {C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n\n   \
 {                        }% \"Map this block onto each base string.\";\n\n   \
  C*                         \"Repeat it 12 times.\";\n\n       mr            \
           \"Shuffle it. This doesn't do anything on - and =.\";\n\n         \
C<                     \"Truncate it to 12 characters.\";\n\n           \
{_W%}:F              \"This defines a function F which duplicates and \
reverses\n\n                                 the top of the stack. We'll need \
that a few times.\";\n\n                  ~             \"Evaluate F to \
mirror the half-line.\";\n\n                   \"\\<>/\"Fer    \"Swap \\ and \
/ as well as < and >.\";\n\n                            +   \"Add the two \
half-lines to a full line.\";\n\n\n\nFinally we build the full quilt:\n\n\n\n \
   N*F\"<>\"FerN\\\n\n    N*           \"Join the lines with newline \
characters to create a single string.\";\n\n      F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n\n                  \
the order of the lines as well as each line itself. This already takes\n\n    \
              care of correctly mirroring \\ and /, but gets < and > \
wrong.\";\n\n       \"<>\"Fer   \"Swap < and > again (only in the second \
half).\";\n\n              N\\ \"Push a newline and move it between the two \
halves of the quilt.\";\n\n\n\n[1]: \
http://cjam.aditsu.net/#code=%22%3D-%2F%3C%2F-%2F%2F%2F%22%7BC*%22%3C%5C%2F%\
3E%22%3AS%7B1%24W%25%5C_W%25er%7D%3AF~%2BmrC%3CSF%2B%7D%25N*S3%25FN%5C", 
          "TitleString" -> "CJam, 55 bytes", "SimplifiedTitleString" -> 
          "CJam\[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
          Missing["NotAvailable"], "TitleCodeSnippets" -> 
          Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
          "ReportedSize" -> Quantity[55, "Bytes"], "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "cjam"], 
          "CodeSnippets" -> {
           "\n\"=-/</-///\"{C*\"<\\/>\":S{1$W%\\_W%er}:F~+mrC<SF+}%N*S3%FN\\",
             "\n'='-\"\\/\"\"<>\"1$'-1$__]", 
            "\n{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n{                        }% \
\"Map this block onto each base string.\";\n C*                         \
\"Repeat it 12 times.\";\n   mr                       \"Shuffle it. This \
doesn't do anything on - and =.\";\n     C<                     \"Truncate it \
to 12 characters.\";\n       {_W%}:F              \"This defines a function F \
which duplicates and reverses\n                             the top of the \
stack. We'll need that a few times.\";\n              ~             \
\"Evaluate F to mirror the half-line.\";\n               \"\\<>/\"Fer    \
\"Swap \\ and / as well as < and >.\";\n                        +   \"Add the \
two half-lines to a full line.\";", 
            "\nN*F\"<>\"FerN\\\nN*           \"Join the lines with newline \
characters to create a single string.\";\n  F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n              the \
order of the lines as well as each line itself. This already takes\n          \
    care of correctly mirroring \\ and /, but gets < and > wrong.\";\n   \"<>\
\"Fer   \"Swap < and > again (only in the second half).\";\n          N\\ \
\"Push a newline and move it between the two halves of the quilt.\";"}], 
         Association[
         "Title" -> {"CJam,     54 bytes"}, 
          "Code" -> {
           "\n\"=-/</-///\"{C*\"<\\/>\":S{1$W%\\_W%er}:F~+mrC<SFN}%:+S3%F(", 
            "\n'='-\"\\/\"\"<>\"1$'-1$__]", 
            "\n{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n{                        }% \
\"Map this block onto each base string.\";\n C*                         \
\"Repeat it 12 times.\";\n   mr                       \"Shuffle it. This \
doesn't do anything on - and =.\";\n     C<                     \"Truncate it \
to 12 characters.\";\n       {_W%}:F              \"This defines a function F \
which duplicates and reverses\n                             the top of the \
stack. We'll need that a few times.\";\n              ~             \
\"Evaluate F to mirror the half-line.\";\n               \"\\<>/\"Fer    \
\"Swap \\ and / as well as < and >.\";\n                        +   \"Add the \
two half-lines to a full line.\";", 
            "\nN*F\"<>\"FerN\\\nN*           \"Join the lines with newline \
characters to create a single string.\";\n  F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n              the \
order of the lines as well as each line itself. This already takes\n          \
    care of correctly mirroring \\ and /, but gets < and > wrong.\";\n   \"<>\
\"Fer   \"Swap < and > again (only in the second half).\";\n          N\\ \
\"Push a newline and move it between the two halves of the quilt.\";"}, 
          "Format" -> "Markdown", "Date" -> 
          DateObject[{2015, 4, 17, 20, 46, 35}, "Instant", "Gregorian", 
            "UTC"], "Text" -> 
          "# CJam, <s>61</s> <s>60</s> <s>58</s> <s>55</s> 54 bytes\n\n\n\n\
Shortened a bit with some help from Sp3000.\n\n\n\n    \
\"=-/</-///\"{C*\"<\\/>\":S{1$W%\\_W%er}:F~+mrC<SFN}%:+S3%F(\n\n\n\n[Test it \
here.][1]\n\n\n\n## Explanation\n\n\n\n*(Slightly outdated explanation. Will \
update later.)*\n\n\n\nAs usual with these symmetric ASCII art challenges, \
I'm generating one quadrant and then expand it to the full thing by two \
appropriate mirroring operations.\n\n\n\n    '='-\"\\/\"\"<>\"1$'-1$__]\n\n\n\
\nThis creates an array with all the \"base strings\" for each line. Since \
characters can be used as strings in many places, I'm only pushing a single \
character for the `---` and `===` lines. The `1$` copies the stack element \
just below the top one, which is `\"\\/\"` in both cases, and `_` copies the \
top stack element, which is again `\"\\/\"`.\n\n\n\nNext, we expand each of \
those base strings to a random half-line and then mirror it:\n\n\n\n    \
{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n\n    {                        }% \"Map this \
block onto each base string.\";\n\n     C*                         \"Repeat \
it 12 times.\";\n\n       mr                       \"Shuffle it. This doesn't \
do anything on - and =.\";\n\n         C<                     \"Truncate it \
to 12 characters.\";\n\n           {_W%}:F              \"This defines a \
function F which duplicates and reverses\n\n                                 \
the top of the stack. We'll need that a few times.\";\n\n                  ~  \
           \"Evaluate F to mirror the half-line.\";\n\n                   \
\"\\<>/\"Fer    \"Swap \\ and / as well as < and >.\";\n\n                    \
        +   \"Add the two half-lines to a full line.\";\n\n\n\nFinally we \
build the full quilt:\n\n\n\n    N*F\"<>\"FerN\\\n\n    N*           \"Join \
the lines with newline characters to create a single string.\";\n\n      F    \
      \"Duplicate and reverse the entire thing. Note that this reverse both\n\
\n                  the order of the lines as well as each line itself. This \
already takes\n\n                  care of correctly mirroring \\ and /, but \
gets < and > wrong.\";\n\n       \"<>\"Fer   \"Swap < and > again (only in \
the second half).\";\n\n              N\\ \"Push a newline and move it \
between the two halves of the quilt.\";\n\n\n\n[1]: \
http://cjam.aditsu.net/#code=%22%3D-%2F%3C%2F-%2F%2F%2F%22%7BC*%22%3C%5C%2F%\
3E%22%3AS%7B1%24W%25%5C_W%25er%7D%3AF~%2BmrC%3CSFN%7D%25%3A%2BS3%25F(", 
          "TitleString" -> "CJam, 54 bytes", "SimplifiedTitleString" -> 
          "CJam\[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
          Missing["NotAvailable"], "TitleCodeSnippets" -> 
          Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
          "ReportedSize" -> Quantity[54, "Bytes"], "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "cjam"], 
          "CodeSnippets" -> {
           "\n\"=-/</-///\"{C*\"<\\/>\":S{1$W%\\_W%er}:F~+mrC<SFN}%:+S3%F(", 
            "\n'='-\"\\/\"\"<>\"1$'-1$__]", 
            "\n{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n{                        }% \
\"Map this block onto each base string.\";\n C*                         \
\"Repeat it 12 times.\";\n   mr                       \"Shuffle it. This \
doesn't do anything on - and =.\";\n     C<                     \"Truncate it \
to 12 characters.\";\n       {_W%}:F              \"This defines a function F \
which duplicates and reverses\n                             the top of the \
stack. We'll need that a few times.\";\n              ~             \
\"Evaluate F to mirror the half-line.\";\n               \"\\<>/\"Fer    \
\"Swap \\ and / as well as < and >.\";\n                        +   \"Add the \
two half-lines to a full line.\";", 
            "\nN*F\"<>\"FerN\\\nN*           \"Join the lines with newline \
characters to create a single string.\";\n  F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n              the \
order of the lines as well as each line itself. This already takes\n          \
    care of correctly mirroring \\ and /, but gets < and > wrong.\";\n   \"<>\
\"Fer   \"Swap < and > again (only in the second half).\";\n          N\\ \
\"Push a newline and move it between the two halves of the quilt.\";"}], 
         Association[
         "Title" -> {"CJam,      52 bytes"}, 
          "Code" -> {
           "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%:+3F(", 
            "\n'='-\"\\/\"\"<>\"1$'-1$__]", 
            "\n{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n{                        }% \
\"Map this block onto each base string.\";\n C*                         \
\"Repeat it 12 times.\";\n   mr                       \"Shuffle it. This \
doesn't do anything on - and =.\";\n     C<                     \"Truncate it \
to 12 characters.\";\n       {_W%}:F              \"This defines a function F \
which duplicates and reverses\n                             the top of the \
stack. We'll need that a few times.\";\n              ~             \
\"Evaluate F to mirror the half-line.\";\n               \"\\<>/\"Fer    \
\"Swap \\ and / as well as < and >.\";\n                        +   \"Add the \
two half-lines to a full line.\";", 
            "\nN*F\"<>\"FerN\\\nN*           \"Join the lines with newline \
characters to create a single string.\";\n  F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n              the \
order of the lines as well as each line itself. This already takes\n          \
    care of correctly mirroring \\ and /, but gets < and > wrong.\";\n   \"<>\
\"Fer   \"Swap < and > again (only in the second half).\";\n          N\\ \
\"Push a newline and move it between the two halves of the quilt.\";"}, 
          "Format" -> "Markdown", "Date" -> 
          DateObject[{2015, 4, 18, 14, 59, 9}, "Instant", "Gregorian", "UTC"],
           "Text" -> 
          "# CJam, <s>61</s> <s>60</s> <s>58</s> <s>55</s> <s>54</s> 52 bytes\
\n\n\n\nShortened a bit with some help from Sp3000.\n\n\n\n    \
\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%:+3F(\n\n\n\n[Test it \
here.][1]\n\n\n\n## Explanation\n\n\n\n*(Slightly outdated explanation. Will \
update later.)*\n\n\n\nAs usual with these symmetric ASCII art challenges, \
I'm generating one quadrant and then expand it to the full thing by two \
appropriate mirroring operations.\n\n\n\n    '='-\"\\/\"\"<>\"1$'-1$__]\n\n\n\
\nThis creates an array with all the \"base strings\" for each line. Since \
characters can be used as strings in many places, I'm only pushing a single \
character for the `---` and `===` lines. The `1$` copies the stack element \
just below the top one, which is `\"\\/\"` in both cases, and `_` copies the \
top stack element, which is again `\"\\/\"`.\n\n\n\nNext, we expand each of \
those base strings to a random half-line and then mirror it:\n\n\n\n    \
{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n\n    {                        }% \"Map this \
block onto each base string.\";\n\n     C*                         \"Repeat \
it 12 times.\";\n\n       mr                       \"Shuffle it. This doesn't \
do anything on - and =.\";\n\n         C<                     \"Truncate it \
to 12 characters.\";\n\n           {_W%}:F              \"This defines a \
function F which duplicates and reverses\n\n                                 \
the top of the stack. We'll need that a few times.\";\n\n                  ~  \
           \"Evaluate F to mirror the half-line.\";\n\n                   \
\"\\<>/\"Fer    \"Swap \\ and / as well as < and >.\";\n\n                    \
        +   \"Add the two half-lines to a full line.\";\n\n\n\nFinally we \
build the full quilt:\n\n\n\n    N*F\"<>\"FerN\\\n\n    N*           \"Join \
the lines with newline characters to create a single string.\";\n\n      F    \
      \"Duplicate and reverse the entire thing. Note that this reverse both\n\
\n                  the order of the lines as well as each line itself. This \
already takes\n\n                  care of correctly mirroring \\ and /, but \
gets < and > wrong.\";\n\n       \"<>\"Fer   \"Swap < and > again (only in \
the second half).\";\n\n              N\\ \"Push a newline and move it \
between the two halves of the quilt.\";\n\n\n\n[1]: \
http://cjam.aditsu.net/#code=%22%3D-%2F%3C%2F-%2F%2F%2F%22%7BC*1%7B%22%3C%5C%\
2F%3E%22%251%24W%25%5C_W%25er%7D%3AF~%2BmrC%3C1FN%7D%25%3A%2B3F(", 
          "TitleString" -> "CJam, 52 bytes", "SimplifiedTitleString" -> 
          "CJam\[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
          Missing["NotAvailable"], "TitleCodeSnippets" -> 
          Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
          "ReportedSize" -> Quantity[52, "Bytes"], "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "cjam"], 
          "CodeSnippets" -> {
           "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%:+3F(", 
            "\n'='-\"\\/\"\"<>\"1$'-1$__]", 
            "\n{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%\n{                        }% \
\"Map this block onto each base string.\";\n C*                         \
\"Repeat it 12 times.\";\n   mr                       \"Shuffle it. This \
doesn't do anything on - and =.\";\n     C<                     \"Truncate it \
to 12 characters.\";\n       {_W%}:F              \"This defines a function F \
which duplicates and reverses\n                             the top of the \
stack. We'll need that a few times.\";\n              ~             \
\"Evaluate F to mirror the half-line.\";\n               \"\\<>/\"Fer    \
\"Swap \\ and / as well as < and >.\";\n                        +   \"Add the \
two half-lines to a full line.\";", 
            "\nN*F\"<>\"FerN\\\nN*           \"Join the lines with newline \
characters to create a single string.\";\n  F          \"Duplicate and \
reverse the entire thing. Note that this reverse both\n              the \
order of the lines as well as each line itself. This already takes\n          \
    care of correctly mirroring \\ and /, but gets < and > wrong.\";\n   \"<>\
\"Fer   \"Swap < and > again (only in the second half).\";\n          N\\ \
\"Push a newline and move it between the two halves of the quilt.\";"}], 
         Association[
         "Title" -> {"CJam,      52 bytes"}, 
          "Code" -> {
           "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%:+3F(", 
            "\n{\"<\\/>\"%1$W%\\_W%er}:F", 
            "\n\"<\\/>\"            \"Push a string with all four relevant \
characters.\";\n      %           \"% applied to a string and an integer N \
(in any order) selects every\n                   Nth character, starting from \
the first. So with N = 1 this just\n                   leaves the string \
unchanged, but with N = 3 it returns a string\n                   containing \
only < and >.\";\n       1$         \"Copy the string we want to mirror.\";\n \
        W%       \"% also takes negative arguments. Giving it -1 reverses the \
string.\";\n           \\_     \"Swap the two strings and duplicate the <\\/> \
or <> string.\";\n             W%   \"Reverse that one. Due to the symmetry \
of this string, we'll now\n                   have the characters to be \
swapped at corresponding indices.\";\n               er \"Perform \
element-wise transliteration on the reversed input string\n                   \
to complete the mirroring operation.\";", 
            "\n\"=-/</-///\"                            \"This string encodes \
the 9 different line types.\n                                        Note \
that for the /\\ and <> lines we only use\n                                   \
     one of the charactrs. This idea is due to\n                              \
          Sp3000. Thanks! :)\";\n           {                   }%      \"Map \
this block onto the characters.\";\n            C*                         \
\"Repeat the character 12 times, turning it into\n                            \
            a string.\";\n              1{...}:F~                \"Define a \
call F on the resulting string. The\n                                        \
reversal doesn't do anything, but the character\n                             \
           swapping creates strings containing both \\/ and\n                 \
                       <>.\";\n                       +mr             \"Add \
the two halves together and shuffle them.\";\n                          C<    \
       \"Truncate to 12 characters. We've now got our\n                       \
                 random half-lines.\";\n                            1F        \
 \"Call F again to mirror the half-line.\";\n                              N  \
      \"Push a newline.\";\n                                 :+    \"Join all \
those separate strings together.\";\n                                   3F  \
\"Perform one more mirroring operation on the\n                               \
         half-quilt, but this time only swap < and >.\n                       \
                 This yields the correct full quilt, except\n                 \
                       there are two newline in the centre.\";\n              \
                       ( \"This slices the leading newline off the second\n   \
                                     half and pushes it on the stack.\";"}, 
          "Format" -> "Markdown", "Date" -> 
          DateObject[{2015, 4, 18, 15, 22, 17}, "Instant", "Gregorian", 
            "UTC"], "Text" -> 
          "# CJam, <s>61</s> <s>60</s> <s>58</s> <s>55</s> <s>54</s> 52 bytes\
\n\n\n\nShortened a bit with some help from Sp3000.\n\n\n\n    \
\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%:+3F(\n\n\n\n[Test it \
here.][1]\n\n\n\n## Explanation\n\n\n\nAs usual with these symmetric ASCII \
art challenges, I'm generating one quadrant and then expand it to the full \
thing by two appropriate mirroring operations.\n\n\n\nFor this explanation I \
should start with the function `F`, I'm defining somewhere along the way, \
because it's used in three places for three different things:\n\n\n\n    {\"<\
\\/>\"%1$W%\\_W%er}:F\n\n\n\nThis expects an integer on the top of the stack, \
and a string beneath that. It's purpose is to reverse the string and also \
swap some characters, to get the mirroring right. The integer is either `1` \
or `3` and indicates whether (`1`) both brackets and slashes should be \
swapped or (`3`) only brackets should be swapped. Here is how it works:\n\n\n\
\n    \"<\\/>\"            \"Push a string with all four relevant characters.\
\";\n\n          %           \"% applied to a string and an integer N (in any \
order) selects every\n\n                       Nth character, starting from \
the first. So with N = 1 this just\n\n                       leaves the \
string unchanged, but with N = 3 it returns a string\n\n                      \
 containing only < and >.\";\n\n           1$         \"Copy the string we \
want to mirror.\";\n\n             W%       \"% also takes negative \
arguments. Giving it -1 reverses the string.\";\n\n               \\_     \
\"Swap the two strings and duplicate the <\\/> or <> string.\";\n\n           \
      W%   \"Reverse that one. Due to the symmetry of this string, we'll now\n\
\n                       have the characters to be swapped at corresponding \
indices.\";\n\n                   er \"Perform element-wise transliteration \
on the reversed input string\n\n                       to complete the \
mirroring operation.\";\n\n\n\nNow for the rest of the code:\n\n\n\n    \
\"=-/</-///\"                            \"This string encodes the 9 \
different line types.\n\n                                            Note \
that for the /\\ and <> lines we only use\n\n                                 \
           one of the charactrs. This idea is due to\n\n                      \
                      Sp3000. Thanks! :)\";\n\n               {               \
    }%      \"Map this block onto the characters.\";\n\n                C*    \
                     \"Repeat the character 12 times, turning it into\n\n     \
                                       a string.\";\n\n                  \
1{...}:F~                \"Define a call F on the resulting string. The\n\n   \
                                         reversal doesn't do anything, but \
the character\n\n                                            swapping creates \
strings containing both \\/ and\n\n                                           \
 <>.\";\n\n                           +mr             \"Add the two halves \
together and shuffle them.\";\n\n                              C<           \
\"Truncate to 12 characters. We've now got our\n\n                            \
                random half-lines.\";\n\n                                1F   \
      \"Call F again to mirror the half-line.\";\n\n                          \
        N        \"Push a newline.\";\n\n                                     \
:+    \"Join all those separate strings together.\";\n\n                      \
                 3F  \"Perform one more mirroring operation on the\n\n        \
                                    half-quilt, but this time only swap < and \
>.\n\n                                            This yields the correct \
full quilt, except\n\n                                            there are \
two newline in the centre.\";\n\n                                         ( \
\"This slices the leading newline off the second\n\n                          \
                  half and pushes it on the stack.\";\n\n\n\nThe two halves \
and that single newline are then printed automatically at the end of the \
program.\n\n\n\n[1]: \
http://cjam.aditsu.net/#code=%22%3D-%2F%3C%2F-%2F%2F%2F%22%7BC*1%7B%22%3C%5C%\
2F%3E%22%251%24W%25%5C_W%25er%7D%3AF~%2BmrC%3C1FN%7D%25%3A%2B3F(", 
          "TitleString" -> "CJam, 52 bytes", "SimplifiedTitleString" -> 
          "CJam\[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
          Missing["NotAvailable"], "TitleCodeSnippets" -> 
          Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
          "ReportedSize" -> Quantity[52, "Bytes"], "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "cjam"], 
          "CodeSnippets" -> {
           "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%:+3F(", 
            "\n{\"<\\/>\"%1$W%\\_W%er}:F", 
            "\n\"<\\/>\"            \"Push a string with all four relevant \
characters.\";\n      %           \"% applied to a string and an integer N \
(in any order) selects every\n                   Nth character, starting from \
the first. So with N = 1 this just\n                   leaves the string \
unchanged, but with N = 3 it returns a string\n                   containing \
only < and >.\";\n       1$         \"Copy the string we want to mirror.\";\n \
        W%       \"% also takes negative arguments. Giving it -1 reverses the \
string.\";\n           \\_     \"Swap the two strings and duplicate the <\\/> \
or <> string.\";\n             W%   \"Reverse that one. Due to the symmetry \
of this string, we'll now\n                   have the characters to be \
swapped at corresponding indices.\";\n               er \"Perform \
element-wise transliteration on the reversed input string\n                   \
to complete the mirroring operation.\";", 
            "\n\"=-/</-///\"                            \"This string encodes \
the 9 different line types.\n                                        Note \
that for the /\\ and <> lines we only use\n                                   \
     one of the charactrs. This idea is due to\n                              \
          Sp3000. Thanks! :)\";\n           {                   }%      \"Map \
this block onto the characters.\";\n            C*                         \
\"Repeat the character 12 times, turning it into\n                            \
            a string.\";\n              1{...}:F~                \"Define a \
call F on the resulting string. The\n                                        \
reversal doesn't do anything, but the character\n                             \
           swapping creates strings containing both \\/ and\n                 \
                       <>.\";\n                       +mr             \"Add \
the two halves together and shuffle them.\";\n                          C<    \
       \"Truncate to 12 characters. We've now got our\n                       \
                 random half-lines.\";\n                            1F        \
 \"Call F again to mirror the half-line.\";\n                              N  \
      \"Push a newline.\";\n                                 :+    \"Join all \
those separate strings together.\";\n                                   3F  \
\"Perform one more mirroring operation on the\n                               \
         half-quilt, but this time only swap < and >.\n                       \
                 This yields the correct full quilt, except\n                 \
                       there are two newline in the centre.\";\n              \
                       ( \"This slices the leading newline off the second\n   \
                                     half and pushes it on the stack.\";"}], 
         Association[
         "Title" -> {"CJam,       51 bytes"}, 
          "Code" -> {
           "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%s3F(", 
            "\n{\"<\\/>\"%1$W%\\_W%er}:F", 
            "\n\"<\\/>\"            \"Push a string with all four relevant \
characters.\";\n      %           \"% applied to a string and an integer N \
(in any order) selects every\n                   Nth character, starting from \
the first. So with N = 1 this just\n                   leaves the string \
unchanged, but with N = 3 it returns a string\n                   containing \
only < and >.\";\n       1$         \"Copy the string we want to mirror.\";\n \
        W%       \"% also takes negative arguments. Giving it -1 reverses the \
string.\";\n           \\_     \"Swap the two strings and duplicate the <\\/> \
or <> string.\";\n             W%   \"Reverse that one. Due to the symmetry \
of this string, we'll now\n                   have the characters to be \
swapped at corresponding indices.\";\n               er \"Perform \
element-wise transliteration on the reversed input string\n                   \
to complete the mirroring operation.\";", 
            "\n\"=-/</-///\"                            \"This string encodes \
the 9 different line types.\n                                        Note \
that for the /\\ and <> lines we only use\n                                   \
     one of the characters. This idea is due to\n                             \
           Sp3000. Thanks! :)\";\n           {                   }%      \
\"Map this block onto the characters.\";\n            C*                      \
   \"Repeat the character 12 times, turning it into\n                         \
               a string.\";\n              1{...}:F~                \"Define \
and call F on the resulting string. The\n                                     \
   reversal doesn't do anything, but the character\n                          \
              swapping creates strings containing both \\/ and\n              \
                          <>.\";\n                       +mr             \
\"Add the two halves together and shuffle them.\";\n                          \
C<           \"Truncate to 12 characters. We've now got our\n                 \
                       random half-lines.\";\n                            1F  \
       \"Call F again to mirror the half-line.\";\n                           \
   N        \"Push a newline.\";\n                                 s     \
\"Join all those separate strings together by\n                               \
         converting the array to a string.\";\n                               \
   3F   \"Perform one more mirroring operation on the\n                       \
                 half-quilt, but this time only swap < and >.\n               \
                         This yields the correct full quilt, except\n         \
                               there are two newlines in the centre.\";\n     \
                               (  \"This slices the leading newline off the \
second\n                                        half and pushes it onto the \
stack.\";"}, "Format" -> "Markdown", "Date" -> 
          DateObject[{2015, 4, 18, 15, 31, 43}, "Instant", "Gregorian", 
            "UTC"], "Text" -> 
          "# CJam, <s>61</s> <s>60</s> <s>58</s> <s>55</s> <s>54</s> \
<s>52</s> 51 bytes\n\n\n\nShortened a bit with some help from Sp3000 and \
Optimizer.\n\n\n\n    \
\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%s3F(\n\n\n\n[Test it \
here.][1]\n\n\n\n## Explanation\n\n\n\nAs usual with these symmetric ASCII \
art challenges, I'm generating one quadrant and then expand it to the full \
thing by two appropriate mirroring operations.\n\n\n\nFor this explanation I \
should start with the function `F`, I'm defining somewhere along the way, \
because it's used in three places for three different things:\n\n\n\n    {\"<\
\\/>\"%1$W%\\_W%er}:F\n\n\n\nThis expects an integer on the top of the stack, \
and a string beneath that. It's purpose is to reverse the string and also \
swap some characters, to get the mirroring right. The integer is either `1` \
or `3` and indicates whether (`1`) both brackets and slashes should be \
swapped or (`3`) only brackets should be swapped. Here is how it works:\n\n\n\
\n    \"<\\/>\"            \"Push a string with all four relevant characters.\
\";\n\n          %           \"% applied to a string and an integer N (in any \
order) selects every\n\n                       Nth character, starting from \
the first. So with N = 1 this just\n\n                       leaves the \
string unchanged, but with N = 3 it returns a string\n\n                      \
 containing only < and >.\";\n\n           1$         \"Copy the string we \
want to mirror.\";\n\n             W%       \"% also takes negative \
arguments. Giving it -1 reverses the string.\";\n\n               \\_     \
\"Swap the two strings and duplicate the <\\/> or <> string.\";\n\n           \
      W%   \"Reverse that one. Due to the symmetry of this string, we'll now\n\
\n                       have the characters to be swapped at corresponding \
indices.\";\n\n                   er \"Perform element-wise transliteration \
on the reversed input string\n\n                       to complete the \
mirroring operation.\";\n\n\n\nNow for the rest of the code:\n\n\n\n    \
\"=-/</-///\"                            \"This string encodes the 9 \
different line types.\n\n                                            Note \
that for the /\\ and <> lines we only use\n\n                                 \
           one of the characters. This idea is due to\n\n                     \
                       Sp3000. Thanks! :)\";\n\n               {              \
     }%      \"Map this block onto the characters.\";\n\n                C*   \
                      \"Repeat the character 12 times, turning it into\n\n    \
                                        a string.\";\n\n                  \
1{...}:F~                \"Define and call F on the resulting string. The\n\n \
                                           reversal doesn't do anything, but \
the character\n\n                                            swapping creates \
strings containing both \\/ and\n\n                                           \
 <>.\";\n\n                           +mr             \"Add the two halves \
together and shuffle them.\";\n\n                              C<           \
\"Truncate to 12 characters. We've now got our\n\n                            \
                random half-lines.\";\n\n                                1F   \
      \"Call F again to mirror the half-line.\";\n\n                          \
        N        \"Push a newline.\";\n\n                                     \
s     \"Join all those separate strings together by\n\n                       \
                     converting the array to a string.\";\n\n                 \
                     3F   \"Perform one more mirroring operation on the\n\n   \
                                         half-quilt, but this time only swap \
< and >.\n\n                                            This yields the \
correct full quilt, except\n\n                                            \
there are two newlines in the centre.\";\n\n                                  \
      (  \"This slices the leading newline off the second\n\n                 \
                           half and pushes it onto the stack.\";\n\n\n\nThe \
two halves and that single newline are then printed automatically at the end \
of the program.\n\n\n\n[1]: \
http://cjam.aditsu.net/#code=%22%3D-%2F%3C%2F-%2F%2F%2F%22%7BC*1%7B%22%3C%5C%\
2F%3E%22%251%24W%25%5C_W%25er%7D%3AF~%2BmrC%3C1FN%7D%25s3F(", "TitleString" -> 
          "CJam, 51 bytes", "SimplifiedTitleString" -> 
          "CJam\[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
          Missing["NotAvailable"], "TitleCodeSnippets" -> 
          Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
          "ReportedSize" -> Quantity[51, "Bytes"], "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "cjam"], 
          "CodeSnippets" -> {
           "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%s3F(", 
            "\n{\"<\\/>\"%1$W%\\_W%er}:F", 
            "\n\"<\\/>\"            \"Push a string with all four relevant \
characters.\";\n      %           \"% applied to a string and an integer N \
(in any order) selects every\n                   Nth character, starting from \
the first. So with N = 1 this just\n                   leaves the string \
unchanged, but with N = 3 it returns a string\n                   containing \
only < and >.\";\n       1$         \"Copy the string we want to mirror.\";\n \
        W%       \"% also takes negative arguments. Giving it -1 reverses the \
string.\";\n           \\_     \"Swap the two strings and duplicate the <\\/> \
or <> string.\";\n             W%   \"Reverse that one. Due to the symmetry \
of this string, we'll now\n                   have the characters to be \
swapped at corresponding indices.\";\n               er \"Perform \
element-wise transliteration on the reversed input string\n                   \
to complete the mirroring operation.\";", 
            "\n\"=-/</-///\"                            \"This string encodes \
the 9 different line types.\n                                        Note \
that for the /\\ and <> lines we only use\n                                   \
     one of the characters. This idea is due to\n                             \
           Sp3000. Thanks! :)\";\n           {                   }%      \
\"Map this block onto the characters.\";\n            C*                      \
   \"Repeat the character 12 times, turning it into\n                         \
               a string.\";\n              1{...}:F~                \"Define \
and call F on the resulting string. The\n                                     \
   reversal doesn't do anything, but the character\n                          \
              swapping creates strings containing both \\/ and\n              \
                          <>.\";\n                       +mr             \
\"Add the two halves together and shuffle them.\";\n                          \
C<           \"Truncate to 12 characters. We've now got our\n                 \
                       random half-lines.\";\n                            1F  \
       \"Call F again to mirror the half-line.\";\n                           \
   N        \"Push a newline.\";\n                                 s     \
\"Join all those separate strings together by\n                               \
         converting the array to a string.\";\n                               \
   3F   \"Perform one more mirroring operation on the\n                       \
                 half-quilt, but this time only swap < and >.\n               \
                         This yields the correct full quilt, except\n         \
                               there are two newlines in the centre.\";\n     \
                               (  \"This slices the leading newline off the \
second\n                                        half and pushes it onto the \
stack.\";"}], 
         Association[
         "Title" -> {"CJam,       51 bytes"}, 
          "Code" -> {
           "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%s3F(", 
            "\n{\"<\\/>\"%1$W%\\_W%er}:F", 
            "\n\"<\\/>\"            \"Push a string with all four relevant \
characters.\";\n      %           \"% applied to a string and an integer N \
(in any order) selects every\n                   Nth character, starting from \
the first. So with N = 1 this just\n                   leaves the string \
unchanged, but with N = 3 it returns a string\n                   containing \
only < and >.\";\n       1$         \"Copy the string we want to mirror.\";\n \
        W%       \"% also takes negative arguments. Giving it -1 reverses the \
string.\";\n           \\_     \"Swap the two strings and duplicate the <\\/> \
or <> string.\";\n             W%   \"Reverse that one. Due to the symmetry \
of this string, we'll now\n                   have the characters to be \
swapped at corresponding indices.\";\n               er \"Perform \
element-wise transliteration on the reversed input string\n                   \
to complete the mirroring operation.\";", 
            "\n\"=-/</-///\"                            \"This string encodes \
the 9 different line types.\n                                        Note \
that for the /\\ and <> lines we only use\n                                   \
     one of the characters. This idea is due to\n                             \
           Sp3000. Thanks! :)\";\n           {                   }%      \
\"Map this block onto the characters.\";\n            C*                      \
   \"Repeat the character 12 times, turning it into\n                         \
               a string.\";\n              1{...}:F~                \"Define \
and call F on the resulting string. The\n                                     \
   reversal doesn't do anything, but the character\n                          \
              swapping creates strings containing both \\/ and\n              \
                          <>.\";\n                       +mr             \
\"Add the two halves together and shuffle them.\";\n                          \
C<           \"Truncate to 12 characters. We've now got our\n                 \
                       random half-lines.\";\n                            1F  \
       \"Call F again to mirror the half-line.\";\n                           \
   N        \"Push a newline.\";\n                                 s     \
\"Join all those separate strings together by\n                               \
         converting the array to a string.\";\n                               \
   3F   \"Perform one more mirroring operation on the\n                       \
                 half-quilt, but this time only swap < and >.\n               \
                         This yields the correct full quilt, except\n         \
                               there are two newlines in the centre.\";\n     \
                               (  \"This slices the leading newline off the \
second\n                                        half and pushes it onto the \
stack.\";"}, "Format" -> "Markdown", "Date" -> 
          DateObject[{2015, 4, 18, 15, 46, 40}, "Instant", "Gregorian", 
            "UTC"], "Text" -> 
          "# CJam, <s>61</s> <s>60</s> <s>58</s> <s>55</s> <s>54</s> \
<s>52</s> 51 bytes\n\n\n\nShortened a bit with some help from Sp3000 and \
Optimizer.\n\n\n\n    \
\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%s3F(\n\n\n\n[Test it \
here.][1]\n\n\n\n## Explanation\n\n\n\nAs usual with these symmetric ASCII \
art challenges, I'm generating one quadrant and then expand it to the full \
thing by two appropriate mirroring operations.\n\n\n\nFor this explanation I \
should start with the function `F`, which I'm defining somewhere along the \
way, because it's used in three places for three different things:\n\n\n\n    \
{\"<\\/>\"%1$W%\\_W%er}:F\n\n\n\nThis expects an integer on the top of the \
stack, and a string beneath that. Its purpose is to reverse the string and \
also swap some characters, to get the mirroring right. The integer is either \
`1` or `3` and indicates whether (`1`) both brackets and slashes should be \
swapped or (`3`) only brackets should be swapped. Here is how it works:\n\n\n\
\n    \"<\\/>\"            \"Push a string with all four relevant characters.\
\";\n\n          %           \"% applied to a string and an integer N (in any \
order) selects every\n\n                       Nth character, starting from \
the first. So with N = 1 this just\n\n                       leaves the \
string unchanged, but with N = 3 it returns a string\n\n                      \
 containing only < and >.\";\n\n           1$         \"Copy the string we \
want to mirror.\";\n\n             W%       \"% also takes negative \
arguments. Giving it -1 reverses the string.\";\n\n               \\_     \
\"Swap the two strings and duplicate the <\\/> or <> string.\";\n\n           \
      W%   \"Reverse that one. Due to the symmetry of this string, we'll now\n\
\n                       have the characters to be swapped at corresponding \
indices.\";\n\n                   er \"Perform element-wise transliteration \
on the reversed input string\n\n                       to complete the \
mirroring operation.\";\n\n\n\nNow for the rest of the code:\n\n\n\n    \
\"=-/</-///\"                            \"This string encodes the 9 \
different line types.\n\n                                            Note \
that for the /\\ and <> lines we only use\n\n                                 \
           one of the characters. This idea is due to\n\n                     \
                       Sp3000. Thanks! :)\";\n\n               {              \
     }%      \"Map this block onto the characters.\";\n\n                C*   \
                      \"Repeat the character 12 times, turning it into\n\n    \
                                        a string.\";\n\n                  \
1{...}:F~                \"Define and call F on the resulting string. The\n\n \
                                           reversal doesn't do anything, but \
the character\n\n                                            swapping creates \
strings containing both \\/ and\n\n                                           \
 <>.\";\n\n                           +mr             \"Add the two halves \
together and shuffle them.\";\n\n                              C<           \
\"Truncate to 12 characters. We've now got our\n\n                            \
                random half-lines.\";\n\n                                1F   \
      \"Call F again to mirror the half-line.\";\n\n                          \
        N        \"Push a newline.\";\n\n                                     \
s     \"Join all those separate strings together by\n\n                       \
                     converting the array to a string.\";\n\n                 \
                     3F   \"Perform one more mirroring operation on the\n\n   \
                                         half-quilt, but this time only swap \
< and >.\n\n                                            This yields the \
correct full quilt, except\n\n                                            \
there are two newlines in the centre.\";\n\n                                  \
      (  \"This slices the leading newline off the second\n\n                 \
                           half and pushes it onto the stack.\";\n\n\n\nThe \
two halves and that single newline are then printed automatically at the end \
of the program.\n\n\n\n[1]: \
http://cjam.aditsu.net/#code=%22%3D-%2F%3C%2F-%2F%2F%2F%22%7BC*1%7B%22%3C%5C%\
2F%3E%22%251%24W%25%5C_W%25er%7D%3AF~%2BmrC%3C1FN%7D%25s3F(", "TitleString" -> 
          "CJam, 51 bytes", "SimplifiedTitleString" -> 
          "CJam\[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD] \
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
          Missing["NotAvailable"], "TitleCodeSnippets" -> 
          Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
          "ReportedSize" -> Quantity[51, "Bytes"], "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "cjam"], 
          "CodeSnippets" -> {
           "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%s3F(", 
            "\n{\"<\\/>\"%1$W%\\_W%er}:F", 
            "\n\"<\\/>\"            \"Push a string with all four relevant \
characters.\";\n      %           \"% applied to a string and an integer N \
(in any order) selects every\n                   Nth character, starting from \
the first. So with N = 1 this just\n                   leaves the string \
unchanged, but with N = 3 it returns a string\n                   containing \
only < and >.\";\n       1$         \"Copy the string we want to mirror.\";\n \
        W%       \"% also takes negative arguments. Giving it -1 reverses the \
string.\";\n           \\_     \"Swap the two strings and duplicate the <\\/> \
or <> string.\";\n             W%   \"Reverse that one. Due to the symmetry \
of this string, we'll now\n                   have the characters to be \
swapped at corresponding indices.\";\n               er \"Perform \
element-wise transliteration on the reversed input string\n                   \
to complete the mirroring operation.\";", 
            "\n\"=-/</-///\"                            \"This string encodes \
the 9 different line types.\n                                        Note \
that for the /\\ and <> lines we only use\n                                   \
     one of the characters. This idea is due to\n                             \
           Sp3000. Thanks! :)\";\n           {                   }%      \
\"Map this block onto the characters.\";\n            C*                      \
   \"Repeat the character 12 times, turning it into\n                         \
               a string.\";\n              1{...}:F~                \"Define \
and call F on the resulting string. The\n                                     \
   reversal doesn't do anything, but the character\n                          \
              swapping creates strings containing both \\/ and\n              \
                          <>.\";\n                       +mr             \
\"Add the two halves together and shuffle them.\";\n                          \
C<           \"Truncate to 12 characters. We've now got our\n                 \
                       random half-lines.\";\n                            1F  \
       \"Call F again to mirror the half-line.\";\n                           \
   N        \"Push a newline.\";\n                                 s     \
\"Join all those separate strings together by\n                               \
         converting the array to a string.\";\n                               \
   3F   \"Perform one more mirroring operation on the\n                       \
                 half-quilt, but this time only swap < and >.\n               \
                         This yields the correct full quilt, except\n         \
                               there are two newlines in the centre.\";\n     \
                               (  \"This slices the leading newline off the \
second\n                                        half and pushes it onto the \
stack.\";"}]}}, {{{3638239187, 3638239552, 3638240563, 3638274532, 3638275406,
        3638277995, 3638343549, 3638344937, 3638345503, 3638346400}}}, 1, {
       "Discrete", 1}, {"Discrete", 1}, 1, {
       ValueDimensions -> 1, DateFunction -> Automatic, ResamplingMethod -> 
        None}}, True, 12.],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{
    TemplateBox[{TemplateBox[{
        TemplateBox[{1}, "Spacer1"], 
        "\"A: [Lars Ebert] PHP, 408, 407, 402, 387, 379 bytes\\nI am not a \
good\[Ellipsis]\"", 
        TemplateBox[{
          TagBox[
           TooltipBox[
            StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
            "\"Open\"", LabelStyle -> "TextStyling"], 
           Annotation[#, "Open", "Tooltip"]& ], 
          "https://codegolf.stackexchange.com/q/48946"}, "HyperlinkURL"]}, 
       "RowWithSeparator"],RowBox[{"Entity", "[", 
        RowBox[{"\"StackExchange.Codegolf:Post\"", ",", "\"48946\""}], "]"}],
      "\"Entity[\\\"StackExchange.Codegolf:Post\\\", \\\"48946\\\"]\"",
      "\"codegolf:Post\""},
     "Entity"], "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["EventSeries",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{{}, 
                 
                 GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                  0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                  2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {
                  2., 0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                  1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                  1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                  2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
                1, Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
                Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, 
                Method -> {
                 "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                  Scaled[0.1]}, 
                PlotRange -> {{1., 5.}, {0.8225923764690866, 
                 2.2418867917949643`}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"17 Apr 2015\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"20 Apr 2015\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{{}, 
                 
                 GraphicsComplexBox[{{1., 1.0786974808168008`}, {2., 
                  0.8225923764690866}, {3., 1.2351515192384148`}, {4., 
                  2.175007457486014}, {5., 2.2418867917949643`}, {1., 0.}, {
                  2., 0.}, {3., 0.}, {4., 0.}, {5., 0.}, {1., 
                  1.0786974808168008`}, {2., 0.8225923764690866}, {3., 
                  1.2351515192384148`}, {4., 2.175007457486014}, {5., 
                  2.2418867917949643`}}, {{{}, {}, {}, {}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    Opacity[0.5], 
                    LineBox[{6, 1}], 
                    LineBox[{7, 2}], 
                    LineBox[{8, 3}], 
                    LineBox[{9, 4}], 
                    LineBox[{10, 5}]}}, {{}, {
                    GrayLevel[0.5], 
                    PointSize[0.125], 
                    AbsoluteThickness[1.6], 
                    PointBox[{11, 12, 13, 14, 15}]}, {}}}], {}}, AspectRatio -> 
                1, Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0.32700000000000007`, 0.136688848545716}, 
                Background -> GrayLevel[0.93], DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                  GrayLevel[0.5, 0.4]], ImageSize -> {Automatic, 
                  Dynamic[
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, 
                Method -> {
                 "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> {
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.880722, 0.611041, 0.142051]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.560181, 0.691569, 0.194885]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.922526, 0.385626, 0.209179]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.528488, 0.470624, 0.701351]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.772079, 0.431554, 0.102387]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.363898, 0.618501, 0.782349]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.75, 0]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.647624, 0.37816, 0.614037]], 
                    Directive[
                    AbsoluteThickness[1.6], 
                    RGBColor[0.571589, 0.586483, 0.]]}, "RangePadding" -> 
                  Scaled[0.1]}, 
                PlotRange -> {{1., 5.}, {0.8225923764690866, 
                 2.2418867917949643`}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {Automatic, Automatic}], 
               GridBox[{{
                  TagBox[
                   TemplateBox[{
                    RowBox[{
                    TagBox["\"Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"17 Apr 2015\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\" to \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"20 Apr 2015\"", "SummaryItem"]}]}, 
                    "RowDefault"], "SummaryItem"], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Data points: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Regular: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}], 
                  RowBox[{
                    TagBox["\"Output dimension: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Metadata: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}], 
                  RowBox[{
                    TagBox[
                    "\"Minimum increment: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["307", "17280"], ",", "\"Day\""}], "}"}], 
                    "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     TemporalData[EventSeries, {{{
         Association[
         "Title" -> {"PHP,  407 bytes"}, 
          "Code" -> {
           "\n<?function a($t){return \
strrev(str_replace(['/','<','\\\\','>','a','b'],['a','b','/','<','\\\\','>'],$\
t));}function \
b($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return$s;}$a=[str_\
repeat('=',12),str_repeat('-', \
12),b(12,'/','\\\\'),b(12,'<','>'),b(12,'/','\\\\'),str_repeat('-',12)];while(\
count($a)<9){$a[]=b(12,'/','\\\\');}for($b=8;$b>=0;$b--){$a[$b].=a($a[$b]);$a[\
]=strrev($a[$b]);}echo implode(\"\\n\",$a);", 
            "\n<?php\n \n function mirror($t) {\n  return \
strrev(str_replace(array('/', '<', '\\\\', '>', 'a', 'b'), array('a', 'b', \
'/', '<', '\\\\', '>'), $t));\n }\n \n function randomString($length, $a, $b) \
{\n  $string = '';\n  while(strlen($string) < $length) {\n   $string .= \
rand(0, 1) ? $a : $b;\n  }\n  return $string;\n }\n \n if(isset($argv[1])) {\n\
  srand(intval($argv[1]));\n }\n \n $lines = [\n  str_repeat('=', 12),\n  \
str_repeat('-', 12),\n  randomString(12, '/', '\\\\'),\n  randomString(12, \
'<', '>'),\n  randomString(12, '/', '\\\\'),\n  str_repeat('-', 12)\n ];\n \
while(count($lines) < 9) {\n  $lines[] = randomString(12, '/', '\\\\');\n }\n \
\n for($index = count($lines) - 1; $index >= 0; $index--) {\n  $lines[$index] \
.= mirror($lines[$index]);\n  $lines[] = strrev($lines[$index]);\n }\n \n \
echo implode(\"\\n\", $lines) . \"\\n\";\n \n?>", "\nphp quilt.php 48937", 
            "\n========================\n------------------------\n\
\\//\\//\\/\\\\/\\/\\//\\/\\\\/\\\\/\n<<>>><>><<<<>>>><<><<<>>\n\\/\\//////\\\
\\\\///\\\\\\\\\\\\/\\/\n------------------------\n\\\\\\\\\\/\\/\\/\\/\\/\\/\
\\/\\/////\n/\\/\\\\/\\\\\\\\\\/\\/////\\//\\/\\\n///\\///\\//\\\\//\\\\/\\\\\
\\/\\\\\\\n\\\\\\/\\\\\\/\\\\//\\\\//\\///\\///\n\\/\\//\\/////\\/\\\\\\\\\\/\
\\\\/\\/\n/////\\/\\/\\/\\/\\/\\/\\/\\\\\\\\\\\n------------------------\n\
/\\/\\\\\\\\\\\\///\\\\\\//////\\/\\\n>><<<><<>>>><<<<>><>>><<\n\
/\\\\/\\\\/\\//\\/\\/\\\\/\\//\\//\\\n------------------------"}, "Format" -> 
          "Markdown", "Date" -> 
          DateObject[{2015, 4, 17, 12, 11, 23}, "Instant", "Gregorian", 
            "UTC"], "Text" -> 
          "#PHP, <strike>408</strike> 407 bytes\n\n\n\nI am not a good \
golfer, but this problem sounded fun so I gave it a try.\n\n\n\n<!-- \
language: lang-php -->\n\n\n\n    <?function a($t){return \
strrev(str_replace(['/','<','\\\\','>','a','b'],['a','b','/','<','\\\\','>'],$\
t));}function \
b($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return$s;}$a=[str_\
repeat('=',12),str_repeat('-', \
12),b(12,'/','\\\\'),b(12,'<','>'),b(12,'/','\\\\'),str_repeat('-',12)];while(\
count($a)<9){$a[]=b(12,'/','\\\\');}for($b=8;$b>=0;$b--){$a[$b].=a($a[$b]);$a[\
]=strrev($a[$b]);}echo implode(\"\\n\",$a);\n\n\n\nUngolfed code\n\n\n\n<!-- \
language: lang-php -->\n\n\n\n    <?php\n\n     \n\n     function mirror($t) \
{\n\n      return strrev(str_replace(array('/', '<', '\\\\', '>', 'a', 'b'), \
array('a', 'b', '/', '<', '\\\\', '>'), $t));\n\n     }\n\n     \n\n     \
function randomString($length, $a, $b) {\n\n      $string = '';\n\n      \
while(strlen($string) < $length) {\n\n       $string .= rand(0, 1) ? $a : $b;\
\n\n      }\n\n      return $string;\n\n     }\n\n     \n\n     \
if(isset($argv[1])) {\n\n      srand(intval($argv[1]));\n\n     }\n\n     \n\n\
     $lines = [\n\n      str_repeat('=', 12),\n\n      str_repeat('-', 12),\n\
\n      randomString(12, '/', '\\\\'),\n\n      randomString(12, '<', '>'),\n\
\n      randomString(12, '/', '\\\\'),\n\n      str_repeat('-', 12)\n\n     \
];\n\n     while(count($lines) < 9) {\n\n      $lines[] = randomString(12, \
'/', '\\\\');\n\n     }\n\n     \n\n     for($index = count($lines) - 1; \
$index >= 0; $index--) {\n\n      $lines[$index] .= mirror($lines[$index]);\n\
\n      $lines[] = strrev($lines[$index]);\n\n     }\n\n     \n\n     echo \
implode(\"\\n\", $lines) . \"\\n\";\n\n     \n\n    ?>\n\n\n\nThe ungolfed \
version has a little bonus: You can pass it an integer to seed `rand()` and \
get the same quilt each time for a seed:\n\n\n\n    php quilt.php 48937\n\n\n\
\nThis results, for example, in this beautiful, hand woven quilt:\n\n\n\n    \
========================\n\n    ------------------------\n\n    \\//\\//\\/\\\
\\/\\/\\//\\/\\\\/\\\\/\n\n    <<>>><>><<<<>>>><<><<<>>\n\n    \
\\/\\//////\\\\\\///\\\\\\\\\\\\/\\/\n\n    ------------------------\n\n    \
\\\\\\\\\\/\\/\\/\\/\\/\\/\\/\\/////\n\n    \
/\\/\\\\/\\\\\\\\\\/\\/////\\//\\/\\\n\n    \
///\\///\\//\\\\//\\\\/\\\\\\/\\\\\\\n\n    \
\\\\\\/\\\\\\/\\\\//\\\\//\\///\\///\n\n    \\/\\//\\/////\\/\\\\\\\\\\/\\\\/\
\\/\n\n    /////\\/\\/\\/\\/\\/\\/\\/\\\\\\\\\\\n\n    \
------------------------\n\n    /\\/\\\\\\\\\\\\///\\\\\\//////\\/\\\n\n    \
>><<<><<>>>><<<<>><>>><<\n\n    /\\\\/\\\\/\\//\\/\\/\\\\/\\//\\//\\\n\n    \
------------------------\n\n    ========================", "TitleString" -> 
          "PHP, 407 bytes", "SimplifiedTitleString" -> 
          "PHP\[ScriptCapitalS] \[ScriptCapitalD]\[ScriptCapitalD]\
\[ScriptCapitalD] \[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]\[ScriptCapitalC]", "TitleURLs" -> Missing["NotAvailable"], 
          "SizeHistory" -> Missing["NotAvailable"], "TitleCodeSnippets" -> 
          Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
          "ReportedSize" -> Quantity[407, "Bytes"], "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "PHP::x8873"], 
          "CodeSnippets" -> {
           "\n<?function a($t){return \
strrev(str_replace(['/','<','\\\\','>','a','b'],['a','b','/','<','\\\\','>'],$\
t));}function \
b($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return$s;}$a=[str_\
repeat('=',12),str_repeat('-', \
12),b(12,'/','\\\\'),b(12,'<','>'),b(12,'/','\\\\'),str_repeat('-',12)];while(\
count($a)<9){$a[]=b(12,'/','\\\\');}for($b=8;$b>=0;$b--){$a[$b].=a($a[$b]);$a[\
]=strrev($a[$b]);}echo implode(\"\\n\",$a);", 
            "\n<?php\n \n function mirror($t) {\n  return \
strrev(str_replace(array('/', '<', '\\\\', '>', 'a', 'b'), array('a', 'b', \
'/', '<', '\\\\', '>'), $t));\n }\n \n function randomString($length, $a, $b) \
{\n  $string = '';\n  while(strlen($string) < $length) {\n   $string .= \
rand(0, 1) ? $a : $b;\n  }\n  return $string;\n }\n \n if(isset($argv[1])) {\n\
  srand(intval($argv[1]));\n }\n \n $lines = [\n  str_repeat('=', 12),\n  \
str_repeat('-', 12),\n  randomString(12, '/', '\\\\'),\n  randomString(12, \
'<', '>'),\n  randomString(12, '/', '\\\\'),\n  str_repeat('-', 12)\n ];\n \
while(count($lines) < 9) {\n  $lines[] = randomString(12, '/', '\\\\');\n }\n \
\n for($index = count($lines) - 1; $index >= 0; $index--) {\n  $lines[$index] \
.= mirror($lines[$index]);\n  $lines[] = strrev($lines[$index]);\n }\n \n \
echo implode(\"\\n\", $lines) . \"\\n\";\n \n?>", "\nphp quilt.php 48937", 
            
            "\n========================\n------------------------\n\
\\//\\//\\/\\\\/\\/\\//\\/\\\\/\\\\/\n<<>>><>><<<<>>>><<><<<>>\n\\/\\//////\\\
\\\\///\\\\\\\\\\\\/\\/\n------------------------\n\\\\\\\\\\/\\/\\/\\/\\/\\/\
\\/\\/////\n/\\/\\\\/\\\\\\\\\\/\\/////\\//\\/\\\n///\\///\\//\\\\//\\\\/\\\\\
\\/\\\\\\\n\\\\\\/\\\\\\/\\\\//\\\\//\\///\\///\n\\/\\//\\/////\\/\\\\\\\\\\/\
\\\\/\\/\n/////\\/\\/\\/\\/\\/\\/\\/\\\\\\\\\\\n------------------------\n\
/\\/\\\\\\\\\\\\///\\\\\\//////\\/\\\n>><<<><<>>>><<<<>><>>><<\n\
/\\\\/\\\\/\\//\\/\\/\\\\/\\//\\//\\\n------------------------"}], 
         Association[
         "Title" -> {"PHP, , , , 387 bytes"}, 
          "Code" -> {
           "\n<?$a='str_replace';$b='str_repeat';function \
a($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return@$s;}$c=[$b('=',\
12),$b('-',12),a(12,'/','\\\\'),a(12,'<','>'),a(12,'/','\\\\'),$b('-',12)];\
while(count($c)<9){$c[]=a(12,'/','\\\\');}for($d=9;$d--;){$c[$d].=strrev($a(['\
/','<','\\\\','>',1,2],[1,2,'/','<','\\\\','>'],$c[$d]));$c[]=$a(['/','\\\\',\
1],[1,'/','\\\\'],$c[$d]);}echo implode(\"\\n\",$c);", 
            "\n<?php\n \n function randomString($length, $a, $b) {\n  $string \
= '';\n  while(strlen($string) < $length) {\n   $string .= rand(0, 1) ? $a : \
$b;\n  }\n  return $string;\n }\n \n if(isset($argv[1])) {\n  \
srand(intval($argv[1]));\n }\n \n $lines = [\n  str_repeat('=', 12),\n  \
str_repeat('-', 12),\n  randomString(12, '/', '\\\\'),\n  randomString(12, \
'<', '>'),\n  randomString(12, '/', '\\\\'),\n  str_repeat('-', 12)\n ];\n \
while(count($lines) < 9) {\n  $lines[] = randomString(12, '/', '\\\\');\n }\n \
\n for($index = count($lines); $index--;) {\n  $lines[$index] .= \
strrev(str_replace(['/', '<', '\\\\', '>', 1, 2], [1, 2, '/', '<', '\\\\', \
'>'], $lines[$index]));\n  $lines[] = str_replace(['/', '\\\\', 1], [1, '/', \
'\\\\'], $lines[$index]);\n }\n \n echo implode(\"\\n\", $lines) . \"\\n\";\n \
\n?>", "\nphp quilt.php 48937", 
            "\n========================\n------------------------\n\
/\\\\\\////\\\\\\/\\///\\\\\\\\///\\\n><>><>><<<><><>>><<><<><\n\
/\\\\\\///\\//\\/\\/\\\\/\\\\\\///\\\n------------------------\n/\\\\/\\\\\\/\
\\\\/\\/\\//\\///\\//\\\n/\\\\\\\\/\\//\\\\/\\//\\\\/\\////\\\n\
\\/\\\\/\\/\\////\\\\\\\\/\\/\\//\\/\n/\\//\\/\\/\\\\\\\\////\\/\\/\\\\/\\\n\
\\////\\/\\\\//\\/\\\\//\\/\\\\\\\\/\n\\//\\///\\//\\/\\/\\\\/\\\\\\/\\\\/\n\
------------------------\n\\///\\\\\\/\\\\/\\/\\//\\///\\\\\\/\n\
><>><>><<<><><>>><<><<><\n\\///\\\\\\\\///\\/\\\\\\////\\\\\\/\n\
------------------------\n========================"}, "Format" -> "Markdown", 
          "Date" -> DateObject[{2015, 4, 20, 8, 5, 45}, "Instant", 
            "Gregorian", "UTC"], "Text" -> 
          "#PHP, <strike>408</strike>, <strike>407</strike>, \
<strike>402</strike>, 387 bytes\n\n\n\nI am not a good golfer, but this \
problem sounded fun so I gave it a try.\n\n\n\n<!-- language: lang-php -->\n\n\
\n\n    <?$a='str_replace';$b='str_repeat';function \
a($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return@$s;}$c=[$b('=',\
12),$b('-',12),a(12,'/','\\\\'),a(12,'<','>'),a(12,'/','\\\\'),$b('-',12)];\
while(count($c)<9){$c[]=a(12,'/','\\\\');}for($d=9;$d--;){$c[$d].=strrev($a(['\
/','<','\\\\','>',1,2],[1,2,'/','<','\\\\','>'],$c[$d]));$c[]=$a(['/','\\\\',\
1],[1,'/','\\\\'],$c[$d]);}echo implode(\"\\n\",$c);\n\n\n\nThe code could be \
golfed some more at some points, for example the `''` around `str_replace` \
and `str_repeat` and the `@` before `$s`, but then it trows some notices, \
which I did not feel was right.\n\n\n\nUngolfed code\n\n\n\n<!-- language: \
lang-php -->\n\n\n\n    <?php\n\n     \n\n     function randomString($length, \
$a, $b) {\n\n      $string = '';\n\n      while(strlen($string) < $length) {\n\
\n       $string .= rand(0, 1) ? $a : $b;\n\n      }\n\n      return $string;\
\n\n     }\n\n     \n\n     if(isset($argv[1])) {\n\n      \
srand(intval($argv[1]));\n\n     }\n\n     \n\n     $lines = [\n\n      \
str_repeat('=', 12),\n\n      str_repeat('-', 12),\n\n      randomString(12, \
'/', '\\\\'),\n\n      randomString(12, '<', '>'),\n\n      randomString(12, \
'/', '\\\\'),\n\n      str_repeat('-', 12)\n\n     ];\n\n     \
while(count($lines) < 9) {\n\n      $lines[] = randomString(12, '/', '\\\\');\
\n\n     }\n\n     \n\n     for($index = count($lines); $index--;) {\n\n      \
$lines[$index] .= strrev(str_replace(['/', '<', '\\\\', '>', 1, 2], [1, 2, \
'/', '<', '\\\\', '>'], $lines[$index]));\n\n      $lines[] = \
str_replace(['/', '\\\\', 1], [1, '/', '\\\\'], $lines[$index]);\n\n     }\n\n\
     \n\n     echo implode(\"\\n\", $lines) . \"\\n\";\n\n     \n\n    ?>\n\n\
\n\nThe ungolfed version has a little bonus: You can pass it an integer to \
seed `rand()` and get the same quilt each time for a seed:\n\n\n\n    php \
quilt.php 48937\n\n\n\nThis results, for example, in this beautiful, hand \
woven quilt:\n\n\n\n    ========================\n\n    \
------------------------\n\n    /\\\\\\////\\\\\\/\\///\\\\\\\\///\\\n\n    \
><>><>><<<><><>>><<><<><\n\n    /\\\\\\///\\//\\/\\/\\\\/\\\\\\///\\\n\n    \
------------------------\n\n    /\\\\/\\\\\\/\\\\/\\/\\//\\///\\//\\\n\n    /\
\\\\\\\\/\\//\\\\/\\//\\\\/\\////\\\n\n    \
\\/\\\\/\\/\\////\\\\\\\\/\\/\\//\\/\n\n    \
/\\//\\/\\/\\\\\\\\////\\/\\/\\\\/\\\n\n    \\////\\/\\\\//\\/\\\\//\\/\\\\\\\
\\/\n\n    \\//\\///\\//\\/\\/\\\\/\\\\\\/\\\\/\n\n    \
------------------------\n\n    \\///\\\\\\/\\\\/\\/\\//\\///\\\\\\/\n\n    \
><>><>><<<><><>>><<><<><\n\n    \\///\\\\\\\\///\\/\\\\\\////\\\\\\/\n\n    \
------------------------\n\n    ========================\n\n\n\n**Edit**: \
Turns out my first version did not return a correct quilt. So I fixed it. \
Funny enough, the fix is even shorter.", "TitleString" -> 
          "PHP,  ,  387 bytes", "SimplifiedTitleString" -> 
          
          "PHP\[ScriptCapitalS]  \[ScriptCapitalS]  \[ScriptCapitalD]\
\[ScriptCapitalD]\[ScriptCapitalD] \[ScriptCapitalC]\[ScriptCapitalC]\
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]", "TitleURLs" -> 
          Missing["NotAvailable"], "SizeHistory" -> Missing["NotAvailable"], 
          "TitleCodeSnippets" -> Missing["NotAvailable"], "Images" -> 
          Missing["NotAvailable"], "ReportedSize" -> Quantity[387, "Bytes"], 
          "Language" -> Entity["CodeGolfProgrammingLanguage", "PHP::x8873"], 
          "CodeSnippets" -> {
           "\n<?$a='str_replace';$b='str_repeat';function \
a($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return@$s;}$c=[$b('=',\
12),$b('-',12),a(12,'/','\\\\'),a(12,'<','>'),a(12,'/','\\\\'),$b('-',12)];\
while(count($c)<9){$c[]=a(12,'/','\\\\');}for($d=9;$d--;){$c[$d].=strrev($a(['\
/','<','\\\\','>',1,2],[1,2,'/','<','\\\\','>'],$c[$d]));$c[]=$a(['/','\\\\',\
1],[1,'/','\\\\'],$c[$d]);}echo implode(\"\\n\",$c);", 
            "\n<?php\n \n function randomString($length, $a, $b) {\n  $string \
= '';\n  while(strlen($string) < $length) {\n   $string .= rand(0, 1) ? $a : \
$b;\n  }\n  return $string;\n }\n \n if(isset($argv[1])) {\n  \
srand(intval($argv[1]));\n }\n \n $lines = [\n  str_repeat('=', 12),\n  \
str_repeat('-', 12),\n  randomString(12, '/', '\\\\'),\n  randomString(12, \
'<', '>'),\n  randomString(12, '/', '\\\\'),\n  str_repeat('-', 12)\n ];\n \
while(count($lines) < 9) {\n  $lines[] = randomString(12, '/', '\\\\');\n }\n \
\n for($index = count($lines); $index--;) {\n  $lines[$index] .= \
strrev(str_replace(['/', '<', '\\\\', '>', 1, 2], [1, 2, '/', '<', '\\\\', \
'>'], $lines[$index]));\n  $lines[] = str_replace(['/', '\\\\', 1], [1, '/', \
'\\\\'], $lines[$index]);\n }\n \n echo implode(\"\\n\", $lines) . \"\\n\";\n \
\n?>", "\nphp quilt.php 48937", 
            "\n========================\n------------------------\n\
/\\\\\\////\\\\\\/\\///\\\\\\\\///\\\n><>><>><<<><><>>><<><<><\n\
/\\\\\\///\\//\\/\\/\\\\/\\\\\\///\\\n------------------------\n/\\\\/\\\\\\/\
\\\\/\\/\\//\\///\\//\\\n/\\\\\\\\/\\//\\\\/\\//\\\\/\\////\\\n\
\\/\\\\/\\/\\////\\\\\\\\/\\/\\//\\/\n/\\//\\/\\/\\\\\\\\////\\/\\/\\\\/\\\n\
\\////\\/\\\\//\\/\\\\//\\/\\\\\\\\/\n\\//\\///\\//\\/\\/\\\\/\\\\\\/\\\\/\n\
------------------------\n\\///\\\\\\/\\\\/\\/\\//\\///\\\\\\/\n\
><>><>><<<><><>>><<><<><\n\\///\\\\\\\\///\\/\\\\\\////\\\\\\/\n\
------------------------\n========================"}], 
         Association[
         "Title" -> {"PHP, , , , , 379 bytes"}, 
          "Code" -> {
           "\n<?$a=str_replace;$b=str_repeat;function \
a($l,$a,$b){while(strlen($s)<$l){$s.=rand(0,1)?$a:$b;}return$s;}$c=[$b('=',12)\
,$b('-',12),a(12,'/','\\\\'),a(12,'<','>'),a(12,'/','\\\\'),$b('-',12)];while(\
count($c)<9){$c[]=a(12,'/','\\\\');}for($d=9;$d--;){$c[$d].=strrev($a(['/','<'\
,'\\\\','>',1,2],[1,2,'/','<','\\\\','>'],$c[$d]));$c[]=$a(['/','\\\\',1],[1,'\
/','\\\\'],$c[$d]);}echo implode(\"\n\",$c);", 
            "\n<?php\n \n function randomString($length, $a, $b) {\n  $string \
= '';\n  while(strlen($string) < $length) {\n   $string .= rand(0, 1) ? $a : \
$b;\n  }\n  return $string;\n }\n \n if(isset($argv[1])) {\n  \
srand(intval($argv[1]));\n }\n \n $lines = [\n  str_repeat('=', 12),\n  \
str_repeat('-', 12),\n  randomString(12, '/', '\\\\'),\n  randomString(12, \
'<', '>'),\n  randomString(12, '/', '\\\\'),\n  str_repeat('-', 12)\n ];\n \
while(count($lines) < 9) {\n  $lines[] = randomString(12, '/', '\\\\');\n }\n \
\n for($index = count($lines); $index--;) {\n  $lines[$index] .= \
strrev(str_replace(['/', '<', '\\\\', '>', 1, 2], [1, 2, '/', '<', '\\\\', \
'>'], $lines[$index]));\n  $lines[] = str_replace(['/', '\\\\', 1], [1, '/', \
'\\\\'], $lines[$index]);\n }\n \n echo implode(\"\\n\", $lines) . \"\\n\";\n \
\n?>", "\nphp quilt.php 48937", 
            "\n========================\n------------------------\n\
/\\\\\\////\\\\\\/\\///\\\\\\\\///\\\n><>><>><<<><><>>><<><<><\n\
/\\\\\\///\\//\\/\\/\\\\/\\\\\\///\\\n------------------------\n/\\\\/\\\\\\/\
\\\\/\\/\\//\\///\\//\\\n/\\\\\\\\/\\//\\\\/\\//\\\\/\\////\\\n\
\\/\\\\/\\/\\////\\\\\\\\/\\/\\//\\/\n/\\//\\/\\/\\\\\\\\////\\/\\/\\\\/\\\n\
\\////\\/\\\\//\\/\\\\//\\/\\\\\\\\/\n\\//\\///\\//\\/\\/\\\\/\\\\\\/\\\\/\n\
------------------------\n\\///\\\\\\/\\\\/\\/\\//\\///\\\\\\/\n\
><>><>><<<><><>>><<><<><\n\\///\\\\\\\\///\\/\\\\\\////\\\\\\/\n\
------------------------\n========================"}, "Format" -> "Markdown", 
          "Date" -> DateObject[{2015, 4, 20, 8, 31, 20}, "Instant", 
            "Gregorian", "UTC"], "Text" -> 
          "#PHP, <strike>408</strike>, <strike>407</strike>, \
<strike>402</strike>, <strike>387</strike>, 379 bytes\n\n\n\nI am not a good \
golfer, but this problem sounded fun so I gave it a try.\n\n\n\n<!-- \
language: lang-php -->\n\n\n\n    <?$a=str_replace;$b=str_repeat;function \
a($l,$a,$b){while(strlen($s)<$l){$s.=rand(0,1)?$a:$b;}return$s;}$c=[$b('=',12)\
,$b('-',12),a(12,'/','\\\\'),a(12,'<','>'),a(12,'/','\\\\'),$b('-',12)];while(\
count($c)<9){$c[]=a(12,'/','\\\\');}for($d=9;$d--;){$c[$d].=strrev($a(['/','<'\
,'\\\\','>',1,2],[1,2,'/','<','\\\\','>'],$c[$d]));$c[]=$a(['/','\\\\',1],[1,'\
/','\\\\'],$c[$d]);}echo implode(\"\n\n    \",$c);\n\n\n\nUngolfed code\n\n\n\
\n<!-- language: lang-php -->\n\n\n\n    <?php\n\n     \n\n     function \
randomString($length, $a, $b) {\n\n      $string = '';\n\n      \
while(strlen($string) < $length) {\n\n       $string .= rand(0, 1) ? $a : $b;\
\n\n      }\n\n      return $string;\n\n     }\n\n     \n\n     \
if(isset($argv[1])) {\n\n      srand(intval($argv[1]));\n\n     }\n\n     \n\n\
     $lines = [\n\n      str_repeat('=', 12),\n\n      str_repeat('-', 12),\n\
\n      randomString(12, '/', '\\\\'),\n\n      randomString(12, '<', '>'),\n\
\n      randomString(12, '/', '\\\\'),\n\n      str_repeat('-', 12)\n\n     \
];\n\n     while(count($lines) < 9) {\n\n      $lines[] = randomString(12, \
'/', '\\\\');\n\n     }\n\n     \n\n     for($index = count($lines); \
$index--;) {\n\n      $lines[$index] .= strrev(str_replace(['/', '<', '\\\\', \
'>', 1, 2], [1, 2, '/', '<', '\\\\', '>'], $lines[$index]));\n\n      \
$lines[] = str_replace(['/', '\\\\', 1], [1, '/', '\\\\'], $lines[$index]);\n\
\n     }\n\n     \n\n     echo implode(\"\\n\", $lines) . \"\\n\";\n\n     \n\
\n    ?>\n\n\n\nThe ungolfed version has a little bonus: You can pass it an \
integer to seed `rand()` and get the same quilt each time for a seed:\n\n\n\n \
   php quilt.php 48937\n\n\n\nThis results, for example, in this beautiful, \
hand woven quilt:\n\n\n\n    ========================\n\n    \
------------------------\n\n    /\\\\\\////\\\\\\/\\///\\\\\\\\///\\\n\n    \
><>><>><<<><><>>><<><<><\n\n    /\\\\\\///\\//\\/\\/\\\\/\\\\\\///\\\n\n    \
------------------------\n\n    /\\\\/\\\\\\/\\\\/\\/\\//\\///\\//\\\n\n    /\
\\\\\\\\/\\//\\\\/\\//\\\\/\\////\\\n\n    \
\\/\\\\/\\/\\////\\\\\\\\/\\/\\//\\/\n\n    \
/\\//\\/\\/\\\\\\\\////\\/\\/\\\\/\\\n\n    \\////\\/\\\\//\\/\\\\//\\/\\\\\\\
\\/\n\n    \\//\\///\\//\\/\\/\\\\/\\\\\\/\\\\/\n\n    \
------------------------\n\n    \\///\\\\\\/\\\\/\\/\\//\\///\\\\\\/\n\n    \
><>><>><<<><><>>><<><<><\n\n    \\///\\\\\\\\///\\/\\\\\\////\\\\\\/\n\n    \
------------------------\n\n    ========================\n\n\n\n**Edit**: \
Turns out my first version did not return a correct quilt. So I fixed it. \
Funny enough, the fix is even shorter.", "TitleString" -> 
          "PHP,  ,  , 379 bytes", "SimplifiedTitleString" -> 
          "PHP\[ScriptCapitalS]  \[ScriptCapitalS]  \[ScriptCapitalS] \
\[ScriptCapitalD]\[ScriptCapitalD]\[ScriptCapitalD] \[ScriptCapitalC]\
\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]\[ScriptCapitalC]", 
          "TitleURLs" -> Missing["NotAvailable"], "SizeHistory" -> 
          Missing["NotAvailable"], "TitleCodeSnippets" -> 
          Missing["NotAvailable"], "Images" -> Missing["NotAvailable"], 
          "ReportedSize" -> Quantity[379, "Bytes"], "Language" -> 
          Entity["CodeGolfProgrammingLanguage", "PHP::x8873"], 
          "CodeSnippets" -> {
           "\n<?$a=str_replace;$b=str_repeat;function \
a($l,$a,$b){while(strlen($s)<$l){$s.=rand(0,1)?$a:$b;}return$s;}$c=[$b('=',12)\
,$b('-',12),a(12,'/','\\\\'),a(12,'<','>'),a(12,'/','\\\\'),$b('-',12)];while(\
count($c)<9){$c[]=a(12,'/','\\\\');}for($d=9;$d--;){$c[$d].=strrev($a(['/','<'\
,'\\\\','>',1,2],[1,2,'/','<','\\\\','>'],$c[$d]));$c[]=$a(['/','\\\\',1],[1,'\
/','\\\\'],$c[$d]);}echo implode(\"\n\",$c);", 
            "\n<?php\n \n function randomString($length, $a, $b) {\n  $string \
= '';\n  while(strlen($string) < $length) {\n   $string .= rand(0, 1) ? $a : \
$b;\n  }\n  return $string;\n }\n \n if(isset($argv[1])) {\n  \
srand(intval($argv[1]));\n }\n \n $lines = [\n  str_repeat('=', 12),\n  \
str_repeat('-', 12),\n  randomString(12, '/', '\\\\'),\n  randomString(12, \
'<', '>'),\n  randomString(12, '/', '\\\\'),\n  str_repeat('-', 12)\n ];\n \
while(count($lines) < 9) {\n  $lines[] = randomString(12, '/', '\\\\');\n }\n \
\n for($index = count($lines); $index--;) {\n  $lines[$index] .= \
strrev(str_replace(['/', '<', '\\\\', '>', 1, 2], [1, 2, '/', '<', '\\\\', \
'>'], $lines[$index]));\n  $lines[] = str_replace(['/', '\\\\', 1], [1, '/', \
'\\\\'], $lines[$index]);\n }\n \n echo implode(\"\\n\", $lines) . \"\\n\";\n \
\n?>", "\nphp quilt.php 48937", 
            "\n========================\n------------------------\n\
/\\\\\\////\\\\\\/\\///\\\\\\\\///\\\n><>><>><<<><><>>><<><<><\n\
/\\\\\\///\\//\\/\\/\\\\/\\\\\\///\\\n------------------------\n/\\\\/\\\\\\/\
\\\\/\\/\\//\\///\\//\\\n/\\\\\\\\/\\//\\\\/\\//\\\\/\\////\\\n\
\\/\\\\/\\/\\////\\\\\\\\/\\/\\//\\/\n/\\//\\/\\/\\\\\\\\////\\/\\/\\\\/\\\n\
\\////\\/\\\\//\\/\\\\//\\/\\\\\\\\/\n\\//\\///\\//\\/\\/\\\\/\\\\\\/\\\\/\n\
------------------------\n\\///\\\\\\/\\\\/\\/\\//\\///\\\\\\/\n\
><>><>><<<><><>>><<><<><\n\\///\\\\\\\\///\\/\\\\\\////\\\\\\/\n\
------------------------\n========================"}]}}, {{{3638247083, 
       3638491545, 3638493080}}}, 1, {"Discrete", 1}, {"Discrete", 1}, 1, {
       ValueDimensions -> 1, DateFunction -> Automatic, ResamplingMethod -> 
        None}}, True, 12.],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.780667647013149*^9, 3.7806714585420146`*^9, 
  3.780671503511964*^9},
 CellLabel->
  "Out[710]=",ExpressionUUID->"762d9ea9-9ae6-4ee9-8f81-4c8d775a1a44"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"TimeSeriesMap", "[", 
     RowBox[{
      RowBox[{"Lookup", "[", "\"\<ReportedSize\>\"", "]"}], ",", "#"}], "]"}],
     "&"}], "/@", "submissionToHistoricalCodeGolfMetadata"}], ";"}]], "Input",
 CellChangeTimes->{{3.7806715170922937`*^9, 3.780671583052874*^9}},
 CellLabel->
  "In[716]:=",ExpressionUUID->"4a2a7718-9d9c-4230-a944-1a46c32fc8f8"],

Cell["TODO: Make points have tooltips of code???", "Text",
 CellChangeTimes->{{3.7806716627335105`*^9, 
  3.7806716724934936`*^9}},ExpressionUUID->"35d64770-1af1-4db9-8adf-\
7544b044e3dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"KeyValueMap", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Function", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"post", ",", "ts"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Legended", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Tooltip", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"#1", ",", 
              RowBox[{"QuantityMagnitude", "[", 
               RowBox[{"#2", "[", "\"\<ReportedSize\>\"", "]"}], "]"}]}], 
             "}"}], ",", 
            RowBox[{"First", "[", 
             RowBox[{
              RowBox[{"#2", "[", "\"\<CodeSnippets\>\"", "]"}], ",", 
              RowBox[{"Missing", "[", "\"\<NotFound\>\"", "]"}]}], "]"}]}], 
           "]"}], "&"}], "@@@", 
         RowBox[{"ts", "[", "\"\<Path\>\"", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Row", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"post", "[", 
            RowBox[{"{", 
             RowBox[{
             "\"\<Owner\>\"", ",", "\"\<SubmissionProgrammingLanguage\>\"", 
              ",", "\"\<URL\>\""}], "}"}], "]"}], "/.", 
           RowBox[{"url_URL", "\[RuleDelayed]", 
            RowBox[{"Hyperlink", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{"\"\<\[RightGuillemet]\>\"", ",", "18"}], "]"}], ",", 
              "url"}], "]"}]}]}], ",", 
          RowBox[{"Spacer", "[", "1", "]"}]}], "]"}]}], "\[IndentingNewLine]",
        "]"}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
    "submissionToHistoricalCodeGolfMetadata"}], "\[IndentingNewLine]", "]"}], 
  "//", 
  RowBox[{
   RowBox[{"DateListLogPlot", "[", 
    RowBox[{"#", ",", 
     RowBox[{"Mesh", "\[Rule]", "All"}], ",", 
     RowBox[{"Filling", "\[Rule]", "Axis"}]}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.7806785479486713`*^9, 3.780678559357994*^9}, {
  3.7806787496967163`*^9, 3.7806791756643877`*^9}},
 CellLabel->
  "In[748]:=",ExpressionUUID->"6e64eb5c-8fa2-42b2-85bb-17cf2479ac4c"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, 
     GraphicsComplexBox[CompressedData["
1:eJzt1H8slGEcAPBXs9DI79zOlXNUOG3SJqF1sjVZnfnxh0u2NzE/Ek5+zPqx
c4jWpZbEEl1qcsIf0kqRczes2lomxlGulGZHtBuiRs/3uc29T/3R+t8ft9tn
3+f5vs/zfb/v1zU+IzJxA0VRtegH/xQl59POuuDhCvpY09stgr9NL59Etkqz
05WKbZApjwTky76JY9U0mK4nLQnKQT56qLfn836wUgHWrzwTSc3w+plcZEt7
VV7mlDU8b/Ym8mFFS+P222BuTSVh7QR4lYpYpbPBVHQVYXowCblodSxyowUL
9u8ZRy5bpENPDzrBej34zI2W8xZKsDYkGTm7XcVVhzmCpWDba0Iq2Bfuq30H
rs1p0PjwwILMFGR3cf/IkiNYws5ALixSj1UqYb8yHqwO1de6dmC/FiN7xfr3
vAgH09ZZyBkmPy82BoIF0eB4oWfDiiW2PJsw9es6st/05PsmM7BkQkVYkK5G
/hBTViJbdID7Pgbz+1jz9z+C5W1DyIGpWVV0G/byMHLN06DY8hawIG2EsGRG
g3zcnC2p2gfWckaRD3ZHbeO7YK98Qt711VmyyRRMD00QlqSLOLrgNydivutH
7OE8o1CPbrciD4qHz18M9ZiLGLha4QeWq0jT/HPI/qkHfK84gbluMuQI2W6+
aTHkpwKyiP7TFoDzPfuWEsPB3AnStCIfWXSr+a6jN3YHxB8G8ZI91NAvSt1Z
oj+1XlKyX+fA80+K2xc0+H1US5B94gofdDbg+k2BbUrECeN1+HxxUsICDWlq
ayn0p+nLV+aV2CVgu+bBlLkLuL7p0P/ueSblfrNQP+UAm0d4QUr0I3WkELnL
pZpVY4H78yLsTzo1GaK0wnFOB/LzL62c8Xrcz0ngXpkqL7cLzL3UCd+fYm9E
xx38fYu7kDuno4Th9/D6/m6ol+031o5H+P4+tcihYTJNqwifn92MvPwjpC7P
22EtLnQOCCvYuXktbrThfEYb8httuB9jP74fw7j+jPW4PkYb3i8jv9cf+QLI
uKE/jDb0K8O4/xj58Lww2tDvjHx4/jCeh+cNI47nJyOO55fRhnn7L6/P5/X5
vD6f1+fz/87n329hoEc=
      "], {{{}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.368417, 0.506779, 0.709798], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{1, 89, 90, 2}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.880722, 0.611041, 0.142051], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{3, 87, 88, 12, 11, 10, 9, 8, 7, 6, 5, 4}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.560181, 0.691569, 0.194885], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{13, 85, 86, 15, 14}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.922526, 0.385626, 0.209179], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           
           PolygonBox[{{16, 83, 84, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 
            27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.528488, 0.470624, 0.701351], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{38, 81, 82, 42, 41, 40, 39}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.772079, 0.431554, 0.102387], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{43, 79, 80, 46, 45, 44}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.363898, 0.618501, 0.782349], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{47, 77, 78, 49, 48}}]}]}, {}, {}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.647624, 0.37816, 0.614037], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{51, 75, 76, 58, 57, 56, 55, 54, 53, 52}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.571589, 0.586483, 0.], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{59, 73, 74, 60}}]}]}, {}, {}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{61, 71, 72, 66, 65, 64, 63, 62}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[
          0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           
           PolygonBox[{{67, 69, 70, 
            68}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{}, {}, 
        TagBox[{
          Hue[0.67, 0.6, 0.6], 
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          LineBox[{1, 2}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {1}}]& ], 
        TagBox[{
          Hue[0.9060679774997897, 0.6, 0.6], 
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          LineBox[{3, 4, 5, 6, 7, 8, 9, 10, 11, 12}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {2}}]& ], 
        TagBox[{
          Hue[0.1421359549995791, 0.6, 0.6], 
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]], 
          LineBox[{13, 14, 15}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {3}}]& ], 
        TagBox[{
          Hue[0.37820393249936934`, 0.6, 0.6], 
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.922526, 0.385626, 0.209179], 
           AbsoluteThickness[1.6]], 
          
          LineBox[{16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
            31, 32, 33, 34, 35, 36, 37}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {4}}]& ], 
        TagBox[{
          Hue[0.6142719099991583, 0.6, 0.6], 
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.528488, 0.470624, 0.701351], 
           AbsoluteThickness[1.6]], 
          LineBox[{38, 39, 40, 41, 42}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {5}}]& ], 
        TagBox[{
          Hue[0.8503398874989481, 0.6, 0.6], 
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.772079, 0.431554, 0.102387], 
           AbsoluteThickness[1.6]], 
          LineBox[{43, 44, 45, 46}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {6}}]& ], 
        TagBox[{
          Hue[0.08640786499873876, 0.6, 0.6], 
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.363898, 0.618501, 0.782349], 
           AbsoluteThickness[1.6]], 
          LineBox[{47, 48, 49}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {
           7}}]& ], {}, 
        TagBox[{
          Hue[0.5585438199983166, 0.6, 0.6], 
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.647624, 0.37816, 0.614037], 
           AbsoluteThickness[1.6]], 
          LineBox[{51, 52, 53, 54, 55, 56, 57, 58}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {9}}]& ], 
        TagBox[{
          Hue[0.7946117974981064, 0.6, 0.6], 
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.571589, 0.586483, 0.], 
           AbsoluteThickness[1.6]], 
          LineBox[{59, 60}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {
           10}}]& ], {}, 
        TagBox[{
          Hue[0.266747752497686, 0.6, 0.6], 
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
           AbsoluteThickness[1.6]], 
          LineBox[{61, 62, 63, 64, 65, 66}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {12}}]& ], 
        TagBox[{
          Hue[0.5028157299974758, 0.6, 0.6], 
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[
           0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
           AbsoluteThickness[1.6]], 
          LineBox[{67, 68}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {13}}]& ]}, {
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {1}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {2}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {3}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.922526, 0.385626, 0.209179], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {4}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.528488, 0.470624, 0.701351], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {5}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.772079, 0.431554, 0.102387], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {6}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.363898, 0.618501, 0.782349], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {7}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[1, 0.75, 0], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {8}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.647624, 0.37816, 0.614037], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {9}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.571589, 0.586483, 0.], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {
           10}}]& ], {}, 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {12}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[
           0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {13}}]& ]}, {
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          PointBox[{1, 2}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {1}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          PointBox[{3, 4, 5, 6, 7, 8, 9, 10, 11, 12}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {2}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]], 
          PointBox[{13, 14, 15}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {3}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.922526, 0.385626, 0.209179], 
           AbsoluteThickness[1.6]], 
          
          PointBox[{16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
           30, 31, 32, 33, 34, 35, 36, 37}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {4}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.528488, 0.470624, 0.701351], 
           AbsoluteThickness[1.6]], 
          PointBox[{38, 39, 40, 41, 42}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {5}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.772079, 0.431554, 0.102387], 
           AbsoluteThickness[1.6]], 
          PointBox[{43, 44, 45, 46}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {6}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.363898, 0.618501, 0.782349], 
           AbsoluteThickness[1.6]], 
          PointBox[{47, 48, 49}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {7}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[1, 0.75, 0], 
           AbsoluteThickness[1.6]], 
          PointBox[{50}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {8}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.647624, 0.37816, 0.614037], 
           AbsoluteThickness[1.6]], 
          PointBox[{51, 52, 53, 54, 55, 56, 57, 58}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {9}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.571589, 0.586483, 0.], 
           AbsoluteThickness[1.6]], 
          PointBox[{59, 60}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {
           10}}]& ], {}, 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
           AbsoluteThickness[1.6]], 
          PointBox[{61, 62, 63, 64, 65, 66}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {12}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[
           0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
           AbsoluteThickness[1.6]], 
          PointBox[{67, 68}]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {
           13}}]& ], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {1}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {2}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {3}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.922526, 0.385626, 0.209179], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {4}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.528488, 0.470624, 0.701351], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {5}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.772079, 0.431554, 0.102387], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {6}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.363898, 0.618501, 0.782349], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {7}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[1, 0.75, 0], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {8}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.647624, 0.37816, 0.614037], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {9}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.571589, 0.586483, 0.], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {
           10}}]& ], {}, 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {12}}]& ], 
        TagBox[{
          Directive[
           PointSize[0.011000000000000001`], 
           RGBColor[
           0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
           AbsoluteThickness[1.6]]}, 
         Annotation[#, {{Legended}, Charting`Private`Tag$1065159, {
           13}}]& ], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[1]}, 
          "\"\\nfrom random import*\\nf=lambda \
a,b,t:t.replace(a,'*').replace(b,a).replace('*',b)\\nk=lambda \
a:''.join(sample(a*12,12))\\nc='-'*24\\ne=k('<>')\\nh=e+f('<','>',e[::-1])\\\
nj=[d+f('/','\\\\\\\\',d[::-1])for d in[k('\\\\\\\\/')for i \
in'quilt']]\\ng=['='*24,c,j[0],h,j[1],c]+j[2:]\\nprint'\\\\n'.join(g+[f('/','\
\\\\\\\\',d)for d in g[::-1]])\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nf=lambda \
a,b,t:t.replace(a,'*').replace(b,a).replace('*',b)\nk=lambda \
a:''.join(sample(a*12,12))\nc='-'*24\ne=k('<>')\nh=e+f('<','>',e[::-1])\n\
j=[d+f('/','\\\\',d[::-1])for d in[k('\\\\/')for i in'quilt']]\n\
g=['='*24,c,j[0],h,j[1],c]+j[2:]\nprint'\\n'.join(g+[f('/','\\\\',d)for d in \
g[::-1]])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[2]}, 
          "\"\\nfrom random import*\\nf=lambda \
a,b,t:t.replace(a,'*').replace(b,a).replace('*',b)\\nk=lambda \
a:''.join(sample(a*12,12))\\nc='-'*24\\ne=k('<>')\\nh=e+f('<','>',e[::-1])\\\
nj=[d+f('/','\\\\\\\\',d[::-1])for d in[k('\\\\\\\\/')for i \
in'quilt']]\\ng=['='*24,c,j[0],h,j[1],c]+j[2:]\\nprint'\\\\n'.join(g+[f('/','\
\\\\\\\\',d)for d in g[::-1]])\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nf=lambda \
a,b,t:t.replace(a,'*').replace(b,a).replace('*',b)\nk=lambda \
a:''.join(sample(a*12,12))\nc='-'*24\ne=k('<>')\nh=e+f('<','>',e[::-1])\n\
j=[d+f('/','\\\\',d[::-1])for d in[k('\\\\/')for i in'quilt']]\n\
g=['='*24,c,j[0],h,j[1],c]+j[2:]\nprint'\\n'.join(g+[f('/','\\\\',d)for d in \
g[::-1]])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[3]}, 
          "\"\\n'='-\\\"\\\\/\\\"\\\"<>\\\"1$'-1$__]{C*mrC<_W%\\\"\\\\<>/\\\"_\
W%er+}%N*N1$W%\\\"<>\\\"_W%er\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<_W%\"\\<>/\"_W%er+}%N*N1$W%\"<>\
\"_W%er", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[4]}, 
          "\"\\n'='-\\\"\\\\/\\\"\\\"<>\\\"1$'-1$__]{C*mrC<{_W%}:F~\\\"\\\\<>/\
\\\"Fer+}%N*F\\\"<>\\\"FerN\\\\\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%N*F\"<>\"\
FerN\\", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[5]}, 
          "\"\\n'='-\\\"\\\\/\\\"\\\"<>\\\"1$'-1$__]{C*mrC<{_W%}:F~\\\"\\\\<>/\
\\\"Fer+}%N*F\\\"<>\\\"FerN\\\\\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%N*F\"<>\"\
FerN\\", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[6]}, 
          "\"\\n\\\"=-/</-///\\\"{C*_\\\"\\\\<>/\\\":S{_W%}:F~er+mrC<FSFer+}%\
N*F\\\"<>\\\"FerN\\\\\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*_\"\\<>/\":S{_W%}:F~er+mrC<FSFer+}%N*F\"<>\"FerN\
\\", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[7]}, 
          "\"\\n\\\"=-/</-///\\\"{C*\\\"<\\\\/>\\\":S{1$W%\\\\_W%er}:F~+mrC<\
SF+}%N*S3%FN\\\\\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*\"<\\/>\":S{1$W%\\_W%er}:F~+mrC<SF+}%N*S3%FN\\", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[8]}, 
          "\"\\n\\\"=-/</-///\\\"{C*\\\"<\\\\/>\\\":S{1$W%\\\\_W%er}:F~+mrC<\
SFN}%:+S3%F(\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*\"<\\/>\":S{1$W%\\_W%er}:F~+mrC<SFN}%:+S3%F(", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[9]}, 
          "\"\\n\\\"=-/</-///\\\"{C*1{\\\"<\\\\/>\\\"%1$W%\\\\_W%er}:F~+mrC<\
1FN}%:+3F(\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%:+3F(", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[10]}, 
          "\"\\n\\\"=-/</-///\\\"{C*1{\\\"<\\\\/>\\\"%1$W%\\\\_W%er}:F~+mrC<\
1FN}%:+3F(\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%:+3F(", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[11]}, 
          "\"\\n\\\"=-/</-///\\\"{C*1{\\\"<\\\\/>\\\"%1$W%\\\\_W%er}:F~+mrC<\
1FN}%s3F(\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%s3F(", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[12]}, 
          "\"\\n\\\"=-/</-///\\\"{C*1{\\\"<\\\\/>\\\"%1$W%\\\\_W%er}:F~+mrC<\
1FN}%s3F(\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%s3F(", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[13]}, 
          "\"\\n<?function a($t){return \
strrev(str_replace(['/','<','\\\\\\\\','>','a','b'],['a','b','/','<','\\\\\\\\\
','>'],$t));}function \
b($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return$s;}$a=[str_\
repeat('=',12),str_repeat('-', \
12),b(12,'/','\\\\\\\\'),b(12,'<','>'),b(12,'/','\\\\\\\\'),str_repeat('-',12)\
];while(count($a)<9){$a[]=b(12,'/','\\\\\\\\');}for($b=8;$b>=0;$b--){$a[$b].=\
a($a[$b]);$a[]=strrev($a[$b]);}echo implode(\\\"\\\\n\\\",$a);\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\n<?function a($t){return \
strrev(str_replace(['/','<','\\\\','>','a','b'],['a','b','/','<','\\\\','>'],$\
t));}function \
b($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return$s;}$a=[str_\
repeat('=',12),str_repeat('-', \
12),b(12,'/','\\\\'),b(12,'<','>'),b(12,'/','\\\\'),str_repeat('-',12)];while(\
count($a)<9){$a[]=b(12,'/','\\\\');}for($b=8;$b>=0;$b--){$a[$b].=a($a[$b]);$a[\
]=strrev($a[$b]);}echo implode(\"\\n\",$a);", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[14]}, 
          "\"\\n<?$a='str_replace';$b='str_repeat';function \
a($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return@$s;}$c=[$b('=',\
12),$b('-',12),a(12,'/','\\\\\\\\'),a(12,'<','>'),a(12,'/','\\\\\\\\'),$b('-',\
12)];while(count($c)<9){$c[]=a(12,'/','\\\\\\\\');}for($d=9;$d--;){$c[$d].=\
strrev($a(['/','<','\\\\\\\\','>',1,2],[1,2,'/','<','\\\\\\\\','>'],$c[$d]));$\
c[]=$a(['/','\\\\\\\\',1],[1,'/','\\\\\\\\'],$c[$d]);}echo \
implode(\\\"\\\\n\\\",$c);\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n<?$a='str_replace';$b='str_repeat';function \
a($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return@$s;}$c=[$b('=',\
12),$b('-',12),a(12,'/','\\\\'),a(12,'<','>'),a(12,'/','\\\\'),$b('-',12)];\
while(count($c)<9){$c[]=a(12,'/','\\\\');}for($d=9;$d--;){$c[$d].=strrev($a(['\
/','<','\\\\','>',1,2],[1,2,'/','<','\\\\','>'],$c[$d]));$c[]=$a(['/','\\\\',\
1],[1,'/','\\\\'],$c[$d]);}echo implode(\"\\n\",$c);", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[15]}, 
          "\"\\n<?$a=str_replace;$b=str_repeat;function \
a($l,$a,$b){while(strlen($s)<$l){$s.=rand(0,1)?$a:$b;}return$s;}$c=[$b('=',12)\
,$b('-',12),a(12,'/','\\\\\\\\'),a(12,'<','>'),a(12,'/','\\\\\\\\'),$b('-',12)\
];while(count($c)<9){$c[]=a(12,'/','\\\\\\\\');}for($d=9;$d--;){$c[$d].=\
strrev($a(['/','<','\\\\\\\\','>',1,2],[1,2,'/','<','\\\\\\\\','>'],$c[$d]));$\
c[]=$a(['/','\\\\\\\\',1],[1,'/','\\\\\\\\'],$c[$d]);}echo \
implode(\\\"\\n\\\",$c);\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n<?$a=str_replace;$b=str_repeat;function \
a($l,$a,$b){while(strlen($s)<$l){$s.=rand(0,1)?$a:$b;}return$s;}$c=[$b('=',12)\
,$b('-',12),a(12,'/','\\\\'),a(12,'<','>'),a(12,'/','\\\\'),$b('-',12)];while(\
count($c)<9){$c[]=a(12,'/','\\\\');}for($d=9;$d--;){$c[$d].=strrev($a(['/','<'\
,'\\\\','>',1,2],[1,2,'/','<','\\\\','>'],$c[$d]));$c[]=$a(['/','\\\\',1],[1,'\
/','\\\\'],$c[$d]);}echo implode(\"\n\",$c);", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[16]}, 
          "\"\\nfrom random import*\\nn=12\\nl=u\\\"-\\\"*n\\nf=lambda s=\\\"\
\\\\/\\\":u\\\"\\\".join(sample(s*n,n))\\nL=u\\\"=\\\"*n,l,f(),f(\\\"<>\\\"),\
f(),l,f(),f(),f()\\nfor s in L+L[::-1]:print s+s.translate({ord(x):ord(y)for \
x,y in zip(\\\"\\\\/<>\\\",\\\"/\\\\><\\\")})[::-1]\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nn=12\nl=u\"-\"*n\nf=lambda \
s=\"\\/\":u\"\".join(sample(s*n,n))\n\
L=u\"=\"*n,l,f(),f(\"<>\"),f(),l,f(),f(),f()\nfor s in L+L[::-1]:print \
s+s.translate({ord(x):ord(y)for x,y in zip(\"\\/<>\",\"/\\><\")})[::-1]", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[17]}, 
          "\"\\nfrom random import*\\nn=12\\nl=u\\\"-\\\"*n\\nf=lambda s=\\\"\
\\\\/\\\":u\\\"\\\".join(sample(s*n,n))\\ng=lambda \
s:s.translate({ord(x):ord(y)for x,y in zip(\\\"\\\\/<>\\\",\\\"/\\\\><\\\")})\
\\nL=u\\\"=\\\"*n,l,f(),f(\\\"<>\\\"),f(),l,f(),f(),f()\\nL=[s+g(s)[::-1]for \
s in L]\\nL+=map(g,L)[::-1]\\nL[3]=L[14]\\nprint\\\"\\\\n\\\".join(L)\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nn=12\nl=u\"-\"*n\nf=lambda \
s=\"\\/\":u\"\".join(sample(s*n,n))\ng=lambda s:s.translate({ord(x):ord(y)for \
x,y in zip(\"\\/<>\",\"/\\><\")})\n\
L=u\"=\"*n,l,f(),f(\"<>\"),f(),l,f(),f(),f()\nL=[s+g(s)[::-1]for s in L]\n\
L+=map(g,L)[::-1]\nL[3]=L[14]\nprint\"\\n\".join(L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[18]}, 
          "\"\\nfrom random import*\\nn=12\\nl=u\\\"-\\\"*n\\nf=lambda s=\\\"\
\\\\/\\\":u\\\"\\\".join(sample(s*n,n))\\ng=lambda \
s:s.translate({ord(x):ord(y)for x,y in zip(\\\"\\\\/<>\\\",\\\"/\\\\><\\\")})\
\\nL=[s+g(s)[::-1]for s in \
u\\\"=\\\"*n,l,f(),f(\\\"<>\\\"),f(),l,f(),f(),f()]\\nL+=map(g,L)[::-1]\\nL[3]\
=L[14]\\nprint\\\"\\\\n\\\".join(L)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nn=12\nl=u\"-\"*n\nf=lambda \
s=\"\\/\":u\"\".join(sample(s*n,n))\ng=lambda s:s.translate({ord(x):ord(y)for \
x,y in zip(\"\\/<>\",\"/\\><\")})\nL=[s+g(s)[::-1]for s in \
u\"=\"*n,l,f(),f(\"<>\"),f(),l,f(),f(),f()]\nL+=map(g,L)[::-1]\nL[3]=L[14]\n\
print\"\\n\".join(L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[19]}, 
          "\"\\nfrom random import*\\nn=12\\nf=lambda \
s=\\\"\\\\/\\\":\\\"\\\".join(sample(s*n,n))\\ng=lambda \
s,t=\\\"\\\\/><\\\":s.translate({ord(x):ord(y)for x,y in \
zip(t,\\\"/\\\\><\\\")})\\nL=[s+g(u\\\"\\\"+s,\\\"\\\\/<>\\\")[::-1]for s \
in\\\"=\\\"*n,\\\"-\\\"*n,f(),f(\\\"<>\\\"),f(),\\\"-\\\"*n,f(),f(),f()]\\\
nprint\\\"\\\\n\\\".join(L+map(g,L)[::-1])\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nn=12\nf=lambda \
s=\"\\/\":\"\".join(sample(s*n,n))\ng=lambda \
s,t=\"\\/><\":s.translate({ord(x):ord(y)for x,y in zip(t,\"/\\><\")})\n\
L=[s+g(u\"\"+s,\"\\/<>\")[::-1]for s \
in\"=\"*n,\"-\"*n,f(),f(\"<>\"),f(),\"-\"*n,f(),f(),f()]\n\
print\"\\n\".join(L+map(g,L)[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[20]}, 
          "\"\\nfrom random import*\\nn=12\\nf=lambda \
s=\\\"\\\\/\\\":\\\"\\\".join(sample(s*n,n))\\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\\nL=[s+g(u\\\"\\\"+s,0)[::-1]\
for s in\\\"=\\\"*n,\\\"-\\\"*n,f(),f(\\\"<>\\\"),f(),\\\"-\\\"*n,f(),f(),f()]\
\\nprint\\\"\\\\n\\\".join(L+map(g,L)[::-1])\"", LabelStyle -> "TextStyling"],
          Annotation[#, 
          "\nfrom random import*\nn=12\nf=lambda \
s=\"\\/\":\"\".join(sample(s*n,n))\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\nL=[s+g(u\"\"+s,0)[::-1]for \
s in\"=\"*n,\"-\"*n,f(),f(\"<>\"),f(),\"-\"*n,f(),f(),f()]\n\
print\"\\n\".join(L+map(g,L)[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[21]}, 
          "\"\\nfrom random import*\\nd=\\\"-\\\"*12\\nf=lambda s=\\\"\\\\/\\\
\":\\\"\\\".join(sample(s*12,12))\\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\\nL=[s+g(u\\\"\\\"+s,0)[::-1]\
for s in\\\"=\\\"*12,d,f(),f(\\\"<>\\\"),f(),d,f(),f(),f()]\\nprint\\\"\\\\n\\\
\".join(L+map(g,L)[::-1])\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nd=\"-\"*12\nf=lambda \
s=\"\\/\":\"\".join(sample(s*12,12))\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\nL=[s+g(u\"\"+s,0)[::-1]for \
s in\"=\"*12,d,f(),f(\"<>\"),f(),d,f(),f(),f()]\n\
print\"\\n\".join(L+map(g,L)[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[22]}, 
          "\"\\nfrom random import*\\nf=lambda \
c:\\\"\\\".join(sample((c+g(c,0))*99,12))\\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\\nL=[s+g(u\\\"\\\"+s,0)[::-1]\
for s in map(f,u\\\"=-/</-///\\\")]\\nprint\\\"\\\\n\\\".join(L+map(g,L)[::-1]\
)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nf=lambda \
c:\"\".join(sample((c+g(c,0))*99,12))\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\nL=[s+g(u\"\"+s,0)[::-1]for \
s in map(f,u\"=-/</-///\")]\nprint\"\\n\".join(L+map(g,L)[::-1])", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[23]}, 
          "\"\\nfrom random import*\\nf=lambda \
c:\\\"\\\".join(sample((c+g(c,0))*99,12))\\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\\nL=[s+g(s,0)[::-1]for s in \
map(f,u\\\"=-/</-///\\\")]\\nprint\\\"\\\\n\\\".join(L+map(g,L)[::-1])\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nf=lambda \
c:\"\".join(sample((c+g(c,0))*99,12))\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\nL=[s+g(s,0)[::-1]for s in \
map(f,u\"=-/</-///\")]\nprint\"\\n\".join(L+map(g,L)[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[24]}, 
          "\"\\nfrom random import*\\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\\nL=[s+g(s,0)[::-1]for s in[\
\\\"\\\".join(sample((c+g(c,0))*99,12))for c in \
u\\\"=-/</-///\\\"]]\\nprint\\\"\\\\n\\\".join(L+map(g,L)[::-1])\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\nL=[s+g(s,0)[::-1]for s \
in[\"\".join(sample((c+g(c,0))*99,12))for c in u\"=-/</-///\"]]\n\
print\"\\n\".join(L+map(g,L)[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[25]}, 
          "\"\\nfrom random import*\\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\\nL=[s+g(s,0)[::-1]for s in[\
\\\"\\\".join(sample((c+g(c,0))*99,12))for c in \
u\\\"=-/</-///\\\"]]\\nprint\\\"\\\\n\\\".join(L+map(g,L)[::-1])\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\nL=[s+g(s,0)[::-1]for s \
in[\"\".join(sample((c+g(c,0))*99,12))for c in u\"=-/</-///\"]]\n\
print\"\\n\".join(L+map(g,L)[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[26]}, 
          "\"\\nfrom random import*\\ng=lambda \
s:s.translate({60:62,62:60,92:47,47:92})\\ndef f(n):\\n if n:c=u\\\"=-/</-///\
\\\"[-n];s=\\\"\\\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];print \
s;f(n-1);print[g(s),s][n==6]\\nf(9)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng=lambda \
s:s.translate({60:62,62:60,92:47,47:92})\ndef f(n):\n if \
n:c=u\"=-/</-///\"[-n];s=\"\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];\
print s;f(n-1);print[g(s),s][n==6]\nf(9)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[27]}, 
          "\"\\nfrom random import*\\ng=lambda \
s:s.translate({60:62,62:60,92:47,47:92})\\ndef f(n):\\n if n:c=u\\\"=-/</-///\
\\\"[-n];s=\\\"\\\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];print \
s;f(n-1);print[g(s),s][n==6]\\nf(9)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng=lambda \
s:s.translate({60:62,62:60,92:47,47:92})\ndef f(n):\n if \
n:c=u\"=-/</-///\"[-n];s=\"\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];\
print s;f(n-1);print[g(s),s][n==6]\nf(9)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[28]}, 
          "\"\\nfrom random import*\\nL=[]\\ng=lambda \
s:s.translate({60:62,62:60,92:47,47:92})\\nfor c in u\\\"///-/</-=\\\":s=\\\"\
\\\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];L=[s]+L+[[g(s),s][c==\\\"<\\\"\
]]\\nprint\\\"\\\\n\\\".join(L)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nL=[]\ng=lambda \
s:s.translate({60:62,62:60,92:47,47:92})\nfor c in \
u\"///-/</-=\":s=\"\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];L=[s]+L+[[g(\
s),s][c==\"<\"]]\nprint\"\\n\".join(L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[29]}, 
          "\"\\nfrom random import*\\ng,*L=lambda \
s:s.translate({60:62,62:60,92:47,47:92}),\\nfor c \
in\\\"///-/</-=\\\":s=\\\"\\\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];L=[\
s]+L+[[g(s),s][c==\\\"<\\\"]]\\n*_,=map(print,L)\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng,*L=lambda \
s:s.translate({60:62,62:60,92:47,47:92}),\nfor c \
in\"///-/</-=\":s=\"\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];L=[s]+L+[[g(\
s),s][c==\"<\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[30]}, 
          "\"\\nfrom random import*\\ng,*L=lambda \
s:[s,s.translate({60:62,62:60,92:47,47:92})],\\nfor c \
in\\\"///-/</-=\\\":s=eval(\\\"''\\\"+\\\".join(sample(g(c),2))\\\"*12);L=[s]+\
L+[g(s)[c!=\\\"<\\\"]]\\n*_,=map(print,L)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng,*L=lambda \
s:[s,s.translate({60:62,62:60,92:47,47:92})],\nfor c \
in\"///-/</-=\":s=eval(\"''\"+\".join(sample(g(c),2))\"*12);L=[s]+L+[g(s)[c!=\
\"<\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[31]}, 
          "\"\\nfrom random import*\\ng,*L=lambda \
s:[s,s.translate({60:62,62:60,92:47,47:92})],\\nfor c \
in\\\"///-/</-=\\\":s=eval(\\\"''\\\"+\\\".join(sample(g(c),2))\\\"*12);L=[s]+\
L+[g(s)[c<\\\"0\\\"]]\\n*_,=map(print,L)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng,*L=lambda \
s:[s,s.translate({60:62,62:60,92:47,47:92})],\nfor c \
in\"///-/</-=\":s=eval(\"''\"+\".join(sample(g(c),2))\"*12);L=[s]+L+[g(s)[c<\"\
0\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[32]}, 
          "\"\\nfrom random import*\\ng,*L=lambda \
s:[s,s.translate({60:62,62:60,92:47,47:92})],\\nfor c \
in\\\"///-/</-=\\\":s=eval(\\\"''\\\"+\\\".join(sample(g(c),2))\\\"*12);L=[s]+\
L+[g(s)[c<\\\"0\\\"]]\\n*_,=map(print,L)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng,*L=lambda \
s:[s,s.translate({60:62,62:60,92:47,47:92})],\nfor c \
in\"///-/</-=\":s=eval(\"''\"+\".join(sample(g(c),2))\"*12);L=[s]+L+[g(s)[c<\"\
0\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[33]}, 
          "\"\\nfrom random import*\\nL=[]\\nfor c \
in\\\"///-/</-=\\\":s=eval(\\\"''\\\"+\\\".join(sample([c,dict(zip('</-=','>\\\
\\-='))[c]],2))\\\"*12);L=[s]+L+[[s,s[::-1]][c<\\\"0\\\"]]\\n*_,=map(print,L)\
\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nL=[]\nfor c \
in\"///-/</-=\":s=eval(\"''\"+\".join(sample([c,dict(zip('</-=','>\\-='))[c]],\
2))\"*12);L=[s]+L+[[s,s[::-1]][c<\"0\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[34]}, 
          "\"\\nfrom random import*\\nL=[]\\nfor c \
in\\\"///-/</-=\\\":s=eval(\\\"''\\\"+\\\".join(sample([c,'>\\\\-='['</-='.\
index(c)]],2))\\\"*12);L=[s]+L+[[s,s[::-1]][c<\\\"0\\\"]]\\n*_,=map(print,L)\"\
", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nL=[]\nfor c \
in\"///-/</-=\":s=eval(\"''\"+\".join(sample([c,'>\\-='['</-='.index(c)]],2))\
\"*12);L=[s]+L+[[s,s[::-1]][c<\"0\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[35]}, 
          "\"\\nfrom random import*\\nL=[]\\nfor n \
in\\\"444046402\\\":s=eval(\\\"''\\\"+\\\".join(sample('--==\\\\/<>'[int(n):][\
:2],2))\\\"*12);L=[s]+L+[[s,s[::-1]][n<\\\"5\\\"]]\\n*_,=map(print,L)\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nL=[]\nfor n \
in\"444046402\":s=eval(\"''\"+\".join(sample('--==\\/<>'[int(n):][:2],2))\"*\
12);L=[s]+L+[[s,s[::-1]][n<\"5\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[36]}, 
          "\"\\nfrom random import*\\nL=[]\\nfor n \
in\\\"444046402\\\":s=eval(\\\"''\\\"+\\\".join(sample('--==\\\\/<>'[int(n):][\
:2],2))\\\"*12);L=[s]+L+[[s,s[::-1]][n<\\\"5\\\"]]\\n*_,=map(print,L)\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nL=[]\nfor n \
in\"444046402\":s=eval(\"''\"+\".join(sample('--==\\/<>'[int(n):][:2],2))\"*\
12);L=[s]+L+[[s,s[::-1]][n<\"5\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[37]}, 
          "\"\\nfrom random import*\\nk,*L=80703,\\nwhile \
k:s=eval(\\\"''\\\"+\\\".join(sample('--==<>\\\\/'[k%4*2:][:2],2))\\\"*12);L=[\
s]+L+[s[::(-1)**k]];k//=4\\n*_,=map(print,L)\"", LabelStyle -> "TextStyling"],
          Annotation[#, 
          "\nfrom random import*\nk,*L=80703,\nwhile \
k:s=eval(\"''\"+\".join(sample('--==<>\\/'[k%4*2:][:2],2))\"*12);L=[s]+L+[s[::\
(-1)**k]];k//=4\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[38]}, 
          "\"\\nF=o=>[...(z='/\\\\\\\\/-/<\\\\\\\\-=')].map((c,i,_,y=[z,'\\\\\
\\\\/\\\\\\\\-\\\\\\\\>/-='],\\nq=[for(_ \
of-z+z)Math.random()*2|0],\\nQ=k=>q.map(v=>y[v^k^1][i]).concat(q.map(v=>y[v^k]\
[i]).reverse()).join('')+'\\\\n')=>\\no=Q()+o+Q(1)\\n,o='')&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=o=>[...(z='/\\\\/-/<\\\\-=')].map((c,i,_,y=[z,'\\\\/\\\\-\\\\>/\
-='],\nq=[for(_ of-z+z)Math.random()*2|0],\n\
Q=k=>q.map(v=>y[v^k^1][i]).concat(q.map(v=>y[v^k][i]).reverse()).join('')+'\\\
n')=>\no=Q()+o+Q(1)\n,o='')&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[39]}, 
          "\"\\nF=o=>[...(z='/\\\\\\\\/-/<\\\\\\\\-=')].map((c,i,_,y=[z,'\\\\\
\\\\/\\\\\\\\-\\\\\\\\>/-='],\\nq=[for(_ \
of-z+z)Math.random()*2|0],\\nQ=k=>q.map(v=>y[v^!k][i]).concat(q.map(v=>y[v^k][\
i]).reverse()).join('')+'\\\\n')=>\\no=Q()+o+Q(c!='<')\\n,o='')&&o\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nF=o=>[...(z='/\\\\/-/<\\\\-=')].map((c,i,_,y=[z,'\\\\/\\\\-\\\\>/\
-='],\nq=[for(_ of-z+z)Math.random()*2|0],\n\
Q=k=>q.map(v=>y[v^!k][i]).concat(q.map(v=>y[v^k][i]).reverse()).join('')+'\\n'\
)=>\no=Q()+o+Q(c!='<')\n,o='')&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[40]}, 
          "\"\\nF=o=>[...(z='/\\\\\\\\/-/<\\\\\\\\-=')].map((c,i,_,y=[z,'\\\\\
\\\\/\\\\\\\\-\\\\\\\\>/-='],\\nq=[for(_ \
of-z+z)Math.random()*2|0],\\nQ=k=>q.map(v=>y[v^!k][i]).concat(q.map(v=>y[v^k][\
i]).reverse()).join('')+'\\\\n')=>\\no=Q()+o+Q(c!='<')\\n,o='')&&o\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nF=o=>[...(z='/\\\\/-/<\\\\-=')].map((c,i,_,y=[z,'\\\\/\\\\-\\\\>/\
-='],\nq=[for(_ of-z+z)Math.random()*2|0],\n\
Q=k=>q.map(v=>y[v^!k][i]).concat(q.map(v=>y[v^k][i]).reverse()).join('')+'\\n'\
)=>\no=Q()+o+Q(c!='<')\n,o='')&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[41]}, 
          "\"\\nF=o=>[...z='/\\\\\\\\/-/<\\\\\\\\-='].map((c,i,_,y=[z,'\\\\\\\
\\/\\\\\\\\-\\\\\\\\>/-='],q=[for(_ \
of-z+z)Math.random(Q=k=>q.map(v=>y[v^!k][i]).concat(q.map(v=>y[v^k][i]).\
reverse()).join('')+`\\n`)*2])=>o=Q()+o+Q(c!='<'),o='')&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=o=>[...z='/\\\\/-/<\\\\-='].map((c,i,_,y=[z,'\\\\/\\\\-\\\\>/-=\
'],q=[for(_ \
of-z+z)Math.random(Q=k=>q.map(v=>y[v^!k][i]).concat(q.map(v=>y[v^k][i]).\
reverse()).join('')+`\n`)*2])=>o=Q()+o+Q(c!='<'),o='')&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[42]}, 
          "\"\\nF=(o='')=>[...z='/\\\\\\\\/-/<\\\\\\\\-='].map((c,i,_,y=[z,'\\\
\\\\\\/\\\\\\\\-\\\\\\\\>/-='],q=[for(_ \
of-z+z)Math.random(Q=k=>q.map(v=>r=y[v^!k][i]+r+y[v^k][i],r='')&&r+`\\n`)*2])=\
>o=Q()+o+Q(i!=5))&&o\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[...z='/\\\\/-/<\\\\-='].map((c,i,_,y=[z,'\\\\/\\\\-\\\
\\>/-='],q=[for(_ \
of-z+z)Math.random(Q=k=>q.map(v=>r=y[v^!k][i]+r+y[v^k][i],r='')&&r+`\n\
`)*2])=>o=Q()+o+Q(i!=5))&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[43]}, 
          "\"\\n=G\\\"/<>\\\\\\\\\\\"K\\\"/\\\\\\\\\\\"Jm+d_XdG_GmsmOk12[\\\\=\
\\\\-K\\\"<>\\\"K\\\\-KKK)jb+J_mXdK_KJ\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n=G\"/<>\\\\\"K\"/\\\\\"Jm+d_XdG_GmsmOk12[\\=\\-K\"<>\"K\\-KKK)jb+\
J_mXdK_KJ", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[44]}, 
          "\"\\n=G\\\"\\\\<>/\\\"K\\\"\\\\/\\\"Jm+d_XdG_GmsmOk12[\\\\=\\\\-K\\\
\"<>\\\"K\\\\-KKK;jb+J_mXdK_KJ\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n=G\"\\<>/\"K\"\\/\"Jm+d_XdG_GmsmOk12[\\=\\-K\"<>\"K\\-KKK;jb+J_\
mXdK_KJ", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[45]}, 
          "\"\\n=G\\\"\\\\<>/\\\"K\\\"\\\\/\\\"Jm+d_XdG_GmsmOk12[\\\\=\\\\-K\\\
\"<>\\\"K\\\\-KKK;jb+J_mXdK_KJ\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n=G\"\\<>/\"K\"\\/\"Jm+d_XdG_GmsmOk12[\\=\\-K\"<>\"K\\-KKK;jb+J_\
mXdK_KJ", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[46]}, 
          "\"\\nJ\\\"\\\\<>/\\\"K\\\"\\\\/\\\"L+b_mXdK_Kbjbym+d_XdJ_JmsmOk12[\
\\\\=\\\\-K-JKK\\\\-KKK\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nJ\"\\<>/\"K\"\\/\"L+b_mXdK_Kbjbym+d_XdJ_JmsmOk12[\\=\\-K-JKK\\-\
KKK", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[47]}, 
          "\"\\nL\[LeftArrow]+,3-\:233d\[Diamond]'==--/\\\\<>'[\[UpArrow]((+,\
\:233d)5458196\[DownTee]\:23689/8)+L{L?12\:23742}\[DoubleDot]\:23739]\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nL\[LeftArrow]+,3-\:233d\[Diamond]'==--/\\<>'[\[UpArrow]((+,\:233d\
)5458196\[DownTee]\:23689/8)+L{L?12\:23742}\[DoubleDot]\:23739]", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[48]}, 
          "\"\\nL\[LeftArrow]+,3-\:233d\[Diamond]'==--/\\\\<><'[\[UpArrow](\
732586738601744\[DownTee]\:236818/8)+L{L?12\:23742}\[DoubleDot]\:23739]\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nL\[LeftArrow]+,3-\:233d\[Diamond]'==--/\\<><'[\[UpArrow](\
732586738601744\[DownTee]\:236818/8)+L{L?12\:23742}\[DoubleDot]\:23739]", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[49]}, 
          "\"\\nL\[LeftArrow]+,3-\:233d\[Diamond]'==--/\\\\<><'[\[UpArrow](\
732451451260688\[DownTee]\:236818/8)+L{L?12\:23742}\[DoubleDot]\:23739]\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nL\[LeftArrow]+,3-\:233d\[Diamond]'==--/\\<><'[\[UpArrow](\
732451451260688\[DownTee]\:236818/8)+L{L?12\:23742}\[DoubleDot]\:23739]", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[50]}, 
          "\"\\n|s i f v h|s:='====----/\\\\/\\\\/<><<>'.f:=[:c|s at:(s \
indexOf:c)+i].v:=#(),'=-/</-///'collect:[:c|h:=(String \
new:12)collect:[:x|i:=2atRandom.f value:c].i:=1.h,(h reverse \
collect:f)].i:=3.String cr join:v,(v reverse collect:[:k|k collect:f])\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n|s i f v h|s:='====----/\\/\\/<><<>'.f:=[:c|s at:(s \
indexOf:c)+i].v:=#(),'=-/</-///'collect:[:c|h:=(String \
new:12)collect:[:x|i:=2atRandom.f value:c].i:=1.h,(h reverse \
collect:f)].i:=3.String cr join:v,(v reverse collect:[:k|k collect:f])", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[51]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')o=(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.map(w=y=>c[i-y^x]).concat(z.map(y=>\
c[i-y^!x]).reverse()).join('')+`\\n`)*2|0])&&r()+o+r(i<7)]&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')o=(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.map(w=y=>c[i-y^x]).concat(z.map(y=>c[i-\
y^!x]).reverse()).join('')+`\n`)*2|0])&&r()+o+r(i<7)]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[52]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.map(y=>c[i-y^x]).concat(z.map(y=>c[\
i-y^!x]).reverse()).join('')+`\\n`)*2|0],o=r()+o+r(i<7))]&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.map(y=>c[i-y^x]).concat(z.map(y=>c[i-y^\
!x]).reverse()).join('')+`\n`)*2|0],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[53]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.map(y=>c[i-y^x]).concat(z.map(y=>c[\
i-y^!x]).reverse()).join('')+`\\n`)*2|0],o=r()+o+r(i<7))]&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.map(y=>c[i-y^x]).concat(z.map(y=>c[i-y^\
!x]).reverse()).join('')+`\n`)*2|0],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[54]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.map(y=>c[i-y^x]).concat(z.map(y=>c[\
i-y^!x]).reverse()).join('')+`\\n`)*2|0],o=r()+o+r(i<7))]&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.map(y=>c[i-y^x]).concat(z.map(y=>c[i-y^\
!x]).reverse()).join('')+`\n`)*2|0],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[55]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.map(y=>c[i^y^x]).concat(z.map(y=>c[\
i^y^!x]).reverse()).join('')+`\\n`)*2],o=r()+o+r(i<7))]&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.map(y=>c[i^y^x]).concat(z.map(y=>c[i^y^\
!x]).reverse()).join('')+`\n`)*2],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[56]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.map($=y=>c[i^y^x]).concat(z.map($,\
x^=1).reverse()).join('')+`\\n`)*2],o=r()+o+r(i<7))]&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.map($=y=>c[i^y^x]).concat(z.map($,x^=1)\
.reverse()).join('')+`\n`)*2],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[57]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.reduce((s,y)=>c[w=i^y^x]+s+c[w^1],'\
')+`\\n`)*2],o=r()+o+r(i<7))]&&o\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.reduce((s,y)=>c[w=i^y^x]+s+c[w^1],'')+`\
\n`)*2],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[58]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.reduce((s,y)=>c[w=i^y^x]+s+c[w^1],'\
')+`\\n`)*2],o=r()+o+r(i<7))]&&o\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.reduce((s,y)=>c[w=i^y^x]+s+c[w^1],'')+`\
\n`)*2],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[59]}, 
          "\"\\n|r s h m n \
p|s:='==--/\\\\<>'.r:=(1<<108)atRandom.h:=''.m:=0.(16to:0by:-2),(0to:16by:2)\
do:[:i|n:=3bitAnd:28266>>i.p:=1.(11to:0by:-1),(0to:11)do:[:j|h:=h,(s \
at:n*2+1+((r-1bitAt:6*i+j+1)bitXor:(101bitAt:3-n*4+m+p))).j=0and:[p:=2]].i=\
0and:[m:=2].h:=h,#[13]].h\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n|r s h m n \
p|s:='==--/\\<>'.r:=(1<<108)atRandom.h:=''.m:=0.(16to:0by:-2),(0to:16by:2)do:[\
:i|n:=3bitAnd:28266>>i.p:=1.(11to:0by:-1),(0to:11)do:[:j|h:=h,(s \
at:n*2+1+((r-1bitAt:6*i+j+1)bitXor:(101bitAt:3-n*4+m+p))).j=0and:[p:=2]].i=\
0and:[m:=2].h:=h,#[13]].h", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[60]}, 
          "\"\\n|r s h m n \
p|s:='==--/\\\\<>'.r:=(1<<108)atRandom.h:=''.m:=0.(16to:0by:-2),(0to:16by:2)\
do:[:i|n:=3bitAnd:28266>>i.p:=0.(11to:0by:-1),(0to:11)do:[:j|h:=h,(s \
at:n*2+1+(r-1>>(6*i+j)+(101>>(3-n*4+m+p))bitAnd:1)).j=0and:[p:=1]].i=0and:[m:=\
2].h:=h,#[13]].h\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n|r s h m n \
p|s:='==--/\\<>'.r:=(1<<108)atRandom.h:=''.m:=0.(16to:0by:-2),(0to:16by:2)do:[\
:i|n:=3bitAnd:28266>>i.p:=0.(11to:0by:-1),(0to:11)do:[:j|h:=h,(s \
at:n*2+1+(r-1>>(6*i+j)+(101>>(3-n*4+m+p))bitAnd:1)).j=0and:[p:=1]].i=0and:[m:=\
2].h:=h,#[13]].h", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[61]}, 
          "\"\\nimport random as w\\ndef f(a):\\n for x in a:\\n  if x \
in['/','<']:b=[w.choice([x,q[x]]) for u in [x]*12]; print ''.join(b+[q[g] for \
g in list(reversed(b))])\\n  else: print \
24*x\\nq={'/':'\\\\\\\\','<':'>','>':'<','\\\\\\\\':'/'};l=list('=-/</-///');\
f(l);f(reversed(l))\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nimport random as w\ndef f(a):\n for x in a:\n  if x \
in['/','<']:b=[w.choice([x,q[x]]) for u in [x]*12]; print ''.join(b+[q[g] for \
g in list(reversed(b))])\n  else: print 24*x\nq={'/':'\\\\','<':'>','>':'<','\
\\\\':'/'};l=list('=-/</-///');f(l);f(reversed(l))", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[62]}, 
          "\"\\nimport \
random\\nm=[];l=list('=-/>/-///');d={'/':'\\\\\\\\','<':'>','>':'<','\\\\\\\\'\
:'/'};k=reversed\\ndef v(w):return[d[x]for x in w]\\nfor e in l:\\n if e in \
d:f=[random.choice([e,d[e]])for x in range(9)];t=''.join(f+v(k(f)))\\n \
else:t=18*e\\nprint t;m=m+[''.join(v(t)if'/'in t else t)]\\nprint \
'\\\\n'.join(k(m))\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nimport random\n\
m=[];l=list('=-/>/-///');d={'/':'\\\\','<':'>','>':'<','\\\\':'/'};k=reversed\
\ndef v(w):return[d[x]for x in w]\nfor e in l:\n if e in \
d:f=[random.choice([e,d[e]])for x in range(9)];t=''.join(f+v(k(f)))\n \
else:t=18*e\nprint t;m=m+[''.join(v(t)if'/'in t else t)]\nprint \
'\\n'.join(k(m))", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[63]}, 
          "\"\\nimport \
random\\nm=[];d={'/':'\\\\\\\\','<':'>','>':'<','\\\\\\\\':'/'};k=reversed\\\
ndef v(w):return[d[x]for x in w]\\nfor e in list('=-/>/-///'):\\n if e in \
d:f=[random.choice([e,d[e]])for x in range(9)];t=''.join(f+v(k(f)))\\n \
else:t=18*e\\n print t;m=m+[''.join(v(t)if'/'in t or'\\\\\\\\'in t else \
t)]\\nprint '\\\\n'.join(k(m))\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nimport random\n\
m=[];d={'/':'\\\\','<':'>','>':'<','\\\\':'/'};k=reversed\ndef \
v(w):return[d[x]for x in w]\nfor e in list('=-/>/-///'):\n if e in \
d:f=[random.choice([e,d[e]])for x in range(9)];t=''.join(f+v(k(f)))\n \
else:t=18*e\n print t;m=m+[''.join(v(t)if'/'in t or'\\\\'in t else t)]\nprint \
'\\n'.join(k(m))", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[64]}, 
          "\"\\nimport \
random\\nm,d=[],{'/':'\\\\\\\\','<':'>','>':'<','\\\\\\\\':'/'};k=reversed\\\
nv=lambda w:[d[x]for x in w]\\nfor e in list('=-/>/-///'):\\n if e in \
d:f=[random.choice([e,d[e]])for x in[0]*9];t=''.join(f+v(k(f)))\\n \
else:t=18*e\\n print t;m+=[''.join(v(t)if'/'in t or'\\\\\\\\'in t else \
t)]\\nprint '\\\\n'.join(k(m))\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nimport random\n\
m,d=[],{'/':'\\\\','<':'>','>':'<','\\\\':'/'};k=reversed\nv=lambda \
w:[d[x]for x in w]\nfor e in list('=-/>/-///'):\n if e in \
d:f=[random.choice([e,d[e]])for x in[0]*9];t=''.join(f+v(k(f)))\n else:t=18*e\
\n print t;m+=[''.join(v(t)if'/'in t or'\\\\'in t else t)]\nprint \
'\\n'.join(k(m))", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[65]}, 
          "\"\\nimport \
random\\nm,d=[],{'/':'\\\\\\\\','<':'>','>':'<','\\\\\\\\':'/'};k=reversed\\\
nv=lambda w:[d[x]for x in w]\\nfor e in list('=-/>/-///'):\\n if e in \
d:f=[random.choice([e,d[e]])for x in[0]*12];t=''.join(f+v(k(f)))\\n \
else:t=24*e\\n print t;m+=[''.join(v(t)if'/'in t or'\\\\\\\\'in t else \
t)]\\nprint '\\\\n'.join(k(m))\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nimport random\n\
m,d=[],{'/':'\\\\','<':'>','>':'<','\\\\':'/'};k=reversed\nv=lambda \
w:[d[x]for x in w]\nfor e in list('=-/>/-///'):\n if e in \
d:f=[random.choice([e,d[e]])for x in[0]*12];t=''.join(f+v(k(f)))\n \
else:t=24*e\n print t;m+=[''.join(v(t)if'/'in t or'\\\\'in t else t)]\nprint \
'\\n'.join(k(m))", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[66]}, 
          "\"\\nfrom random import*\\nm,d=[],dict(zip(\\\"\\\\/<>=-\\\",\\\"/\
\\\\><=-\\\"))\\nv=lambda w:[d[x]for x in w]\\nfor e in \
'=-/>/-///':f=[choice([e,d[e]])for x in[0]*12];t=''.join(f+v(f[::-1]));print \
t;m+=''.join(e=='/'and v(t)or t),\\nprint'\\\\n'.join(m[::-1])\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nm,d=[],dict(zip(\"\\/<>=-\",\"/\\><=-\"))\n\
v=lambda w:[d[x]for x in w]\nfor e in '=-/>/-///':f=[choice([e,d[e]])for x \
in[0]*12];t=''.join(f+v(f[::-1]));print t;m+=''.join(e=='/'and v(t)or t),\n\
print'\\n'.join(m[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[67]}, 
          "\"\\na='\\\\/\\\\\\\\'\\nb='\\\\\\\\\\\\/'\\nt=Array.new(9){x=''\\\
n12.times{x+=a[rand(2)]}\\nx+x.reverse.tr(a,b)}\\nt[0]='='*24\\nt[1]=t[5]='-'*\
24\\nt[3].tr!a,'<>'\\nputs t,((t.reverse.join'\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\na='\\/\\\\'\nb='\\\\\\/'\nt=Array.new(9){x=''\n\
12.times{x+=a[rand(2)]}\nx+x.reverse.tr(a,b)}\nt[0]='='*24\nt[1]=t[5]='-'*24\n\
t[3].tr!a,'<>'\nputs t,((t.reverse.join'", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[68]}, 
          "\"\\na='/\\\\\\\\'\\nb='\\\\\\\\\\\\/'\\nt=Array.new(9){x=''\\n12.\
times{x+=a[rand(2)]}\\nx+x.reverse.tr(a,b)}\\nt[0]=?=*24\\nt[1]=t[5]=?-*24\\\
nt[3].tr!a,'<>'\\nputs t,((t.reverse*'\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\na='/\\\\'\nb='\\\\\\/'\nt=Array.new(9){x=''\n\
12.times{x+=a[rand(2)]}\nx+x.reverse.tr(a,b)}\nt[0]=?=*24\nt[1]=t[5]=?-*24\n\
t[3].tr!a,'<>'\nputs t,((t.reverse*'", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[91]}, 
          "\"\\nfrom random import*\\nf=lambda \
a,b,t:t.replace(a,'*').replace(b,a).replace('*',b)\\nk=lambda \
a:''.join(sample(a*12,12))\\nc='-'*24\\ne=k('<>')\\nh=e+f('<','>',e[::-1])\\\
nj=[d+f('/','\\\\\\\\',d[::-1])for d in[k('\\\\\\\\/')for i \
in'quilt']]\\ng=['='*24,c,j[0],h,j[1],c]+j[2:]\\nprint'\\\\n'.join(g+[f('/','\
\\\\\\\\',d)for d in g[::-1]])\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nf=lambda \
a,b,t:t.replace(a,'*').replace(b,a).replace('*',b)\nk=lambda \
a:''.join(sample(a*12,12))\nc='-'*24\ne=k('<>')\nh=e+f('<','>',e[::-1])\n\
j=[d+f('/','\\\\',d[::-1])for d in[k('\\\\/')for i in'quilt']]\n\
g=['='*24,c,j[0],h,j[1],c]+j[2:]\nprint'\\n'.join(g+[f('/','\\\\',d)for d in \
g[::-1]])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[92]}, 
          "\"\\nfrom random import*\\nf=lambda \
a,b,t:t.replace(a,'*').replace(b,a).replace('*',b)\\nk=lambda \
a:''.join(sample(a*12,12))\\nc='-'*24\\ne=k('<>')\\nh=e+f('<','>',e[::-1])\\\
nj=[d+f('/','\\\\\\\\',d[::-1])for d in[k('\\\\\\\\/')for i \
in'quilt']]\\ng=['='*24,c,j[0],h,j[1],c]+j[2:]\\nprint'\\\\n'.join(g+[f('/','\
\\\\\\\\',d)for d in g[::-1]])\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nf=lambda \
a,b,t:t.replace(a,'*').replace(b,a).replace('*',b)\nk=lambda \
a:''.join(sample(a*12,12))\nc='-'*24\ne=k('<>')\nh=e+f('<','>',e[::-1])\n\
j=[d+f('/','\\\\',d[::-1])for d in[k('\\\\/')for i in'quilt']]\n\
g=['='*24,c,j[0],h,j[1],c]+j[2:]\nprint'\\n'.join(g+[f('/','\\\\',d)for d in \
g[::-1]])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[93]}, 
          "\"\\n'='-\\\"\\\\/\\\"\\\"<>\\\"1$'-1$__]{C*mrC<_W%\\\"\\\\<>/\\\"_\
W%er+}%N*N1$W%\\\"<>\\\"_W%er\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<_W%\"\\<>/\"_W%er+}%N*N1$W%\"<>\
\"_W%er", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[94]}, 
          "\"\\n'='-\\\"\\\\/\\\"\\\"<>\\\"1$'-1$__]{C*mrC<{_W%}:F~\\\"\\\\<>/\
\\\"Fer+}%N*F\\\"<>\\\"FerN\\\\\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%N*F\"<>\"\
FerN\\", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[95]}, 
          "\"\\n'='-\\\"\\\\/\\\"\\\"<>\\\"1$'-1$__]{C*mrC<{_W%}:F~\\\"\\\\<>/\
\\\"Fer+}%N*F\\\"<>\\\"FerN\\\\\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n'='-\"\\/\"\"<>\"1$'-1$__]{C*mrC<{_W%}:F~\"\\<>/\"Fer+}%N*F\"<>\"\
FerN\\", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[96]}, 
          "\"\\n\\\"=-/</-///\\\"{C*_\\\"\\\\<>/\\\":S{_W%}:F~er+mrC<FSFer+}%\
N*F\\\"<>\\\"FerN\\\\\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*_\"\\<>/\":S{_W%}:F~er+mrC<FSFer+}%N*F\"<>\"FerN\
\\", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[97]}, 
          "\"\\n\\\"=-/</-///\\\"{C*\\\"<\\\\/>\\\":S{1$W%\\\\_W%er}:F~+mrC<\
SF+}%N*S3%FN\\\\\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*\"<\\/>\":S{1$W%\\_W%er}:F~+mrC<SF+}%N*S3%FN\\", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[98]}, 
          "\"\\n\\\"=-/</-///\\\"{C*\\\"<\\\\/>\\\":S{1$W%\\\\_W%er}:F~+mrC<\
SFN}%:+S3%F(\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*\"<\\/>\":S{1$W%\\_W%er}:F~+mrC<SFN}%:+S3%F(", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[99]}, 
          "\"\\n\\\"=-/</-///\\\"{C*1{\\\"<\\\\/>\\\"%1$W%\\\\_W%er}:F~+mrC<\
1FN}%:+3F(\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%:+3F(", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[100]}, 
          "\"\\n\\\"=-/</-///\\\"{C*1{\\\"<\\\\/>\\\"%1$W%\\\\_W%er}:F~+mrC<\
1FN}%:+3F(\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%:+3F(", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[101]}, 
          "\"\\n\\\"=-/</-///\\\"{C*1{\\\"<\\\\/>\\\"%1$W%\\\\_W%er}:F~+mrC<\
1FN}%s3F(\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%s3F(", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[102]}, 
          "\"\\n\\\"=-/</-///\\\"{C*1{\\\"<\\\\/>\\\"%1$W%\\\\_W%er}:F~+mrC<\
1FN}%s3F(\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n\"=-/</-///\"{C*1{\"<\\/>\"%1$W%\\_W%er}:F~+mrC<1FN}%s3F(", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[103]}, 
          "\"\\n<?function a($t){return \
strrev(str_replace(['/','<','\\\\\\\\','>','a','b'],['a','b','/','<','\\\\\\\\\
','>'],$t));}function \
b($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return$s;}$a=[str_\
repeat('=',12),str_repeat('-', \
12),b(12,'/','\\\\\\\\'),b(12,'<','>'),b(12,'/','\\\\\\\\'),str_repeat('-',12)\
];while(count($a)<9){$a[]=b(12,'/','\\\\\\\\');}for($b=8;$b>=0;$b--){$a[$b].=\
a($a[$b]);$a[]=strrev($a[$b]);}echo implode(\\\"\\\\n\\\",$a);\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\n<?function a($t){return \
strrev(str_replace(['/','<','\\\\','>','a','b'],['a','b','/','<','\\\\','>'],$\
t));}function \
b($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return$s;}$a=[str_\
repeat('=',12),str_repeat('-', \
12),b(12,'/','\\\\'),b(12,'<','>'),b(12,'/','\\\\'),str_repeat('-',12)];while(\
count($a)<9){$a[]=b(12,'/','\\\\');}for($b=8;$b>=0;$b--){$a[$b].=a($a[$b]);$a[\
]=strrev($a[$b]);}echo implode(\"\\n\",$a);", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[104]}, 
          "\"\\n<?$a='str_replace';$b='str_repeat';function \
a($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return@$s;}$c=[$b('=',\
12),$b('-',12),a(12,'/','\\\\\\\\'),a(12,'<','>'),a(12,'/','\\\\\\\\'),$b('-',\
12)];while(count($c)<9){$c[]=a(12,'/','\\\\\\\\');}for($d=9;$d--;){$c[$d].=\
strrev($a(['/','<','\\\\\\\\','>',1,2],[1,2,'/','<','\\\\\\\\','>'],$c[$d]));$\
c[]=$a(['/','\\\\\\\\',1],[1,'/','\\\\\\\\'],$c[$d]);}echo \
implode(\\\"\\\\n\\\",$c);\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n<?$a='str_replace';$b='str_repeat';function \
a($l,$a,$b){while(strlen(@$s)<$l){@$s.=rand(0,1)?$a:$b;}return@$s;}$c=[$b('=',\
12),$b('-',12),a(12,'/','\\\\'),a(12,'<','>'),a(12,'/','\\\\'),$b('-',12)];\
while(count($c)<9){$c[]=a(12,'/','\\\\');}for($d=9;$d--;){$c[$d].=strrev($a(['\
/','<','\\\\','>',1,2],[1,2,'/','<','\\\\','>'],$c[$d]));$c[]=$a(['/','\\\\',\
1],[1,'/','\\\\'],$c[$d]);}echo implode(\"\\n\",$c);", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[105]}, 
          "\"\\n<?$a=str_replace;$b=str_repeat;function \
a($l,$a,$b){while(strlen($s)<$l){$s.=rand(0,1)?$a:$b;}return$s;}$c=[$b('=',12)\
,$b('-',12),a(12,'/','\\\\\\\\'),a(12,'<','>'),a(12,'/','\\\\\\\\'),$b('-',12)\
];while(count($c)<9){$c[]=a(12,'/','\\\\\\\\');}for($d=9;$d--;){$c[$d].=\
strrev($a(['/','<','\\\\\\\\','>',1,2],[1,2,'/','<','\\\\\\\\','>'],$c[$d]));$\
c[]=$a(['/','\\\\\\\\',1],[1,'/','\\\\\\\\'],$c[$d]);}echo \
implode(\\\"\\n\\\",$c);\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n<?$a=str_replace;$b=str_repeat;function \
a($l,$a,$b){while(strlen($s)<$l){$s.=rand(0,1)?$a:$b;}return$s;}$c=[$b('=',12)\
,$b('-',12),a(12,'/','\\\\'),a(12,'<','>'),a(12,'/','\\\\'),$b('-',12)];while(\
count($c)<9){$c[]=a(12,'/','\\\\');}for($d=9;$d--;){$c[$d].=strrev($a(['/','<'\
,'\\\\','>',1,2],[1,2,'/','<','\\\\','>'],$c[$d]));$c[]=$a(['/','\\\\',1],[1,'\
/','\\\\'],$c[$d]);}echo implode(\"\n\",$c);", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[106]}, 
          "\"\\nfrom random import*\\nn=12\\nl=u\\\"-\\\"*n\\nf=lambda s=\\\"\
\\\\/\\\":u\\\"\\\".join(sample(s*n,n))\\nL=u\\\"=\\\"*n,l,f(),f(\\\"<>\\\"),\
f(),l,f(),f(),f()\\nfor s in L+L[::-1]:print s+s.translate({ord(x):ord(y)for \
x,y in zip(\\\"\\\\/<>\\\",\\\"/\\\\><\\\")})[::-1]\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nn=12\nl=u\"-\"*n\nf=lambda \
s=\"\\/\":u\"\".join(sample(s*n,n))\n\
L=u\"=\"*n,l,f(),f(\"<>\"),f(),l,f(),f(),f()\nfor s in L+L[::-1]:print \
s+s.translate({ord(x):ord(y)for x,y in zip(\"\\/<>\",\"/\\><\")})[::-1]", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[107]}, 
          "\"\\nfrom random import*\\nn=12\\nl=u\\\"-\\\"*n\\nf=lambda s=\\\"\
\\\\/\\\":u\\\"\\\".join(sample(s*n,n))\\ng=lambda \
s:s.translate({ord(x):ord(y)for x,y in zip(\\\"\\\\/<>\\\",\\\"/\\\\><\\\")})\
\\nL=u\\\"=\\\"*n,l,f(),f(\\\"<>\\\"),f(),l,f(),f(),f()\\nL=[s+g(s)[::-1]for \
s in L]\\nL+=map(g,L)[::-1]\\nL[3]=L[14]\\nprint\\\"\\\\n\\\".join(L)\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nn=12\nl=u\"-\"*n\nf=lambda \
s=\"\\/\":u\"\".join(sample(s*n,n))\ng=lambda s:s.translate({ord(x):ord(y)for \
x,y in zip(\"\\/<>\",\"/\\><\")})\n\
L=u\"=\"*n,l,f(),f(\"<>\"),f(),l,f(),f(),f()\nL=[s+g(s)[::-1]for s in L]\n\
L+=map(g,L)[::-1]\nL[3]=L[14]\nprint\"\\n\".join(L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[108]}, 
          "\"\\nfrom random import*\\nn=12\\nl=u\\\"-\\\"*n\\nf=lambda s=\\\"\
\\\\/\\\":u\\\"\\\".join(sample(s*n,n))\\ng=lambda \
s:s.translate({ord(x):ord(y)for x,y in zip(\\\"\\\\/<>\\\",\\\"/\\\\><\\\")})\
\\nL=[s+g(s)[::-1]for s in \
u\\\"=\\\"*n,l,f(),f(\\\"<>\\\"),f(),l,f(),f(),f()]\\nL+=map(g,L)[::-1]\\nL[3]\
=L[14]\\nprint\\\"\\\\n\\\".join(L)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nn=12\nl=u\"-\"*n\nf=lambda \
s=\"\\/\":u\"\".join(sample(s*n,n))\ng=lambda s:s.translate({ord(x):ord(y)for \
x,y in zip(\"\\/<>\",\"/\\><\")})\nL=[s+g(s)[::-1]for s in \
u\"=\"*n,l,f(),f(\"<>\"),f(),l,f(),f(),f()]\nL+=map(g,L)[::-1]\nL[3]=L[14]\n\
print\"\\n\".join(L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[109]}, 
          "\"\\nfrom random import*\\nn=12\\nf=lambda \
s=\\\"\\\\/\\\":\\\"\\\".join(sample(s*n,n))\\ng=lambda \
s,t=\\\"\\\\/><\\\":s.translate({ord(x):ord(y)for x,y in \
zip(t,\\\"/\\\\><\\\")})\\nL=[s+g(u\\\"\\\"+s,\\\"\\\\/<>\\\")[::-1]for s \
in\\\"=\\\"*n,\\\"-\\\"*n,f(),f(\\\"<>\\\"),f(),\\\"-\\\"*n,f(),f(),f()]\\\
nprint\\\"\\\\n\\\".join(L+map(g,L)[::-1])\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nn=12\nf=lambda \
s=\"\\/\":\"\".join(sample(s*n,n))\ng=lambda \
s,t=\"\\/><\":s.translate({ord(x):ord(y)for x,y in zip(t,\"/\\><\")})\n\
L=[s+g(u\"\"+s,\"\\/<>\")[::-1]for s \
in\"=\"*n,\"-\"*n,f(),f(\"<>\"),f(),\"-\"*n,f(),f(),f()]\n\
print\"\\n\".join(L+map(g,L)[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[110]}, 
          "\"\\nfrom random import*\\nn=12\\nf=lambda \
s=\\\"\\\\/\\\":\\\"\\\".join(sample(s*n,n))\\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\\nL=[s+g(u\\\"\\\"+s,0)[::-1]\
for s in\\\"=\\\"*n,\\\"-\\\"*n,f(),f(\\\"<>\\\"),f(),\\\"-\\\"*n,f(),f(),f()]\
\\nprint\\\"\\\\n\\\".join(L+map(g,L)[::-1])\"", LabelStyle -> "TextStyling"],
          Annotation[#, 
          "\nfrom random import*\nn=12\nf=lambda \
s=\"\\/\":\"\".join(sample(s*n,n))\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\nL=[s+g(u\"\"+s,0)[::-1]for \
s in\"=\"*n,\"-\"*n,f(),f(\"<>\"),f(),\"-\"*n,f(),f(),f()]\n\
print\"\\n\".join(L+map(g,L)[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[111]}, 
          "\"\\nfrom random import*\\nd=\\\"-\\\"*12\\nf=lambda s=\\\"\\\\/\\\
\":\\\"\\\".join(sample(s*12,12))\\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\\nL=[s+g(u\\\"\\\"+s,0)[::-1]\
for s in\\\"=\\\"*12,d,f(),f(\\\"<>\\\"),f(),d,f(),f(),f()]\\nprint\\\"\\\\n\\\
\".join(L+map(g,L)[::-1])\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nd=\"-\"*12\nf=lambda \
s=\"\\/\":\"\".join(sample(s*12,12))\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\nL=[s+g(u\"\"+s,0)[::-1]for \
s in\"=\"*12,d,f(),f(\"<>\"),f(),d,f(),f(),f()]\n\
print\"\\n\".join(L+map(g,L)[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[112]}, 
          "\"\\nfrom random import*\\nf=lambda \
c:\\\"\\\".join(sample((c+g(c,0))*99,12))\\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\\nL=[s+g(u\\\"\\\"+s,0)[::-1]\
for s in map(f,u\\\"=-/</-///\\\")]\\nprint\\\"\\\\n\\\".join(L+map(g,L)[::-1]\
)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nf=lambda \
c:\"\".join(sample((c+g(c,0))*99,12))\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\nL=[s+g(u\"\"+s,0)[::-1]for \
s in map(f,u\"=-/</-///\")]\nprint\"\\n\".join(L+map(g,L)[::-1])", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[113]}, 
          "\"\\nfrom random import*\\nf=lambda \
c:\\\"\\\".join(sample((c+g(c,0))*99,12))\\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\\nL=[s+g(s,0)[::-1]for s in \
map(f,u\\\"=-/</-///\\\")]\\nprint\\\"\\\\n\\\".join(L+map(g,L)[::-1])\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nf=lambda \
c:\"\".join(sample((c+g(c,0))*99,12))\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\nL=[s+g(s,0)[::-1]for s in \
map(f,u\"=-/</-///\")]\nprint\"\\n\".join(L+map(g,L)[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[114]}, 
          "\"\\nfrom random import*\\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\\nL=[s+g(s,0)[::-1]for s in[\
\\\"\\\".join(sample((c+g(c,0))*99,12))for c in \
u\\\"=-/</-///\\\"]]\\nprint\\\"\\\\n\\\".join(L+map(g,L)[::-1])\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\nL=[s+g(s,0)[::-1]for s \
in[\"\".join(sample((c+g(c,0))*99,12))for c in u\"=-/</-///\"]]\n\
print\"\\n\".join(L+map(g,L)[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[115]}, 
          "\"\\nfrom random import*\\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\\nL=[s+g(s,0)[::-1]for s in[\
\\\"\\\".join(sample((c+g(c,0))*99,12))for c in \
u\\\"=-/</-///\\\"]]\\nprint\\\"\\\\n\\\".join(L+map(g,L)[::-1])\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng=lambda \
s,x=2:s.translate({60:62^x,62:60^x,92:47,47:92})\nL=[s+g(s,0)[::-1]for s \
in[\"\".join(sample((c+g(c,0))*99,12))for c in u\"=-/</-///\"]]\n\
print\"\\n\".join(L+map(g,L)[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[116]}, 
          "\"\\nfrom random import*\\ng=lambda \
s:s.translate({60:62,62:60,92:47,47:92})\\ndef f(n):\\n if n:c=u\\\"=-/</-///\
\\\"[-n];s=\\\"\\\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];print \
s;f(n-1);print[g(s),s][n==6]\\nf(9)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng=lambda \
s:s.translate({60:62,62:60,92:47,47:92})\ndef f(n):\n if \
n:c=u\"=-/</-///\"[-n];s=\"\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];\
print s;f(n-1);print[g(s),s][n==6]\nf(9)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[117]}, 
          "\"\\nfrom random import*\\ng=lambda \
s:s.translate({60:62,62:60,92:47,47:92})\\ndef f(n):\\n if n:c=u\\\"=-/</-///\
\\\"[-n];s=\\\"\\\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];print \
s;f(n-1);print[g(s),s][n==6]\\nf(9)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng=lambda \
s:s.translate({60:62,62:60,92:47,47:92})\ndef f(n):\n if \
n:c=u\"=-/</-///\"[-n];s=\"\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];\
print s;f(n-1);print[g(s),s][n==6]\nf(9)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[118]}, 
          "\"\\nfrom random import*\\nL=[]\\ng=lambda \
s:s.translate({60:62,62:60,92:47,47:92})\\nfor c in u\\\"///-/</-=\\\":s=\\\"\
\\\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];L=[s]+L+[[g(s),s][c==\\\"<\\\"\
]]\\nprint\\\"\\\\n\\\".join(L)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nL=[]\ng=lambda \
s:s.translate({60:62,62:60,92:47,47:92})\nfor c in \
u\"///-/</-=\":s=\"\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];L=[s]+L+[[g(\
s),s][c==\"<\"]]\nprint\"\\n\".join(L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[119]}, 
          "\"\\nfrom random import*\\ng,*L=lambda \
s:s.translate({60:62,62:60,92:47,47:92}),\\nfor c \
in\\\"///-/</-=\\\":s=\\\"\\\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];L=[\
s]+L+[[g(s),s][c==\\\"<\\\"]]\\n*_,=map(print,L)\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng,*L=lambda \
s:s.translate({60:62,62:60,92:47,47:92}),\nfor c \
in\"///-/</-=\":s=\"\".join(sample((c+g(c))*99,12));s+=g(s)[::-1];L=[s]+L+[[g(\
s),s][c==\"<\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[120]}, 
          "\"\\nfrom random import*\\ng,*L=lambda \
s:[s,s.translate({60:62,62:60,92:47,47:92})],\\nfor c \
in\\\"///-/</-=\\\":s=eval(\\\"''\\\"+\\\".join(sample(g(c),2))\\\"*12);L=[s]+\
L+[g(s)[c!=\\\"<\\\"]]\\n*_,=map(print,L)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng,*L=lambda \
s:[s,s.translate({60:62,62:60,92:47,47:92})],\nfor c \
in\"///-/</-=\":s=eval(\"''\"+\".join(sample(g(c),2))\"*12);L=[s]+L+[g(s)[c!=\
\"<\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[121]}, 
          "\"\\nfrom random import*\\ng,*L=lambda \
s:[s,s.translate({60:62,62:60,92:47,47:92})],\\nfor c \
in\\\"///-/</-=\\\":s=eval(\\\"''\\\"+\\\".join(sample(g(c),2))\\\"*12);L=[s]+\
L+[g(s)[c<\\\"0\\\"]]\\n*_,=map(print,L)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng,*L=lambda \
s:[s,s.translate({60:62,62:60,92:47,47:92})],\nfor c \
in\"///-/</-=\":s=eval(\"''\"+\".join(sample(g(c),2))\"*12);L=[s]+L+[g(s)[c<\"\
0\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[122]}, 
          "\"\\nfrom random import*\\ng,*L=lambda \
s:[s,s.translate({60:62,62:60,92:47,47:92})],\\nfor c \
in\\\"///-/</-=\\\":s=eval(\\\"''\\\"+\\\".join(sample(g(c),2))\\\"*12);L=[s]+\
L+[g(s)[c<\\\"0\\\"]]\\n*_,=map(print,L)\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\ng,*L=lambda \
s:[s,s.translate({60:62,62:60,92:47,47:92})],\nfor c \
in\"///-/</-=\":s=eval(\"''\"+\".join(sample(g(c),2))\"*12);L=[s]+L+[g(s)[c<\"\
0\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[123]}, 
          "\"\\nfrom random import*\\nL=[]\\nfor c \
in\\\"///-/</-=\\\":s=eval(\\\"''\\\"+\\\".join(sample([c,dict(zip('</-=','>\\\
\\-='))[c]],2))\\\"*12);L=[s]+L+[[s,s[::-1]][c<\\\"0\\\"]]\\n*_,=map(print,L)\
\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nL=[]\nfor c \
in\"///-/</-=\":s=eval(\"''\"+\".join(sample([c,dict(zip('</-=','>\\-='))[c]],\
2))\"*12);L=[s]+L+[[s,s[::-1]][c<\"0\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[124]}, 
          
          "\"\\nfrom random import*\\nL=[]\\nfor c \
in\\\"///-/</-=\\\":s=eval(\\\"''\\\"+\\\".join(sample([c,'>\\\\-='['</-='.\
index(c)]],2))\\\"*12);L=[s]+L+[[s,s[::-1]][c<\\\"0\\\"]]\\n*_,=map(print,L)\"\
", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nL=[]\nfor c \
in\"///-/</-=\":s=eval(\"''\"+\".join(sample([c,'>\\-='['</-='.index(c)]],2))\
\"*12);L=[s]+L+[[s,s[::-1]][c<\"0\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[125]}, 
          "\"\\nfrom random import*\\nL=[]\\nfor n \
in\\\"444046402\\\":s=eval(\\\"''\\\"+\\\".join(sample('--==\\\\/<>'[int(n):][\
:2],2))\\\"*12);L=[s]+L+[[s,s[::-1]][n<\\\"5\\\"]]\\n*_,=map(print,L)\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nL=[]\nfor n \
in\"444046402\":s=eval(\"''\"+\".join(sample('--==\\/<>'[int(n):][:2],2))\"*\
12);L=[s]+L+[[s,s[::-1]][n<\"5\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[126]}, 
          "\"\\nfrom random import*\\nL=[]\\nfor n \
in\\\"444046402\\\":s=eval(\\\"''\\\"+\\\".join(sample('--==\\\\/<>'[int(n):][\
:2],2))\\\"*12);L=[s]+L+[[s,s[::-1]][n<\\\"5\\\"]]\\n*_,=map(print,L)\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nL=[]\nfor n \
in\"444046402\":s=eval(\"''\"+\".join(sample('--==\\/<>'[int(n):][:2],2))\"*\
12);L=[s]+L+[[s,s[::-1]][n<\"5\"]]\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[127]}, 
          "\"\\nfrom random import*\\nk,*L=80703,\\nwhile \
k:s=eval(\\\"''\\\"+\\\".join(sample('--==<>\\\\/'[k%4*2:][:2],2))\\\"*12);L=[\
s]+L+[s[::(-1)**k]];k//=4\\n*_,=map(print,L)\"", LabelStyle -> "TextStyling"],
          Annotation[#, 
          "\nfrom random import*\nk,*L=80703,\nwhile \
k:s=eval(\"''\"+\".join(sample('--==<>\\/'[k%4*2:][:2],2))\"*12);L=[s]+L+[s[::\
(-1)**k]];k//=4\n*_,=map(print,L)", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[128]}, 
          "\"\\nF=o=>[...(z='/\\\\\\\\/-/<\\\\\\\\-=')].map((c,i,_,y=[z,'\\\\\
\\\\/\\\\\\\\-\\\\\\\\>/-='],\\nq=[for(_ \
of-z+z)Math.random()*2|0],\\nQ=k=>q.map(v=>y[v^k^1][i]).concat(q.map(v=>y[v^k]\
[i]).reverse()).join('')+'\\\\n')=>\\no=Q()+o+Q(1)\\n,o='')&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=o=>[...(z='/\\\\/-/<\\\\-=')].map((c,i,_,y=[z,'\\\\/\\\\-\\\\>/\
-='],\nq=[for(_ of-z+z)Math.random()*2|0],\n\
Q=k=>q.map(v=>y[v^k^1][i]).concat(q.map(v=>y[v^k][i]).reverse()).join('')+'\\\
n')=>\no=Q()+o+Q(1)\n,o='')&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[129]}, 
          "\"\\nF=o=>[...(z='/\\\\\\\\/-/<\\\\\\\\-=')].map((c,i,_,y=[z,'\\\\\
\\\\/\\\\\\\\-\\\\\\\\>/-='],\\nq=[for(_ \
of-z+z)Math.random()*2|0],\\nQ=k=>q.map(v=>y[v^!k][i]).concat(q.map(v=>y[v^k][\
i]).reverse()).join('')+'\\\\n')=>\\no=Q()+o+Q(c!='<')\\n,o='')&&o\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nF=o=>[...(z='/\\\\/-/<\\\\-=')].map((c,i,_,y=[z,'\\\\/\\\\-\\\\>/\
-='],\nq=[for(_ of-z+z)Math.random()*2|0],\n\
Q=k=>q.map(v=>y[v^!k][i]).concat(q.map(v=>y[v^k][i]).reverse()).join('')+'\\n'\
)=>\no=Q()+o+Q(c!='<')\n,o='')&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[130]}, 
          "\"\\nF=o=>[...(z='/\\\\\\\\/-/<\\\\\\\\-=')].map((c,i,_,y=[z,'\\\\\
\\\\/\\\\\\\\-\\\\\\\\>/-='],\\nq=[for(_ \
of-z+z)Math.random()*2|0],\\nQ=k=>q.map(v=>y[v^!k][i]).concat(q.map(v=>y[v^k][\
i]).reverse()).join('')+'\\\\n')=>\\no=Q()+o+Q(c!='<')\\n,o='')&&o\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nF=o=>[...(z='/\\\\/-/<\\\\-=')].map((c,i,_,y=[z,'\\\\/\\\\-\\\\>/\
-='],\nq=[for(_ of-z+z)Math.random()*2|0],\n\
Q=k=>q.map(v=>y[v^!k][i]).concat(q.map(v=>y[v^k][i]).reverse()).join('')+'\\n'\
)=>\no=Q()+o+Q(c!='<')\n,o='')&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[131]}, 
          "\"\\nF=o=>[...z='/\\\\\\\\/-/<\\\\\\\\-='].map((c,i,_,y=[z,'\\\\\\\
\\/\\\\\\\\-\\\\\\\\>/-='],q=[for(_ \
of-z+z)Math.random(Q=k=>q.map(v=>y[v^!k][i]).concat(q.map(v=>y[v^k][i]).\
reverse()).join('')+`\\n`)*2])=>o=Q()+o+Q(c!='<'),o='')&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=o=>[...z='/\\\\/-/<\\\\-='].map((c,i,_,y=[z,'\\\\/\\\\-\\\\>/-=\
'],q=[for(_ \
of-z+z)Math.random(Q=k=>q.map(v=>y[v^!k][i]).concat(q.map(v=>y[v^k][i]).\
reverse()).join('')+`\n`)*2])=>o=Q()+o+Q(c!='<'),o='')&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[132]}, 
          "\"\\nF=(o='')=>[...z='/\\\\\\\\/-/<\\\\\\\\-='].map((c,i,_,y=[z,'\\\
\\\\\\/\\\\\\\\-\\\\\\\\>/-='],q=[for(_ \
of-z+z)Math.random(Q=k=>q.map(v=>r=y[v^!k][i]+r+y[v^k][i],r='')&&r+`\\n`)*2])=\
>o=Q()+o+Q(i!=5))&&o\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[...z='/\\\\/-/<\\\\-='].map((c,i,_,y=[z,'\\\\/\\\\-\\\
\\>/-='],q=[for(_ \
of-z+z)Math.random(Q=k=>q.map(v=>r=y[v^!k][i]+r+y[v^k][i],r='')&&r+`\n\
`)*2])=>o=Q()+o+Q(i!=5))&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[133]}, 
          "\"\\n=G\\\"/<>\\\\\\\\\\\"K\\\"/\\\\\\\\\\\"Jm+d_XdG_GmsmOk12[\\\\=\
\\\\-K\\\"<>\\\"K\\\\-KKK)jb+J_mXdK_KJ\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n=G\"/<>\\\\\"K\"/\\\\\"Jm+d_XdG_GmsmOk12[\\=\\-K\"<>\"K\\-KKK)jb+\
J_mXdK_KJ", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[134]}, 
          "\"\\n=G\\\"\\\\<>/\\\"K\\\"\\\\/\\\"Jm+d_XdG_GmsmOk12[\\\\=\\\\-K\\\
\"<>\\\"K\\\\-KKK;jb+J_mXdK_KJ\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n=G\"\\<>/\"K\"\\/\"Jm+d_XdG_GmsmOk12[\\=\\-K\"<>\"K\\-KKK;jb+J_\
mXdK_KJ", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[135]}, 
          "\"\\n=G\\\"\\\\<>/\\\"K\\\"\\\\/\\\"Jm+d_XdG_GmsmOk12[\\\\=\\\\-K\\\
\"<>\\\"K\\\\-KKK;jb+J_mXdK_KJ\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n=G\"\\<>/\"K\"\\/\"Jm+d_XdG_GmsmOk12[\\=\\-K\"<>\"K\\-KKK;jb+J_\
mXdK_KJ", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[136]}, 
          "\"\\nJ\\\"\\\\<>/\\\"K\\\"\\\\/\\\"L+b_mXdK_Kbjbym+d_XdJ_JmsmOk12[\
\\\\=\\\\-K-JKK\\\\-KKK\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nJ\"\\<>/\"K\"\\/\"L+b_mXdK_Kbjbym+d_XdJ_JmsmOk12[\\=\\-K-JKK\\-\
KKK", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[137]}, 
          "\"\\nL\[LeftArrow]+,3-\:233d\[Diamond]'==--/\\\\<>'[\[UpArrow]((+,\
\:233d)5458196\[DownTee]\:23689/8)+L{L?12\:23742}\[DoubleDot]\:23739]\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nL\[LeftArrow]+,3-\:233d\[Diamond]'==--/\\<>'[\[UpArrow]((+,\:233d\
)5458196\[DownTee]\:23689/8)+L{L?12\:23742}\[DoubleDot]\:23739]", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[138]}, 
          "\"\\nL\[LeftArrow]+,3-\:233d\[Diamond]'==--/\\\\<><'[\[UpArrow](\
732586738601744\[DownTee]\:236818/8)+L{L?12\:23742}\[DoubleDot]\:23739]\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nL\[LeftArrow]+,3-\:233d\[Diamond]'==--/\\<><'[\[UpArrow](\
732586738601744\[DownTee]\:236818/8)+L{L?12\:23742}\[DoubleDot]\:23739]", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[139]}, 
          "\"\\nL\[LeftArrow]+,3-\:233d\[Diamond]'==--/\\\\<><'[\[UpArrow](\
732451451260688\[DownTee]\:236818/8)+L{L?12\:23742}\[DoubleDot]\:23739]\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nL\[LeftArrow]+,3-\:233d\[Diamond]'==--/\\<><'[\[UpArrow](\
732451451260688\[DownTee]\:236818/8)+L{L?12\:23742}\[DoubleDot]\:23739]", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[140]}, 
          "\"\\n|s i f v h|s:='====----/\\\\/\\\\/<><<>'.f:=[:c|s at:(s \
indexOf:c)+i].v:=#(),'=-/</-///'collect:[:c|h:=(String \
new:12)collect:[:x|i:=2atRandom.f value:c].i:=1.h,(h reverse \
collect:f)].i:=3.String cr join:v,(v reverse collect:[:k|k collect:f])\"", 
          LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n|s i f v h|s:='====----/\\/\\/<><<>'.f:=[:c|s at:(s \
indexOf:c)+i].v:=#(),'=-/</-///'collect:[:c|h:=(String \
new:12)collect:[:x|i:=2atRandom.f value:c].i:=1.h,(h reverse \
collect:f)].i:=3.String cr join:v,(v reverse collect:[:k|k collect:f])", 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[141]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')o=(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.map(w=y=>c[i-y^x]).concat(z.map(y=>\
c[i-y^!x]).reverse()).join('')+`\\n`)*2|0])&&r()+o+r(i<7)]&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')o=(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.map(w=y=>c[i-y^x]).concat(z.map(y=>c[i-\
y^!x]).reverse()).join('')+`\n`)*2|0])&&r()+o+r(i<7)]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[142]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.map(y=>c[i-y^x]).concat(z.map(y=>c[\
i-y^!x]).reverse()).join('')+`\\n`)*2|0],o=r()+o+r(i<7))]&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.map(y=>c[i-y^x]).concat(z.map(y=>c[i-y^\
!x]).reverse()).join('')+`\n`)*2|0],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[143]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.map(y=>c[i-y^x]).concat(z.map(y=>c[\
i-y^!x]).reverse()).join('')+`\\n`)*2|0],o=r()+o+r(i<7))]&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.map(y=>c[i-y^x]).concat(z.map(y=>c[i-y^\
!x]).reverse()).join('')+`\n`)*2|0],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[144]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.map(y=>c[i-y^x]).concat(z.map(y=>c[\
i-y^!x]).reverse()).join('')+`\\n`)*2|0],o=r()+o+r(i<7))]&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.map(y=>c[i-y^x]).concat(z.map(y=>c[i-y^\
!x]).reverse()).join('')+`\n`)*2|0],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[145]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.map(y=>c[i^y^x]).concat(z.map(y=>c[\
i^y^!x]).reverse()).join('')+`\\n`)*2],o=r()+o+r(i<7))]&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.map(y=>c[i^y^x]).concat(z.map(y=>c[i^y^\
!x]).reverse()).join('')+`\n`)*2],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[146]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.map($=y=>c[i^y^x]).concat(z.map($,\
x^=1).reverse()).join('')+`\\n`)*2],o=r()+o+r(i<7))]&&o\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.map($=y=>c[i^y^x]).concat(z.map($,x^=1)\
.reverse()).join('')+`\n`)*2],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[147]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.reduce((s,y)=>c[w=i^y^x]+s+c[w^1],'\
')+`\\n`)*2],o=r()+o+r(i<7))]&&o\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.reduce((s,y)=>c[w=i^y^x]+s+c[w^1],'')+`\
\n`)*2],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[148]}, 
          "\"\\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\\\\\<>golf')Math.random(r=x=>z.reduce((s,y)=>c[w=i^y^x]+s+c[w^1],'\
')+`\\n`)*2],o=r()+o+r(i<7))]&&o\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nF=(o='')=>[for(i of'555357531')(z=[for(_ of \
c='==--/\\\\<>golf')Math.random(r=x=>z.reduce((s,y)=>c[w=i^y^x]+s+c[w^1],'')+`\
\n`)*2],o=r()+o+r(i<7))]&&o", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[149]}, 
          "\"\\n|r s h m n \
p|s:='==--/\\\\<>'.r:=(1<<108)atRandom.h:=''.m:=0.(16to:0by:-2),(0to:16by:2)\
do:[:i|n:=3bitAnd:28266>>i.p:=1.(11to:0by:-1),(0to:11)do:[:j|h:=h,(s \
at:n*2+1+((r-1bitAt:6*i+j+1)bitXor:(101bitAt:3-n*4+m+p))).j=0and:[p:=2]].i=\
0and:[m:=2].h:=h,#[13]].h\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n|r s h m n \
p|s:='==--/\\<>'.r:=(1<<108)atRandom.h:=''.m:=0.(16to:0by:-2),(0to:16by:2)do:[\
:i|n:=3bitAnd:28266>>i.p:=1.(11to:0by:-1),(0to:11)do:[:j|h:=h,(s \
at:n*2+1+((r-1bitAt:6*i+j+1)bitXor:(101bitAt:3-n*4+m+p))).j=0and:[p:=2]].i=\
0and:[m:=2].h:=h,#[13]].h", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[150]}, 
          "\"\\n|r s h m n \
p|s:='==--/\\\\<>'.r:=(1<<108)atRandom.h:=''.m:=0.(16to:0by:-2),(0to:16by:2)\
do:[:i|n:=3bitAnd:28266>>i.p:=0.(11to:0by:-1),(0to:11)do:[:j|h:=h,(s \
at:n*2+1+(r-1>>(6*i+j)+(101>>(3-n*4+m+p))bitAnd:1)).j=0and:[p:=1]].i=0and:[m:=\
2].h:=h,#[13]].h\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\n|r s h m n \
p|s:='==--/\\<>'.r:=(1<<108)atRandom.h:=''.m:=0.(16to:0by:-2),(0to:16by:2)do:[\
:i|n:=3bitAnd:28266>>i.p:=0.(11to:0by:-1),(0to:11)do:[:j|h:=h,(s \
at:n*2+1+(r-1>>(6*i+j)+(101>>(3-n*4+m+p))bitAnd:1)).j=0and:[p:=1]].i=0and:[m:=\
2].h:=h,#[13]].h", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[151]}, 
          "\"\\nimport random as w\\ndef f(a):\\n for x in a:\\n  if x \
in['/','<']:b=[w.choice([x,q[x]]) for u in [x]*12]; print ''.join(b+[q[g] for \
g in list(reversed(b))])\\n  else: print \
24*x\\nq={'/':'\\\\\\\\','<':'>','>':'<','\\\\\\\\':'/'};l=list('=-/</-///');\
f(l);f(reversed(l))\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nimport random as w\ndef f(a):\n for x in a:\n  if x \
in['/','<']:b=[w.choice([x,q[x]]) for u in [x]*12]; print ''.join(b+[q[g] for \
g in list(reversed(b))])\n  else: print 24*x\nq={'/':'\\\\','<':'>','>':'<','\
\\\\':'/'};l=list('=-/</-///');f(l);f(reversed(l))", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[152]}, 
          "\"\\nimport \
random\\nm=[];l=list('=-/>/-///');d={'/':'\\\\\\\\','<':'>','>':'<','\\\\\\\\'\
:'/'};k=reversed\\ndef v(w):return[d[x]for x in w]\\nfor e in l:\\n if e in \
d:f=[random.choice([e,d[e]])for x in range(9)];t=''.join(f+v(k(f)))\\n \
else:t=18*e\\nprint t;m=m+[''.join(v(t)if'/'in t else t)]\\nprint \
'\\\\n'.join(k(m))\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nimport random\n\
m=[];l=list('=-/>/-///');d={'/':'\\\\','<':'>','>':'<','\\\\':'/'};k=reversed\
\ndef v(w):return[d[x]for x in w]\nfor e in l:\n if e in \
d:f=[random.choice([e,d[e]])for x in range(9)];t=''.join(f+v(k(f)))\n \
else:t=18*e\nprint t;m=m+[''.join(v(t)if'/'in t else t)]\nprint \
'\\n'.join(k(m))", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[153]}, 
          "\"\\nimport \
random\\nm=[];d={'/':'\\\\\\\\','<':'>','>':'<','\\\\\\\\':'/'};k=reversed\\\
ndef v(w):return[d[x]for x in w]\\nfor e in list('=-/>/-///'):\\n if e in \
d:f=[random.choice([e,d[e]])for x in range(9)];t=''.join(f+v(k(f)))\\n \
else:t=18*e\\n print t;m=m+[''.join(v(t)if'/'in t or'\\\\\\\\'in t else \
t)]\\nprint '\\\\n'.join(k(m))\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nimport random\n\
m=[];d={'/':'\\\\','<':'>','>':'<','\\\\':'/'};k=reversed\ndef \
v(w):return[d[x]for x in w]\nfor e in list('=-/>/-///'):\n if e in \
d:f=[random.choice([e,d[e]])for x in range(9)];t=''.join(f+v(k(f)))\n \
else:t=18*e\n print t;m=m+[''.join(v(t)if'/'in t or'\\\\'in t else t)]\nprint \
'\\n'.join(k(m))", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[154]}, 
          "\"\\nimport \
random\\nm,d=[],{'/':'\\\\\\\\','<':'>','>':'<','\\\\\\\\':'/'};k=reversed\\\
nv=lambda w:[d[x]for x in w]\\nfor e in list('=-/>/-///'):\\n if e in \
d:f=[random.choice([e,d[e]])for x in[0]*9];t=''.join(f+v(k(f)))\\n \
else:t=18*e\\n print t;m+=[''.join(v(t)if'/'in t or'\\\\\\\\'in t else \
t)]\\nprint '\\\\n'.join(k(m))\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nimport random\n\
m,d=[],{'/':'\\\\','<':'>','>':'<','\\\\':'/'};k=reversed\nv=lambda \
w:[d[x]for x in w]\nfor e in list('=-/>/-///'):\n if e in \
d:f=[random.choice([e,d[e]])for x in[0]*9];t=''.join(f+v(k(f)))\n else:t=18*e\
\n print t;m+=[''.join(v(t)if'/'in t or'\\\\'in t else t)]\nprint \
'\\n'.join(k(m))", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[155]}, 
          "\"\\nimport \
random\\nm,d=[],{'/':'\\\\\\\\','<':'>','>':'<','\\\\\\\\':'/'};k=reversed\\\
nv=lambda w:[d[x]for x in w]\\nfor e in list('=-/>/-///'):\\n if e in \
d:f=[random.choice([e,d[e]])for x in[0]*12];t=''.join(f+v(k(f)))\\n \
else:t=24*e\\n print t;m+=[''.join(v(t)if'/'in t or'\\\\\\\\'in t else \
t)]\\nprint '\\\\n'.join(k(m))\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\nimport random\n\
m,d=[],{'/':'\\\\','<':'>','>':'<','\\\\':'/'};k=reversed\nv=lambda \
w:[d[x]for x in w]\nfor e in list('=-/>/-///'):\n if e in \
d:f=[random.choice([e,d[e]])for x in[0]*12];t=''.join(f+v(k(f)))\n \
else:t=24*e\n print t;m+=[''.join(v(t)if'/'in t or'\\\\'in t else t)]\nprint \
'\\n'.join(k(m))", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[156]}, 
          "\"\\nfrom random import*\\nm,d=[],dict(zip(\\\"\\\\/<>=-\\\",\\\"/\
\\\\><=-\\\"))\\nv=lambda w:[d[x]for x in w]\\nfor e in \
'=-/>/-///':f=[choice([e,d[e]])for x in[0]*12];t=''.join(f+v(f[::-1]));print \
t;m+=''.join(e=='/'and v(t)or t),\\nprint'\\\\n'.join(m[::-1])\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\nfrom random import*\nm,d=[],dict(zip(\"\\/<>=-\",\"/\\><=-\"))\n\
v=lambda w:[d[x]for x in w]\nfor e in '=-/>/-///':f=[choice([e,d[e]])for x \
in[0]*12];t=''.join(f+v(f[::-1]));print t;m+=''.join(e=='/'and v(t)or t),\n\
print'\\n'.join(m[::-1])", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[157]}, 
          "\"\\na='\\\\/\\\\\\\\'\\nb='\\\\\\\\\\\\/'\\nt=Array.new(9){x=''\\\
n12.times{x+=a[rand(2)]}\\nx+x.reverse.tr(a,b)}\\nt[0]='='*24\\nt[1]=t[5]='-'*\
24\\nt[3].tr!a,'<>'\\nputs t,((t.reverse.join'\"", LabelStyle -> 
          "TextStyling"], 
         Annotation[#, 
          "\na='\\/\\\\'\nb='\\\\\\/'\nt=Array.new(9){x=''\n\
12.times{x+=a[rand(2)]}\nx+x.reverse.tr(a,b)}\nt[0]='='*24\nt[1]=t[5]='-'*24\n\
t[3].tr!a,'<>'\nputs t,((t.reverse.join'", "Tooltip"]& ], 
        TagBox[
         TooltipBox[{
           Opacity[0.], 
           PointBox[158]}, 
          "\"\\na='/\\\\\\\\'\\nb='\\\\\\\\\\\\/'\\nt=Array.new(9){x=''\\n12.\
times{x+=a[rand(2)]}\\nx+x.reverse.tr(a,b)}\\nt[0]=?=*24\\nt[1]=t[5]=?-*24\\\
nt[3].tr!a,'<>'\\nputs t,((t.reverse*'\"", LabelStyle -> "TextStyling"], 
         Annotation[#, 
          "\na='/\\\\'\nb='\\\\\\/'\nt=Array.new(9){x=''\n\
12.times{x+=a[rand(2)]}\nx+x.reverse.tr(a,b)}\nt[0]=?=*24\nt[1]=t[5]=?-*24\n\
t[3].tr!a,'<>'\nputs t,((t.reverse*'", "Tooltip"]& ]}}], {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, 
     GridLines -> {None, None}, DisplayFunction -> Identity, DisplayFunction -> 
     Identity, DisplayFunction -> Identity, DisplayFunction -> Identity, 
     AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {False, False}, AxesLabel -> {None, None}, 
     AxesOrigin -> {3.638231389*^9, 3.7692895697577233`}, DisplayFunction :> 
     Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, FrameTicks -> {{
        Charting`ScaledTicks[{Log, Exp}], 
        Charting`ScaledFrameTicks[{Log, Exp}]}, {
        Charting`DateTicksFunction[Automatic, DateTicksFormat -> {Automatic}], 
        Charting`DateTicksFunction[
        Automatic, DateTicksFormat -> {Automatic}, "TickLabels" -> None]}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "NoShowPlotTheme" -> Automatic, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Exp[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Exp[#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{3.638231389*^9, 3.638692833*^9}, {3.7692895697577233`, 
      6.008813185442595}}, PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {{}, 
       Charting`ScaledTicks[{Log, Exp}]}}],FormBox[
    FormBox[
     TemplateBox[{
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"Logic Knight\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/31785"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "31785"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Python\"", 
          Entity["CodeGolfProgrammingLanguage", "Python::4g426"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48941"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"Martin Ender\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/8478"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "8478"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"CJam\"", 
          Entity["CodeGolfProgrammingLanguage", "cjam"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48943"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"Lars Ebert\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/16233"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "16233"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"PHP\"", 
          Entity["CodeGolfProgrammingLanguage", "PHP::x8873"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48946"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"Sp3000\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/21487"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "21487"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Python\"", 
          Entity["CodeGolfProgrammingLanguage", "Python::4g426"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48948"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"edc65\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/21348"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "21348"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"JavaScript\"", 
          Entity["CodeGolfProgrammingLanguage", "JavaScript::g3427"], 
          BaseStyle -> "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48963"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"FryAmTheEggman\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/31625"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "31625"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Pyth\"", 
          Entity["CodeGolfProgrammingLanguage", "pyth"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48971"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"marinus\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/1426"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "1426"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"APL\"", 
          Entity["CodeGolfProgrammingLanguage", "APL::nh588"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48972"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"aka.nice\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/7231"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "7231"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Pharo\"", 
          Entity["CodeGolfProgrammingLanguage", "pharo"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48981"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"nderscore\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/20160"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "20160"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"JavaScript\"", 
          Entity["CodeGolfProgrammingLanguage", "JavaScript::g3427"], 
          BaseStyle -> "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48982"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"aka.nice\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/7231"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "7231"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Squeak\"", 
          Entity["CodeGolfProgrammingLanguage", "squeak"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48983"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"randomra\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/7311"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "7311"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"J\"", 
          Entity["CodeGolfProgrammingLanguage", "J::q87q9"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48987"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"Def\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/33214"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "33214"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Python\"", 
          Entity["CodeGolfProgrammingLanguage", "Python::4g426"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48992"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"ezrast\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/39284"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "39284"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Ruby\"", 
          Entity["CodeGolfProgrammingLanguage", "Ruby::f23v5"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/48998"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], "None", "None", "None", "None", "None", "None", 
       "None", "None", "None", "None", "None", "None", "None"}, "PointLegend",
       DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #7}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #8}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"], 
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #9}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #10}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #11}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #12}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #13}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.37345400000000006`, 0.461046, 
                    0.12992333333333334`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.922526`", ",", "0.385626`", ",", "0.209179`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.3523253333333333, 0.3137493333333333, 
                    0.46756733333333333`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.528488`", ",", "0.470624`", ",", "0.701351`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.528488, 0.470624, 0.701351]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.528488, 0.470624, 0.701351], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5147193333333333, 0.28770266666666666`, 
                    0.06825800000000001], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.772079`", ",", "0.431554`", ",", "0.102387`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.772079, 0.431554, 0.102387]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.772079, 0.431554, 0.102387], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.24259866666666668`, 0.412334, 0.521566], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.363898`", ",", "0.618501`", ",", "0.782349`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.363898, 0.618501, 0.782349]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.363898, 0.618501, 0.782349], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.75, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0.6666666666666666, 0.5, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.75`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.75, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.75, 0], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.4317493333333333, 0.2521066666666667, 
                    0.40935800000000006`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.647624`", ",", "0.37816`", ",", "0.614037`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.647624, 0.37816, 0.614037]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.647624, 0.37816, 0.614037], Editable -> False, 
                    Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.571589, 0.586483, 0.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.38105933333333336`, 0.39098866666666665`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.571589`", ",", "0.586483`", ",", "0.`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.571589, 0.586483, 0.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.571589, 0.586483, 0.], Editable -> False, 
                    Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.915, 0.3325, 0.2125], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6100000000000001, 0.22166666666666668`, 
                    0.14166666666666666`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.915`", ",", "0.3325`", ",", "0.2125`"}], "]"}],
                     NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.915, 0.3325, 0.2125]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.915, 0.3325, 0.2125], Editable -> False, 
                    Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.2672148173956843, 0.34800444289592275`, 
                    0.5666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{"0.40082222609352647`", ",", 
                    "0.5220066643438841`", ",", "0.85`"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    Editable -> False, Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6485525936249404, 0.4144296347913687, 
                    0.048907997212660946`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{"0.9728288904374106`", ",", "0.621644452187053`", 
                    ",", "0.07336199581899142`"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                    "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.922526`", ",", "0.385626`", ",", "0.209179`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.3523253333333333, 0.3137493333333333, 
                    0.46756733333333333`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.528488`", ",", "0.470624`", ",", "0.701351`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.528488, 0.470624, 0.701351]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.528488, 0.470624, 0.701351], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.5147193333333333, 0.28770266666666666`, 
                    0.06825800000000001], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.772079`", ",", "0.431554`", ",", "0.102387`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.772079, 0.431554, 0.102387]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.772079, 0.431554, 0.102387], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.24259866666666668`, 0.412334, 0.521566], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.363898`", ",", "0.618501`", ",", "0.782349`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.363898, 0.618501, 0.782349]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.363898, 0.618501, 0.782349], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.75, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0.6666666666666666, 0.5, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.75`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.75, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.75, 0], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.4317493333333333, 0.2521066666666667, 
                    0.40935800000000006`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.647624`", ",", "0.37816`", ",", "0.614037`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.647624, 0.37816, 0.614037]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.647624, 0.37816, 0.614037], Editable -> False, 
                    Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.571589, 0.586483, 0.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.38105933333333336`, 0.39098866666666665`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.571589`", ",", "0.586483`", ",", "0.`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.571589, 0.586483, 0.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.571589, 0.586483, 0.], Editable -> False, 
                    Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.915, 0.3325, 0.2125], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6100000000000001, 0.22166666666666668`, 
                    0.14166666666666666`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.915`", ",", "0.3325`", ",", "0.2125`"}], "]"}],
                     NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.915, 0.3325, 0.2125]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.915, 0.3325, 0.2125], Editable -> False, 
                    Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.2672148173956843, 0.34800444289592275`, 
                    0.5666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{"0.40082222609352647`", ",", 
                    "0.5220066643438841`", ",", "0.85`"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    Editable -> False, Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                    ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6485525936249404, 0.4144296347913687, 
                    0.048907997212660946`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.9728288904374106`", ",", "0.621644452187053`", 
                    ",", "0.07336199581899142`"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                    "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 
                 RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, 
                   ",", #7, ",", #8, ",", #9, ",", #10, ",", #11, ",", #12, 
                   ",", #13}], "}"}], ",", 
               RowBox[{"{", 
                 
                 RowBox[{#14, ",", #15, ",", #16, ",", #17, ",", #18, 
                   ",", #19, ",", #20, ",", #21, ",", #22, ",", #23, ",", #24,
                    ",", #25, ",", #26}], "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "Automatic"}], "}"}]}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
               "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   
                   RowBox[{
                    "True", ",", "True", ",", "True", ",", "True", ",", 
                    "True", ",", "True", ",", "True", ",", "True", ",", 
                    "True", ",", "True", ",", "True", ",", "True", ",", 
                    "True"}], "}"}], ",", 
                 RowBox[{"{", 
                   
                   RowBox[{
                    "True", ",", "True", ",", "True", ",", "True", ",", 
                    "True", ",", "True", ",", "True", ",", "True", ",", 
                    "True", ",", "True", ",", "True", ",", "True", ",", 
                    "True"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.780678752066306*^9, 3.7806788069457135`*^9, 3.780678837025487*^9, 
   3.7806788689452915`*^9, {3.7806789025548687`*^9, 3.780679109533884*^9}, {
   3.7806791406188154`*^9, 3.7806791766438084`*^9}},
 CellLabel->
  "Out[748]=",ExpressionUUID->"11f4fbd4-6920-4cc4-af53-078004c05758"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"TODO", ":", " ", 
    RowBox[{
    "Explore", " ", "if", " ", "the", " ", "rate", " ", "fits", " ", "this", 
     " ", "pretty", " ", "well", " ", "over", " ", "lots", " ", "of", " ", 
     RowBox[{"submissions", "?"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Size", "[", "t_", "]"}], ":=", 
   RowBox[{"size0", "+", "c1", "+", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "k"}], "*", "t"}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.7803184754793344`*^9, 3.780318503731507*^9}, {
  3.780346398701333*^9, 3.7803464164403*^9}, {3.7803465870742817`*^9, 
  3.7803465953811226`*^9}},ExpressionUUID->"6a263a88-892f-4a16-902c-\
924b34eaf4e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", "\"\<Values\>\"", "]"}], "&"}], "/@", 
         RowBox[{"DeleteMissing", "[", "submissionToSizeHistory", "]"}]}], 
        ")"}], "//", 
       RowBox[{"KeyValueMap", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Row", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#1", "[", 
              RowBox[{"{", 
               RowBox[{
               "\"\<Owner\>\"", ",", "\"\<SubmissionProgrammingLanguage\>\"", 
                ",", "\"\<URL\>\""}], "}"}], "]"}], "/.", 
             RowBox[{"url_URL", "\[RuleDelayed]", 
              RowBox[{"Hyperlink", "[", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<\[RightGuillemet]\>\"", ",", "18"}], "]"}], ",",
                 "url"}], "]"}]}]}], ",", 
            RowBox[{"Spacer", "[", "1", "]"}]}], "]"}], "\[Rule]", 
          RowBox[{"QuantityMagnitude", "[", "#2", "]"}]}], "&"}], "]"}]}], "//",
       "Association"}], "//", "KeySort"}], "//", "Reverse"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotRange", "\[Rule]", "Full"}], ",", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"PlotLegends", "\[Rule]", "None"}], ","}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Filling", "\[Rule]", "Axis"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Revision Number\>\"", ",", "\"\<Code size (bytes)\>\""}], 
     "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotLabel", "\[Rule]", 
    TemplateBox[{TemplateBox[{
        TemplateBox[{1}, "Spacer1"], 
        "\"Q: [Martin Ender] xkcd-Style Page Numbering\"", 
        TemplateBox[{
          TagBox[
           TooltipBox[
            StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
            "\"Open\"", LabelStyle -> "TextStyling"], 
           Annotation[#, "Open", "Tooltip"]& ], 
          "https://codegolf.stackexchange.com/q/51517"}, "HyperlinkURL"]}, 
       "RowWithSeparator"],RowBox[{"Entity", "[", 
        RowBox[{"\"StackExchange.Codegolf:Post\"", ",", "\"51517\""}], "]"}],
      "\"Entity[\\\"StackExchange.Codegolf:Post\\\", \\\"51517\\\"]\"",
      "\"codegolf:Post\""},
     "Entity"]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.7802531382410245`*^9, 3.7802531543732567`*^9}, {
  3.780253920702714*^9, 3.780253943176464*^9}, {3.7802540791719933`*^9, 
  3.780254088634433*^9}, {3.7802541207833557`*^9, 3.7802542314129148`*^9}, {
  3.7802545142876186`*^9, 3.780254539403899*^9}, {3.780254576590073*^9, 
  3.7802545795747776`*^9}, {3.780254630268952*^9, 3.780254630650649*^9}, {
  3.7802549733533845`*^9, 3.780254996936836*^9}, {3.7802553825180745`*^9, 
  3.7802554822645493`*^9}, {3.7802555312175517`*^9, 3.780255533829751*^9}, {
  3.780255606837019*^9, 3.780255618195275*^9}, {3.780255657639489*^9, 
  3.7802557065030093`*^9}, {3.7804192682324247`*^9, 3.7804192712008657`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"9597df1b-52b2-44f1-ab49-2181f628d0db"],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, 
     GraphicsComplexBox[CompressedData["
1:eJztlT1Ow0AUhJ+otnThIgWFyQlAkECXLaiojBHip4KgBAkKJE6Qo+QoLjkO
RwDknZXeSPYULmhsyVp9mrfzxm8t7dH6o9kcmNnX7/u3ds/3qltXcZiPBV8m
tug56dWb1zOHbn1aJy66tX32+9s7vz9z0utPr2cOxKk+Pg5ze+/9djfez8Ap
rzXk90L78X2BGPWNr89+gRjzviX/a1/f1j5f5pI4+e3fvd/+1ftVW+pP5xGp
f2bMs/b13D+SHkm3U8Enfn9m6GekgwNxQVwSz4jxffh/kP/B+2dO9bt6mO2c
8i4p74Lygkti5MW8Dokr4jkx8lxQHnAgRv2S6hdUz/n75g2/K8F4FMO/Tw9C
nwtdsfKfCd2ErljtV7rKr/Sx81d6IfSx56Pmo/qPPb8+nu5v32+6v53fdH+n
dbq/Pf/f/f0DhZn+RA==
      "], {{{}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.368417, 0.506779, 0.709798], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{1, 123, 124, 2}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.880722, 0.611041, 0.142051], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{3, 121, 122, 4}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.560181, 0.691569, 0.194885], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{5, 119, 120, 6}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.922526, 0.385626, 0.209179], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{7, 117, 118, 10, 9, 8}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.528488, 0.470624, 0.701351], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{11, 115, 116, 12}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.772079, 0.431554, 0.102387], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{13, 113, 114, 15, 14}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.363898, 0.618501, 0.782349], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{16, 111, 112, 17}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[1, 0.75, 0], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{18, 109, 110, 21, 20, 19}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.647624, 0.37816, 0.614037], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{22, 107, 108, 24, 23}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.571589, 0.586483, 0.], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{25, 105, 106, 27, 26}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.915, 0.3325, 0.2125], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{28, 103, 104, 32, 31, 30, 29}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{33, 101, 102, 35, 34}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[
          0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{36, 99, 100, 38, 37}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{39, 97, 98, 40}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{41, 95, 96, 42}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.368417, 0.506779, 0.709798], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{43, 93, 94, 44}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.880722, 0.611041, 0.142051], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{45, 91, 92, 46}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.560181, 0.691569, 0.194885], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{47, 89, 90, 52, 51, 50, 49, 48}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.922526, 0.385626, 0.209179], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{53, 87, 88, 55, 54}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.528488, 0.470624, 0.701351], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{56, 85, 86, 57}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.772079, 0.431554, 0.102387], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{58, 83, 84, 66, 65, 64, 63, 62, 61, 60, 59}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.363898, 0.618501, 0.782349], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{67, 81, 82, 69, 68}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[1, 0.75, 0], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           PolygonBox[{{70, 79, 80, 74, 73, 72, 71}}]}]}, {}, {
         EdgeForm[], 
         Directive[
          RGBColor[0.647624, 0.37816, 0.614037], 
          Opacity[0.2]], 
         GraphicsGroupBox[{
           
           PolygonBox[{{75, 77, 78, 
            
            76}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{}, {}, {
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[{1, 2}]}, {
         Hue[0.9060679774997897, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[{3, 4}]}, {
         Hue[0.1421359549995791, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         LineBox[{5, 6}]}, {
         Hue[0.37820393249936934`, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         LineBox[{7, 8, 9, 10}]}, {
         Hue[0.6142719099991583, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]], 
         LineBox[{11, 12}]}, {
         Hue[0.8503398874989481, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]], 
         LineBox[{13, 14, 15}]}, {
         Hue[0.08640786499873876, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]], 
         LineBox[{16, 17}]}, {
         Hue[0.3224758424985268, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]], 
         LineBox[{18, 19, 20, 21}]}, {
         Hue[0.5585438199983166, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[1.6]], 
         LineBox[{22, 23, 24}]}, {
         Hue[0.7946117974981064, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.571589, 0.586483, 0.], 
          AbsoluteThickness[1.6]], 
         LineBox[{25, 26, 27}]}, {
         Hue[0.030679774997896203`, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.915, 0.3325, 0.2125], 
          AbsoluteThickness[1.6]], 
         LineBox[{28, 29, 30, 31, 32}]}, {
         Hue[0.266747752497686, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
          AbsoluteThickness[1.6]], 
         LineBox[{33, 34, 35}]}, {
         Hue[0.5028157299974758, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[
          0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
          AbsoluteThickness[1.6]], 
         LineBox[{36, 37, 38}]}, {
         Hue[0.7388837074972656, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
          AbsoluteThickness[1.6]], 
         LineBox[{39, 40}]}, {
         Hue[0.9749516849970554, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
          AbsoluteThickness[1.6]], 
         LineBox[{41, 42}]}, {
         Hue[0.21101966249684523`, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[{43, 44}]}, {
         Hue[0.44708763999663503`, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[{45, 46}]}, {
         Hue[0.6831556174964248, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         LineBox[{47, 48, 49, 50, 51, 52}]}, {
         Hue[0.9192235949962146, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         LineBox[{53, 54, 55}]}, {
         Hue[0.15529157249600445`, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]], 
         LineBox[{56, 57}]}, {
         Hue[0.39135954999579425`, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]], 
         LineBox[{58, 59, 60, 61, 62, 63, 64, 65, 66}]}, {
         Hue[0.6274275274955841, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]], 
         LineBox[{67, 68, 69}]}, {
         Hue[0.8634955049953739, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]], 
         LineBox[{70, 71, 72, 73, 74}]}, {
         Hue[0.09956348249516367, 0.6, 0.6], 
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[1.6]], 
         LineBox[{75, 76}]}}, {{
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.571589, 0.586483, 0.], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.915, 0.3325, 0.2125], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[
          0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[1.6]]}}, {{
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.571589, 0.586483, 0.], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.915, 0.3325, 0.2125], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[
          0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[
          1.6]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}}, {{
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.571589, 0.586483, 0.], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.915, 0.3325, 0.2125], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[
          0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]]}, {
         Directive[
          PointSize[0.011000000000000001`], 
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[
          1.6]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}}}], {{}, {{}, {}}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0.8333333333333337, 0}, 
     DisplayFunction :> Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{
        FormBox["\"Code size (bytes)\"", TraditionalForm], None}, {
        FormBox["\"Revision Number\"", TraditionalForm], None}}, FrameStyle -> 
     Automatic, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
       GrayLevel[0.4, 0.5], 
       AbsoluteThickness[1], 
       AbsoluteDashing[{1, 2}]], ImageSize -> Large, 
     Method -> {
      "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Identity[#]& )[
            Part[#, 1]], 
           (Identity[#]& )[
            Part[#, 2]]}& )}}, PlotLabel -> FormBox[
       InterpretationBox[
        TemplateBox[{
          TemplateBox[{1}, "Spacer1"], 
          "\"Q: [Martin Ender] xkcd-Style Page Numbering\"", 
          TemplateBox[{
            TagBox[
             TooltipBox[
              StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
              "\"Open\"", LabelStyle -> "TextStyling"], 
             Annotation[#, "Open", "Tooltip"]& ], 
            "https://codegolf.stackexchange.com/q/51517"}, "HyperlinkURL"]}, 
         "RowWithSeparator"], 
        Entity["StackExchange.Codegolf:Post", "51517"], BaseStyle -> 
        "Entity"], TraditionalForm], 
     PlotRange -> {{0.8333333333333337, 9.}, {0, 293.}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}}],
   FormBox[
    FormBox[
     TemplateBox[{
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"Bubbler\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/78410"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "78410"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Japt\"", 
          Entity["CodeGolfProgrammingLanguage", "japt"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/165694"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"recursive\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/527"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "527"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Stax\"", 
          Entity["CodeGolfProgrammingLanguage", "stax"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/165889"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"tsh\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/44718"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "44718"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"JS\"", 
          Entity["CodeGolfProgrammingLanguage", "JavaScript::g3427"], 
          BaseStyle -> "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/165890"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"JimmyJazzx\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/41497"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "41497"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"VBA\"", 
          Entity["CodeGolfProgrammingLanguage", "vba"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/51546"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"Toby Speight\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/39490"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "39490"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"C Preprocessor\"", 
          Entity["CodeGolfProgrammingLanguage", "C::p5vhv"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/61001"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"SuperJedi224\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/39022"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "39022"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Turing Machine\"", 
          Entity["CodeGolfProgrammingLanguage", "turingmachine"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/51784"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"Compass\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/32114"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "32114"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"es\"", 
          Entity["CodeGolfProgrammingLanguage", "Es::b2xfx"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/51518"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"Qwertiy\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/32091"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "32091"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"JS\"", 
          Entity["CodeGolfProgrammingLanguage", "JavaScript::g3427"], 
          BaseStyle -> "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/51599"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"ankh-morpork\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/31441"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "31441"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Java\"", 
          Entity["CodeGolfProgrammingLanguage", "Java::6847c"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/51544"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"ankh-morpork\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/31441"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "31441"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Haskell\"", 
          Entity["CodeGolfProgrammingLanguage", "Haskell::rb945"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/51533"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"CJ Dennis\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/29560"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "29560"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Perl\"", 
          Entity["CodeGolfProgrammingLanguage", "Perl::2vj49"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/51627"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"PenutReaper\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/26957"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "26957"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"T-SQL\"", 
          Entity["CodeGolfProgrammingLanguage", "t-sql"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/51646"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"rink.attendant.6\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/22867"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "22867"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"CoffeeScript\"", 
          Entity["CodeGolfProgrammingLanguage", "CoffeeScript::fnn88"], 
          BaseStyle -> "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/51604"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"Sp3000\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/21487"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "21487"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Python\"", 
          Entity["CodeGolfProgrammingLanguage", "Python::4g426"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/51521"}, "HyperlinkURL"]}, 
        "RowWithSeparator"], 
       TemplateBox[{
         TemplateBox[{1}, "Spacer1"], 
         InterpretationBox[
          TemplateBox[{
            TemplateBox[{1}, "Spacer1"], "\"Tally\"", 
            TemplateBox[{
              TagBox[
               TooltipBox[
                StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
                "\"Open\"", LabelStyle -> "TextStyling"], 
               Annotation[#, "Open", "Tooltip"]& ], 
              "https://codegolf.stackexchange.com/users/21370"}, 
             "HyperlinkURL"]}, "RowWithSeparator"], 
          Entity["StackExchange.Codegolf:User", "21370"], BaseStyle -> 
          "Entity"], 
         InterpretationBox["\"Mathematica\[ScriptCapitalJ] L=\"", 
          Entity["CodeGolfProgrammingLanguage", "WolframLanguage"], BaseStyle -> 
          "Entity"], 
         TemplateBox[{
           StyleBox["\"\[RightGuillemet]\"", 18, StripOnInput -> False], 
           "https://codegolf.stackexchange.com/q/51810"}, "HyperlinkURL"]}, 
        "RowWithSeparator"]}, "PointLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #7}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #8}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"], 
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #9}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #10}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #11}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #12}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #13}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #14}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #15}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.922526`", ",", "0.385626`", ",", "0.209179`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.3523253333333333, 0.3137493333333333, 
                    0.46756733333333333`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.528488`", ",", "0.470624`", ",", "0.701351`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.528488, 0.470624, 0.701351]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.528488, 0.470624, 0.701351], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.5147193333333333, 0.28770266666666666`, 
                    0.06825800000000001], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.772079`", ",", "0.431554`", ",", "0.102387`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.772079, 0.431554, 0.102387]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.772079, 0.431554, 0.102387], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.24259866666666668`, 0.412334, 0.521566], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.363898`", ",", "0.618501`", ",", "0.782349`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.363898, 0.618501, 0.782349]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.363898, 0.618501, 0.782349], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.75, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0.6666666666666666, 0.5, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.75`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.75, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.75, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.4317493333333333, 0.2521066666666667, 
                    0.40935800000000006`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.647624`", ",", "0.37816`", ",", "0.614037`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.647624, 0.37816, 0.614037]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.647624, 0.37816, 0.614037], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.571589, 0.586483, 0.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.38105933333333336`, 0.39098866666666665`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.571589`", ",", "0.586483`", ",", "0.`"}], 
                    "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.571589, 0.586483, 0.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.571589, 0.586483, 0.], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.915, 0.3325, 0.2125], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6100000000000001, 0.22166666666666668`, 
                    0.14166666666666666`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.915`", ",", "0.3325`", ",", "0.2125`"}], "]"}],
                     NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.915, 0.3325, 0.2125]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.915, 0.3325, 0.2125], Editable -> False, 
                    Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.2672148173956843, 0.34800444289592275`, 
                    0.5666666666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.40082222609352647`", ",", "0.5220066643438841`", ",", 
                    "0.85`"}], "]"}], NumberMarks -> False]], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    Editable -> False, Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6485525936249404, 0.4144296347913687, 
                    0.048907997212660946`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.9728288904374106`", ",", "0.621644452187053`", ",", 
                    "0.07336199581899142`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.4911884484706007, 0.23866666666666667`, 
                    0.3353511049170246], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.736782672705901`", ",", "0.358`", ",", 
                    "0.5030266573755369`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    Editable -> False, Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.011000000000000001`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.18684294025131137`, 0.4766666666666667, 
                    0.2861392881649977], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    
                    RowBox[{
                    "0.28026441037696703`", ",", "0.715`", ",", 
                    "0.4292089322474965`"}], "]"}], NumberMarks -> False]], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965],
                     Editable -> False, Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, ",", #7, 
               ",", #8, ",", #9, ",", #10, ",", #11, ",", #12, ",", #13, 
               ",", #14, ",", #15}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "True", ",", "True", ",", "True", ",", "True", ",", "True", 
                 ",", "True", ",", "True", ",", "True", ",", "True", ",", 
                 "True", ",", "True", ",", "True", ",", "True", ",", "True", 
                 ",", "True", ",", "True", ",", "True", ",", "True", ",", 
                 "True", ",", "True", ",", "True", ",", "True", ",", "True", 
                 ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.780253132883688*^9, 3.780253154757323*^9}, {
   3.78025391869458*^9, 3.7802539449737606`*^9}, {3.7802540745801535`*^9, 
   3.7802542004894023`*^9}, {3.7802545047410603`*^9, 3.7802545401604385`*^9}, 
   3.7802545807288804`*^9, 3.7802546337179856`*^9, 3.780254915028361*^9, {
   3.780254974394808*^9, 3.780254998324498*^9}, {3.7802553881941786`*^9, 
   3.7802554489642177`*^9}, 3.780255486309966*^9, 3.780255536027977*^9, 
   3.780255619322177*^9, {3.7802556601428795`*^9, 3.780255707778185*^9}, 
   3.7803465841711216`*^9, {3.780419261773579*^9, 3.780419272256605*^9}},
 CellLabel->"Out[89]=",ExpressionUUID->"4be38ce8-55c9-45ce-9a35-0c5f442fb068"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Language URLCounts", "Subsubsection",
 CellChangeTimes->{{3.7803474743053827`*^9, 3.780347498616873*^9}, 
   3.78034772137613*^9},ExpressionUUID->"5aaf4a8d-cd2b-45d8-b488-\
01c8f7df41b0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EntityProperty", "[", 
     RowBox[{
     "\"\<CodeGolfProgrammingLanguage\>\"", ",", "\"\<URLCounts\>\""}], "]"}],
     "[", "\"\<Label\>\"", "]"}], "=", "\"\<URL counts\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EntityProperty", "[", 
     RowBox[{
     "\"\<CodeGolfProgrammingLanguage\>\"", ",", "\"\<URLCounts\>\""}], "]"}],
     "[", "\"\<DefaultFunction\>\"", "]"}], "=", 
   RowBox[{"EntityFramework`BatchApplied", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Lookup", "[", 
       RowBox[{"languageToURLCounts", ",", "#", ",", 
        RowBox[{"<|", "|>"}]}], "]"}], "&"}], "/*", 
     RowBox[{"Map", "[", 
      RowBox[{"KeyMap", "[", "URL", "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  TemplateBox[{"\"Rust\"",RowBox[{"Entity", "[", 
      RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Rust::8y9w4\""}], 
      "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Rust::8y9w4\\\"]\"","\"CodeGolfProgrammingLanguage\""},
   "Entity"], "[", "\"\<URLCounts\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.7803475508516197`*^9, 3.7803476783686495`*^9}, {
  3.7803478458308535`*^9, 3.78034784758912*^9}, {3.7803479560386915`*^9, 
  3.780347980780629*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"d3dda313-9ba3-448b-a144-662d6cd3883c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"URL", "[", 
     TemplateBox[{"\"https://www.rust-lang.org/\""},
      "URLArgument"], "]"}], "\[Rule]", "58"}], ",", 
   RowBox[{
    RowBox[{"URL", "[", 
     TemplateBox[{"\"https://www.rust-lang.org/en-US/\""},
      "URLArgument"], "]"}], "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"URL", "[", 
     TemplateBox[{"\"http://www.rust-lang.org/\""},
      "URLArgument"], "]"}], "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"URL", "[", 
     TemplateBox[{
      "\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&\
gist=309e94d8fe6a66c402a09901e9af5621\""},
      "URLArgument"], "]"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"URL", "[", 
     TemplateBox[{"\"https://rust-lang.org\""},
      "URLArgument"], "]"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"URL", "[", 
     TemplateBox[{
      "\"https://play.rust-lang.org/?version=stable&mode=debug&edition=2015&\
gist=3f493af80510e031bd0c7f85f4cd3497\""},
      "URLArgument"], "]"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"URL", "[", 
     TemplateBox[{"\"https://oeis.org/A000141\""},
      "URLArgument"], "]"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"URL", "[", 
     TemplateBox[{"\"https://oeis.org/A000001\""},
      "URLArgument"], "]"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"URL", "[", 
     TemplateBox[{"\"http://rust-lang.org/\""},
      "URLArgument"], "]"}], "\[Rule]", "1"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.7803476439675922`*^9, 3.780347683516636*^9, 3.7803478479958224`*^9, {
   3.780347964073905*^9, 3.780347995313718*^9}, 3.78041928601263*^9, 
   3.780420344872553*^9, 3.780679609893364*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"dfe9fb7e-3309-47f6-b3df-4f310b42b87d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Language URL", "Subsubsection",
 CellChangeTimes->{{3.7803474743053827`*^9, 3.780347498616873*^9}, {
  3.78034772137613*^9, 
  3.780347726449412*^9}},ExpressionUUID->"df819892-d2bc-45f1-8e9d-\
31de62b6106e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EntityProperty", "[", 
     RowBox[{"\"\<CodeGolfProgrammingLanguage\>\"", ",", "\"\<URL\>\""}], 
     "]"}], "[", "\"\<Label\>\"", "]"}], "=", "\"\<URL\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EntityProperty", "[", 
     RowBox[{"\"\<CodeGolfProgrammingLanguage\>\"", ",", "\"\<URL\>\""}], 
     "]"}], "[", "\"\<DefaultFunction\>\"", "]"}], "=", 
   RowBox[{"EntityFramework`BatchApplied", "[", "\[IndentingNewLine]", 
    RowBox[{"RightComposition", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"EntityProperty", "[", 
       RowBox[{
       "\"\<CodeGolfProgrammingLanguage\>\"", ",", "\"\<URLCounts\>\""}], 
       "]"}], ",", "\[IndentingNewLine]", "Keys", ",", "\[IndentingNewLine]", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"#", ",", 
          RowBox[{"Missing", "[", "\"\<NotAvailable\>\"", "]"}]}], "]"}], 
        "&"}], "]"}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  TemplateBox[{"\"Rust\"",RowBox[{"Entity", "[", 
      RowBox[{"\"CodeGolfProgrammingLanguage\"", ",", "\"Rust::8y9w4\""}], 
      "]"}],"\"Entity[\\\"CodeGolfProgrammingLanguage\\\", \
\\\"Rust::8y9w4\\\"]\"","\"CodeGolfProgrammingLanguage\""},
   "Entity"], "[", "\"\<URL\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.7803475508516197`*^9, 3.7803476783686495`*^9}, {
  3.7803477288879232`*^9, 3.7803478759533434`*^9}, {3.780347989347891*^9, 
  3.7803479899732313`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"4d83c377-24fa-4185-b219-b5840cf24ddc"],

Cell[BoxData[
 RowBox[{"URL", "[", 
  TemplateBox[{"\"https://www.rust-lang.org/\""},
   "URLArgument"], "]"}]], "Output",
 CellChangeTimes->{{3.7803478580294676`*^9, 3.780347876403184*^9}, {
   3.7803479915241203`*^9, 3.7803479964616613`*^9}, 3.780419289234911*^9, 
   3.780420346794347*^9, 3.780679611588584*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"d0be7785-8299-4b91-bbd8-f902e6fc1643"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Export cleaned up EntityStores", "Section",
 CellChangeTimes->{{3.780403049475201*^9, 3.7804030660226955`*^9}, 
   3.7804193988731823`*^9},ExpressionUUID->"a25b43e5-a1ca-4d60-bc57-\
c8d2b32fc47d"],

Cell["\<\
Export these cleaned up EntityStores for further exploration in Explore.nb:\
\>", "Text",
 CellChangeTimes->{{3.780403313992387*^9, 
  3.780403337093171*^9}},ExpressionUUID->"d7e6b75b-56dc-421d-a86d-\
3b28aa38f841"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"\"\<codegolf.stackexchange.com_Cleaned_\>\"", "<>", 
    RowBox[{"StringReplace", "[", 
     RowBox[{
      RowBox[{"DateString", "[", "\"\<ISODateTime\>\"", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<:\>\"", "\[Rule]", "\"\<-\>\""}], ",", 
        RowBox[{"\"\<T\>\"", "\[Rule]", "\"\<_\>\""}]}], "}"}]}], "]"}], 
    "<>", "\"\<.mx\>\""}], ",", 
   RowBox[{
    RowBox[{"Entity", "[", "\"\<StackExchange.Codegolf:Post\>\"", "]"}], "[", 
    "\"\<EntityStore\>\"", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.780403086966978*^9, 3.7804030878802843`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"ecffe604-6b58-4c92-88c0-c11e746a43cf"],

Cell[BoxData["\<\"codegolf.stackexchange.com_Cleaned_2019-10-21_16-46-54.mx\"\
\>"], "Output",
 CellChangeTimes->{3.779811511050807*^9, 3.780065688482699*^9, 
  3.780147892458085*^9, 3.7801749200583763`*^9, 3.780230061074321*^9, 
  3.7804193961421585`*^9, 3.780420391898203*^9, 3.7806796541004934`*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"2f3ac6a0-a126-44f6-9694-3efffafe2f9f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"\"\<CodeGolfProgrammingLanguage_Cleaned_\>\"", "<>", 
    RowBox[{"StringReplace", "[", 
     RowBox[{
      RowBox[{"DateString", "[", "\"\<ISODateTime\>\"", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<:\>\"", "\[Rule]", "\"\<-\>\""}], ",", 
        RowBox[{"\"\<T\>\"", "\[Rule]", "\"\<_\>\""}]}], "}"}]}], "]"}], 
    "<>", "\"\<.mx\>\""}], ",", 
   RowBox[{
    RowBox[{"Entity", "[", "\"\<CodeGolfProgrammingLanguage\>\"", "]"}], "[", 
    "\"\<EntityStore\>\"", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.779812070010163*^9, 3.77981208314629*^9}, {
  3.7798121250415883`*^9, 3.779812125177219*^9}, {3.780403093293123*^9, 
  3.780403095538866*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"f07225ce-2a36-4380-9366-de4e5a3dd127"],

Cell[BoxData["\<\"CodeGolfProgrammingLanguage_Cleaned_2019-10-21_16-47-34.mx\"\
\>"], "Output",
 CellChangeTimes->{3.779803361112753*^9, 3.7798034689705153`*^9, 
  3.779803600280857*^9, 3.779803918207511*^9, 3.7798042637979603`*^9, 
  3.77980449888925*^9, 3.780058900421301*^9, 3.7800656887452097`*^9, 
  3.780147892759277*^9, 3.780174920325627*^9, 3.780230061295714*^9, 
  3.780419396343755*^9, 3.780420392076756*^9, 3.780679654294385*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"63caa4f3-2984-4dd9-aa78-4fd31905d5e2"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 997},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 90, 0, 67, "Section",ExpressionUUID->"f9dac247-3fb1-4fc5-b6f1-51b09b27dbd0"],
Cell[673, 24, 216, 3, 34, "Text",ExpressionUUID->"a9d83211-8bb6-4752-a0c5-728a105aeb1d"],
Cell[CellGroupData[{
Cell[914, 31, 88, 0, 53, "Subsection",ExpressionUUID->"7ba87b9d-b993-4a81-9e57-f567ae0e9bf9"],
Cell[1005, 33, 295, 6, 48, "Input",ExpressionUUID->"965c2508-283f-476c-b245-4ab2575ea958"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1337, 44, 152, 3, 53, "Subsection",ExpressionUUID->"78330f9d-a183-47f0-964f-f30e0b8e7afb"],
Cell[1492, 49, 186, 3, 34, "Text",ExpressionUUID->"4f734786-aa17-434e-85cd-7f573f61a387"],
Cell[CellGroupData[{
Cell[1703, 56, 1335, 35, 181, "Input",ExpressionUUID->"f54d74e0-2b98-464c-81fc-15fa44a7b55f"],
Cell[3041, 93, 750, 15, 52, "Output",ExpressionUUID->"d6e9fe2e-591b-4249-8699-ab0d6f43dcbc"],
Cell[3794, 110, 258, 4, 32, "Output",ExpressionUUID->"b9528f96-3312-4a73-9726-1788bb3590a2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[4101, 120, 220, 3, 53, "Subsection",ExpressionUUID->"3537d03e-7af9-431e-964d-9f504cf395a1"],
Cell[CellGroupData[{
Cell[4346, 127, 116, 0, 44, "Subsubsection",ExpressionUUID->"ba85e1ee-0623-4482-82a7-698399859f8b"],
Cell[4465, 129, 247, 4, 56, "Text",ExpressionUUID->"43ec8029-33c5-467b-b3ac-5e0f8a945f10"],
Cell[4715, 135, 40112, 812, 2133, "Input",ExpressionUUID->"1242d08c-b7db-46d4-a5bc-571ab75b2a47"],
Cell[CellGroupData[{
Cell[44852, 951, 200, 2, 28, "Input",ExpressionUUID->"062921e8-e3bf-45dd-81cf-15f8498385ea"],
Cell[45055, 955, 58695, 1197, 70, "Output",ExpressionUUID->"d22dab83-f2d8-4b6e-9113-6f283a345038"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[103799, 2158, 288, 4, 36, "Subsubsection",ExpressionUUID->"ee00bd41-3dc4-4d36-9b02-e9154b7abc8e"],
Cell[CellGroupData[{
Cell[104112, 2166, 399, 9, 48, "Input",ExpressionUUID->"56418ab5-0e6b-4d24-b3d9-1c40f8cc6655"],
Cell[104514, 2177, 205, 3, 32, "Output",ExpressionUUID->"42fcfa48-1482-47dd-a934-b6455923bbb0"]
}, Open  ]],
Cell[104734, 2183, 874, 19, 28, "Input",ExpressionUUID->"7d3eecdb-cee4-4d9f-9c8f-f49626e787df"],
Cell[CellGroupData[{
Cell[105633, 2206, 574, 15, 28, "Input",ExpressionUUID->"32393edc-3924-4664-ab91-6efd063cd2de"],
Cell[106210, 2223, 374, 6, 32, "Output",ExpressionUUID->"59282fc5-c18f-49dc-a8e5-a0fd25807a69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[106621, 2234, 469, 10, 48, "Input",ExpressionUUID->"e814a426-7d91-4e3f-b524-d12aa90aadff"],
Cell[107093, 2246, 322, 4, 32, "Output",ExpressionUUID->"6416bbc9-4211-4249-9d00-e730731062d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107452, 2255, 653, 13, 42, "Input",ExpressionUUID->"2fe32195-ff42-4fff-9c78-18c75e2305a2"],
Cell[108108, 2270, 398, 6, 32, "Output",ExpressionUUID->"508f47aa-b67f-454b-9476-ed088cced77f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[108555, 2282, 449, 8, 44, "Subsubsection",ExpressionUUID->"1e953cd3-c414-458f-be57-7ff03aeb8604"],
Cell[CellGroupData[{
Cell[109029, 2294, 1020, 23, 48, "Input",ExpressionUUID->"b5eda370-7159-4704-8dcb-44ff8403aaa8"],
Cell[110052, 2319, 424, 6, 32, "Output",ExpressionUUID->"333ba753-f811-4ac6-9f9e-f320c7fdf13e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[110513, 2330, 397, 8, 28, "Input",ExpressionUUID->"d9230d35-20e8-4692-b31c-d0859d2ff22c"],
Cell[110913, 2340, 4068, 80, 47, "Output",ExpressionUUID->"2a93e2cc-94eb-4c93-8ccf-3a5aba0afcdb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[115018, 2425, 319, 7, 28, "Input",ExpressionUUID->"988a3e5b-f228-4f08-bee9-cca40ff8a80d"],
Cell[115340, 2434, 4369, 82, 82, "Output",ExpressionUUID->"a29fbb90-106e-48e8-9fa1-78057626bd8e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119746, 2521, 221, 4, 28, "Input",ExpressionUUID->"476c7fdf-df59-443a-b3df-8192cfbcc501"],
Cell[119970, 2527, 178, 2, 32, "Output",ExpressionUUID->"2f933903-a03e-43be-842b-e1dafbaea147"]
}, Open  ]],
Cell[CellGroupData[{
Cell[120185, 2534, 2400, 55, 200, "Input",ExpressionUUID->"a9e79d04-4e30-44d3-a5a1-1bcae0a0b137"],
Cell[122588, 2591, 448, 7, 32, "Output",ExpressionUUID->"d56deaea-e890-4627-954b-b0b6544572ac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123073, 2603, 291, 5, 28, "Input",ExpressionUUID->"ad724144-6041-4161-b4e4-52b371a94a0d"],
Cell[123367, 2610, 247, 3, 32, "Output",ExpressionUUID->"a7c2d198-4f2b-44d4-8bb3-892eb98979d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123651, 2618, 327, 7, 28, "Input",ExpressionUUID->"71a99009-ea1a-4075-a433-20166f302d6b"],
Cell[123981, 2627, 453, 8, 45, "Output",ExpressionUUID->"629837c0-0df0-4c90-9a73-b8534a95a90a"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[124495, 2642, 102, 0, 53, "Subsection",ExpressionUUID->"0dc24130-a1e6-4210-a6a6-d88659c8d6df"],
Cell[CellGroupData[{
Cell[124622, 2646, 184, 3, 44, "Subsubsection",ExpressionUUID->"a23ad657-2800-4c84-b6d5-ec4a74779e43"],
Cell[CellGroupData[{
Cell[124831, 2653, 1976, 47, 147, "Input",ExpressionUUID->"51e3e244-441c-4640-9140-4123a279b194"],
Cell[126810, 2702, 552, 9, 45, "Output",ExpressionUUID->"45e86c92-b6c5-46c6-8726-946ea1c79e38"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[127411, 2717, 228, 4, 44, "Subsubsection",ExpressionUUID->"81640c8c-e6e7-426d-907e-237044e45111"],
Cell[CellGroupData[{
Cell[127664, 2725, 2048, 47, 147, "Input",ExpressionUUID->"6c3ef785-dc34-4adb-9fa5-7c19955afcdb"],
Cell[129715, 2774, 712, 13, 50, "Output",ExpressionUUID->"0d8f4de1-4a0e-430f-9423-9c4c40da750a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[130476, 2793, 177, 3, 44, "Subsubsection",ExpressionUUID->"5dd6a9fd-95b0-4a94-a880-2942e54672f0"],
Cell[CellGroupData[{
Cell[130678, 2800, 1998, 46, 147, "Input",ExpressionUUID->"9117ec35-14e5-40ba-9419-c30ad640be7b"],
Cell[132679, 2848, 327, 5, 52, "Output",ExpressionUUID->"abe69461-032f-46ea-96ea-d6abbf342c7b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[133055, 2859, 235, 4, 44, "Subsubsection",ExpressionUUID->"09945c8b-7b90-4410-b469-22815507baff"],
Cell[CellGroupData[{
Cell[133315, 2867, 4763, 106, 211, "Input",ExpressionUUID->"58d9f0a0-d879-41ed-bbb8-1cffd53178b7"],
Cell[138081, 2975, 73830, 1398, 71, "Output",ExpressionUUID->"126b2957-659d-4b9b-a554-3b8ef3cb1efd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[211948, 4378, 262, 5, 31, "Subsubsubsection",ExpressionUUID->"5ae20674-db17-442f-bb0e-18599a1fe4c5"],
Cell[CellGroupData[{
Cell[212235, 4387, 1431, 31, 86, "Input",ExpressionUUID->"acbcda13-4221-4e23-8515-56f0bdccf2f8"],
Cell[213669, 4420, 376, 6, 32, "Output",ExpressionUUID->"b956d589-206d-4579-bb9f-cddff58ea3c1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214082, 4431, 610, 13, 28, "Input",ExpressionUUID->"b2e413a5-201e-4cfb-a0ef-a39fc145eab1"],
Cell[214695, 4446, 518, 9, 32, "Output",ExpressionUUID->"7b92162a-103b-4986-a910-3280155e76aa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215250, 4460, 287, 6, 28, "Input",ExpressionUUID->"dc8e192b-f5de-444c-b922-0fc4f2466b48"],
Cell[215540, 4468, 136827, 2190, 161, "Output",ExpressionUUID->"762d9ea9-9ae6-4ee9-8f81-4c8d775a1a44"]
}, Open  ]],
Cell[352382, 6661, 404, 10, 28, "Input",ExpressionUUID->"4a2a7718-9d9c-4230-a944-1a46c32fc8f8"],
Cell[352789, 6673, 188, 3, 34, "Text",ExpressionUUID->"35d64770-1af1-4db9-8adf-7544b044e3dd"],
Cell[CellGroupData[{
Cell[353002, 6680, 2129, 52, 200, "Input",ExpressionUUID->"6e64eb5c-8fa2-42b2-85bb-17cf2479ac4c"],
Cell[355134, 6734, 205730, 4261, 267, "Output",ExpressionUUID->"11f4fbd4-6920-4cc4-af53-078004c05758"]
}, Open  ]],
Cell[560879, 10998, 735, 17, 48, "Input",ExpressionUUID->"6a263a88-892f-4a16-902c-924b34eaf4e4"],
Cell[CellGroupData[{
Cell[561639, 11019, 3437, 73, 258, "Input",ExpressionUUID->"9597df1b-52b2-44f1-ab49-2181f628d0db"],
Cell[565079, 11094, 106056, 2253, 409, "Output",ExpressionUUID->"4be38ce8-55c9-45ce-9a35-0c5f442fb068"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[671196, 13354, 193, 3, 44, "Subsubsection",ExpressionUUID->"5aaf4a8d-cd2b-45d8-b488-01c8f7df41b0"],
Cell[CellGroupData[{
Cell[671414, 13361, 1384, 34, 80, "Input",ExpressionUUID->"d3dda313-9ba3-448b-a144-662d6cd3883c"],
Cell[672801, 13397, 1835, 48, 69, "Output",ExpressionUUID->"dfe9fb7e-3309-47f6-b3df-4f310b42b87d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[674685, 13451, 213, 4, 44, "Subsubsection",ExpressionUUID->"df819892-d2bc-45f1-8e9d-31de62b6106e"],
Cell[CellGroupData[{
Cell[674923, 13459, 1672, 37, 194, "Input",ExpressionUUID->"4d83c377-24fa-4185-b219-b5840cf24ddc"],
Cell[676598, 13498, 393, 7, 39, "Output",ExpressionUUID->"d0be7785-8299-4b91-bbd8-f902e6fc1643"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[677064, 13513, 202, 3, 67, "Section",ExpressionUUID->"a25b43e5-a1ca-4d60-bc57-c8d2b32fc47d"],
Cell[677269, 13518, 225, 5, 34, "Text",ExpressionUUID->"d7e6b75b-56dc-421d-a86d-3b28aa38f841"],
Cell[CellGroupData[{
Cell[677519, 13527, 856, 20, 48, "Input",ExpressionUUID->"ecffe604-6b58-4c92-88c0-c11e746a43cf"],
Cell[678378, 13549, 381, 5, 32, "Output",ExpressionUUID->"2f3ac6a0-a126-44f6-9694-3efffafe2f9f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[678796, 13559, 954, 22, 48, "Input",ExpressionUUID->"f07225ce-2a36-4380-9366-de4e5a3dd127"],
Cell[679753, 13583, 519, 7, 32, "Output",ExpressionUUID->"63caa4f3-2984-4dd9-aa78-4fd31905d5e2"]
}, Open  ]]
}, Open  ]]
}
]
*)

